(lp0
S'http://tuhdo.github.io/helm-intro.html'
p1
aS'A Package in a league of its own: &lt;code&gt;Helm&lt;/code&gt;'
p2
aI0
aV<?xml version="1.0" encoding="utf-8"?>\u000a<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"\u000a"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">\u000a<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">\u000a<head>\u000a<!-- 2016-09-14 Wed 11:37 -->\u000a<meta  http-equiv="Content-Type" content="text/html;charset=utf-8" />\u000a<meta  name="viewport" content="width=device-width, initial-scale=1" />\u000a<title>A Package in a league of its own: <code>Helm</code></title>\u000a<meta  name="generator" content="Org-mode" />\u000a<meta  name="author" content="Tu Do" />\u000a<style type="text/css">\u000a <!--/*--><![CDATA[/*><!--*/\u000a  .title  { text-align: center;\u000a             margin-bottom: .2em; }\u000a  .subtitle { text-align: center;\u000a              font-size: medium;\u000a              font-weight: bold;\u000a              margin-top:0; }\u000a  .todo   { font-family: monospace; color: red; }\u000a  .done   { font-family: monospace; color: green; }\u000a  .priority { font-family: monospace; color: orange; }\u000a  .tag    { background-color: #eee; font-family: monospace;\u000a            padding: 2px; font-size: 80%; font-weight: normal; }\u000a  .timestamp { color: #bebebe; }\u000a  .timestamp-kwd { color: #5f9ea0; }\u000a  .org-right  { margin-left: auto; margin-right: 0px;  text-align: right; }\u000a  .org-left   { margin-left: 0px;  margin-right: auto; text-align: left; }\u000a  .org-center { margin-left: auto; margin-right: auto; text-align: center; }\u000a  .underline { text-decoration: underline; }\u000a  #postamble p, #preamble p { font-size: 90%; margin: .2em; }\u000a  p.verse { margin-left: 3%; }\u000a  pre {\u000a    border: 1px solid #ccc;\u000a    box-shadow: 3px 3px 3px #eee;\u000a    padding: 8pt;\u000a    font-family: monospace;\u000a    overflow: auto;\u000a    margin: 1.2em;\u000a  }\u000a  pre.src {\u000a    position: relative;\u000a    overflow: visible;\u000a    padding-top: 1.2em;\u000a  }\u000a  pre.src:before {\u000a    display: none;\u000a    position: absolute;\u000a    background-color: white;\u000a    top: -10px;\u000a    right: 10px;\u000a    padding: 3px;\u000a    border: 1px solid black;\u000a  }\u000a  pre.src:hover:before { display: inline;}\u000a  pre.src-sh:before    { content: 'sh'; }\u000a  pre.src-bash:before  { content: 'sh'; }\u000a  pre.src-emacs-lisp:before { content: 'Emacs Lisp'; }\u000a  pre.src-R:before     { content: 'R'; }\u000a  pre.src-perl:before  { content: 'Perl'; }\u000a  pre.src-java:before  { content: 'Java'; }\u000a  pre.src-sql:before   { content: 'SQL'; }\u000a\u000a  table { border-collapse:collapse; }\u000a  caption.t-above { caption-side: top; }\u000a  caption.t-bottom { caption-side: bottom; }\u000a  td, th { vertical-align:top;  }\u000a  th.org-right  { text-align: center;  }\u000a  th.org-left   { text-align: center;   }\u000a  th.org-center { text-align: center; }\u000a  td.org-right  { text-align: right;  }\u000a  td.org-left   { text-align: left;   }\u000a  td.org-center { text-align: center; }\u000a  dt { font-weight: bold; }\u000a  .footpara { display: inline; }\u000a  .footdef  { margin-bottom: 1em; }\u000a  .figure { padding: 1em; }\u000a  .figure p { text-align: center; }\u000a  .inlinetask {\u000a    padding: 10px;\u000a    border: 2px solid gray;\u000a    margin: 10px;\u000a    background: #ffffcc;\u000a  }\u000a  #org-div-home-and-up\u000a   { text-align: right; font-size: 70%; white-space: nowrap; }\u000a  textarea { overflow-x: auto; }\u000a  .linenr { font-size: smaller }\u000a  .code-highlighted { background-color: #ffff00; }\u000a  .org-info-js_info-navigation { border-style: none; }\u000a  #org-info-js_console-label\u000a    { font-size: 10px; font-weight: bold; white-space: nowrap; }\u000a  .org-info-js_search-highlight\u000a    { background-color: #ffff00; color: #000000; font-weight: bold; }\u000a  /*]]>*/-->\u000a</style>\u000a<link rel="stylesheet" href="./static/worg.css">\u000a<script type="text/javascript">\u000a/*\u000a@licstart  The following is the entire license notice for the\u000aJavaScript code in this tag.\u000a\u000aCopyright (C) 2012-2013 Free Software Foundation, Inc.\u000a\u000aThe JavaScript code in this tag is free software: you can\u000aredistribute it and/or modify it under the terms of the GNU\u000aGeneral Public License (GNU GPL) as published by the Free Software\u000aFoundation, either version 3 of the License, or (at your option)\u000aany later version.  The code is distributed WITHOUT ANY WARRANTY;\u000awithout even the implied warranty of MERCHANTABILITY or FITNESS\u000aFOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.\u000a\u000aAs additional permission under GNU GPL version 3 section 7, you\u000amay distribute non-source (e.g., minimized or compacted) forms of\u000athat code without the copy of the GNU GPL normally required by\u000asection 4, provided you include this license notice and a URL\u000athrough which recipients can access the Corresponding Source.\u000a\u000a\u000a@licend  The above is the entire license notice\u000afor the JavaScript code in this tag.\u000a*/\u000a<!--/*--><![CDATA[/*><!--*/\u000a function CodeHighlightOn(elem, id)\u000a {\u000a   var target = document.getElementById(id);\u000a   if(null != target) {\u000a     elem.cacheClassElem = elem.className;\u000a     elem.cacheClassTarget = target.className;\u000a     target.className = "code-highlighted";\u000a     elem.className   = "code-highlighted";\u000a   }\u000a }\u000a function CodeHighlightOff(elem, id)\u000a {\u000a   var target = document.getElementById(id);\u000a   if(elem.cacheClassElem)\u000a     elem.className = elem.cacheClassElem;\u000a   if(elem.cacheClassTarget)\u000a     target.className = elem.cacheClassTarget;\u000a }\u000a/*]]>*///-->\u000a</script>\u000a</head>\u000a<body>\u000a<div id="preamble" class="status">\u000a<!-- Start of StatCounter Code for Default Guide -->\u000a<script type="text/javascript">\u000avar sc_project=9874755;\u000avar sc_invisible=1;\u000avar sc_security="c2028bb7";\u000avar scJsHost = (("https:" == document.location.protocol) ?\u000a"https://secure." : "http://www.");\u000adocument.write("<sc"+"ript type='text/javascript' src='" + scJsHost+\u000a"statcounter.com/counter/counter.js'></"+"script>");\u000a</script>\u000a<noscript><div class="statcounter"><a title="hit counter"\u000ahref="http://statcounter.com/free-hit-counter/" target="_blank"><img\u000aclass="statcounter" src="http://c.statcounter.com/9874755/0/c2028bb7/1/"\u000aalt="hit counter"></a></div></noscript>\u000a<!-- End of StatCounter Code for Default Guide -->\u000a<h2><a href="index.html">Back to Table of Contents</a></h2>\u000a</div>\u000a<div id="content">\u000a<h1 class="title">A Package in a league of its own: <code>Helm</code></h1>\u000a<div id="table-of-contents">\u000a<h2>Table of Contents</h2>\u000a<div id="text-table-of-contents">\u000a<ul>\u000a<li><a href="#orgheadline1">Usage:</a></li>\u000a<li><a href="#orgheadline2">Why is Helm powerful?</a></li>\u000a<li><a href="#orgheadline3">Operate on text at point:</a></li>\u000a<li><a href="#orgheadline4">Autoresize</a></li>\u000a<li><a href="#orgheadline5">Command: <code>helm-M-x</code></a></li>\u000a<li><a href="#orgheadline6">Command: <code>helm-show-kill-ring</code></a></li>\u000a<li><a href="#orgheadline7">Command: <code>helm-mini</code></a></li>\u000a<li><a href="#orgheadline8">Command: <code>helm-find-files</code></a></li>\u000a<li><a href="#orgheadline11">Command: <code>helm-ff-do-grep</code>, live grep in Helm</a></li>\u000a<li><a href="#orgheadline12">Command: <code>helm-semantic-or-imenu</code></a></li>\u000a<li><a href="#orgheadline13">Command: <code>helm-man-woman</code></a></li>\u000a<li><a href="#orgheadline14">Command: <code>helm-find</code></a></li>\u000a<li><a href="#orgheadline15">Command: <code>helm-locate</code></a></li>\u000a<li><a href="#orgheadline16">Command: <code>helm-occur</code></a></li>\u000a<li><a href="#orgheadline17">Command: <code>helm-apropos</code></a></li>\u000a<li><a href="#orgheadline18">Command: <code>helm-info-*</code></a></li>\u000a<li><a href="#orgheadline19">Command: <code>helm-lisp-completion-at-point</code></a></li>\u000a<li><a href="#orgheadline20">Command: <code>helm-resume</code></a></li>\u000a<li><a href="#orgheadline21">Command: <code>helm-all-mark-rings</code></a></li>\u000a<li><a href="#orgheadline22">Command: <code>helm-regexp</code></a></li>\u000a<li><a href="#orgheadline23">Command: <code>helm-register</code></a></li>\u000a<li><a href="#orgheadline24">Command: <code>helm-top</code></a></li>\u000a<li><a href="#orgheadline25">Command: <code>helm-surfraw</code></a></li>\u000a<li><a href="#orgheadline26">Command: <code>helm-google-suggest</code></a></li>\u000a<li><a href="#orgheadline27">Command: <code>helm-color</code></a></li>\u000a<li><a href="#orgheadline28">Command: <code>helm-eval-expression-with-eldoc</code></a></li>\u000a<li><a href="#orgheadline29">Command: <code>helm-calcul-expression</code></a></li>\u000a<li><a href="#orgheadline30">Command: <code>helm-eshell-history</code></a></li>\u000a<li><a href="#orgheadline31">Command: <code>helm-comint-input-ring</code></a></li>\u000a<li><a href="#orgheadline32">Command: <code>helm-mini-buffer-history</code></a></li>\u000a<li><a href="#orgheadline33">Package: <code>helm-projectile</code></a></li>\u000a<li><a href="#orgheadline34">Package: <code>helm-descbinds</code></a></li>\u000a<li><a href="#orgheadline35">Summary of Keybindings</a></li>\u000a</ul>\u000a</div>\u000a</div>\u000a<p>\u000a<span class="underline">Author</span>:\u000a</p>\u000a\u000a<ul class="org-ul">\u000a<li>Tamas Patrovic (original author), from 2007. At this time, Helm was\u000anamed <code>Anything</code>.</li>\u000a<li>rubikitch <code>rubikitch@ruby-lang.org</code>, from 2008-2011. Helm was still\u000anamed <code>Anything</code></li>\u000a<li><a href="https://github.com/thierryvolpiatto">Thierry Volpiatto</a> (current maintainer).\u000a<code>thierry.volpiatto@gmail.com</code>, from 2011-present. <code>Anything</code> was\u000arenamed to <code>Helm</code> during this period.</li>\u000a</ul>\u000a\u000a<p>\u000a<span class="underline">Homepage</span>: <a href="https://github.com/emacs-helm/helm">GitHub</a>\u000a</p>\u000a\u000a<p>\u000a<span class="underline">Features</span>:\u000a</p>\u000a\u000a<p>\u000a<code>Helm</code> is an incremental completion and selection narrowing framework for\u000aEmacs. It will help steer you in the right direction when you're\u000alooking for stuff in Emacs (like buffers, files, etc).\u000a</p>\u000a\u000a<p>\u000aHelm is a fork of <code>anything.el</code> (originally written by Tamas Patrovic) and\u000acan be considered to be its successor. <code>Helm</code> sets out to clean up the\u000alegacy code in <code>anything.el</code> and provide a cleaner, leaner and more\u000amodular tool, that's not tied in the trap of backward compatibility.\u000a</p>\u000a\u000a<p>\u000a<span class="underline">Installation</span>:\u000a</p>\u000a\u000a<p>\u000aYou can use <a href="https://github.com/bbatsov/prelude">Emacs Prelude</a> or <a href="https://github.com/syl20bnr/spacemacs">Spacemacs</a>, which are already setup properly. You can\u000askip all configuration code in this guide. But note that by default, <a href="https://github.com/bbatsov/prelude">Emacs\u000aPrelude</a> does not enable Helm. Please follow <a href="https://github.com/bbatsov/prelude#helm">these instructions</a> to enable Helm.\u000a<a href="https://github.com/syl20bnr/spacemacs">Spacemacs</a> enables Helm by default.\u000a</p>\u000a\u000a<p>\u000aIf you are a Spacemacs user, you don't have to do anything. If you have\u000ayour own Emacs configuration, run <code>M-x list-packages</code> and select the <b>helm</b>\u000apackage, then install it. After finish installing, add this\u000aconfiguration to activate the package:\u000a</p>\u000a\u000a<p>\u000aMinimal config:\u000a</p>\u000a\u000a<div class="org-src-container">\u000a\u000a<pre class="src src-emacs-lisp"><span style="color: #707183;">(</span><span style="color: #a020f0;">require</span> '<span style="color: #008b8b;">helm-config</span><span style="color: #707183;">)</span>\u000a<span style="color: #707183;">(</span>helm-mode <span style="color: #008b8b;">1</span><span style="color: #707183;">)</span>\u000a</pre>\u000a</div>\u000a\u000a<p>\u000aExtended config:\u000a</p>\u000a\u000a<div class="org-src-container">\u000a\u000a<pre class="src src-emacs-lisp"><span style="color: #707183;">(</span><span style="color: #a020f0;">require</span> '<span style="color: #008b8b;">helm</span><span style="color: #707183;">)</span>\u000a<span style="color: #707183;">(</span><span style="color: #a020f0;">require</span> '<span style="color: #008b8b;">helm-config</span><span style="color: #707183;">)</span>\u000a\u000a<span style="color: #b22222;">;; </span><span style="color: #b22222;">The default "C-x c" is quite close to "C-x C-c", which quits Emacs.</span>\u000a<span style="color: #b22222;">;; </span><span style="color: #b22222;">Changed to "C-c h". Note: We must set "C-c h" globally, because we</span>\u000a<span style="color: #b22222;">;; </span><span style="color: #b22222;">cannot change `</span><span style="color: #008b8b;">helm-command-prefix-key</span><span style="color: #b22222;">' once `</span><span style="color: #008b8b;">helm-config</span><span style="color: #b22222;">' is loaded.</span>\u000a<span style="color: #707183;">(</span>global-set-key <span style="color: #7388d6;">(</span>kbd <span style="color: #8b2252;">"C-c h"</span><span style="color: #7388d6;">)</span> 'helm-command-prefix<span style="color: #707183;">)</span>\u000a<span style="color: #707183;">(</span>global-unset-key <span style="color: #7388d6;">(</span>kbd <span style="color: #8b2252;">"C-x c"</span><span style="color: #7388d6;">)</span><span style="color: #707183;">)</span>\u000a\u000a<span style="color: #707183;">(</span>define-key helm-map <span style="color: #7388d6;">(</span>kbd <span style="color: #8b2252;">"&lt;tab&gt;"</span><span style="color: #7388d6;">)</span> 'helm-execute-persistent-action<span style="color: #707183;">)</span> <span style="color: #b22222;">; </span><span style="color: #b22222;">rebind tab to run persistent action</span>\u000a<span style="color: #707183;">(</span>define-key helm-map <span style="color: #7388d6;">(</span>kbd <span style="color: #8b2252;">"C-i"</span><span style="color: #7388d6;">)</span> 'helm-execute-persistent-action<span style="color: #707183;">)</span> <span style="color: #b22222;">; </span><span style="color: #b22222;">make TAB work in terminal</span>\u000a<span style="color: #707183;">(</span>define-key helm-map <span style="color: #7388d6;">(</span>kbd <span style="color: #8b2252;">"C-z"</span><span style="color: #7388d6;">)</span>  'helm-select-action<span style="color: #707183;">)</span> <span style="color: #b22222;">; </span><span style="color: #b22222;">list actions using C-z</span>\u000a\u000a<span style="color: #707183;">(</span><span style="color: #a020f0;">when</span> <span style="color: #7388d6;">(</span>executable-find <span style="color: #8b2252;">"curl"</span><span style="color: #7388d6;">)</span>\u000a  <span style="color: #7388d6;">(</span><span style="color: #a020f0;">setq</span> helm-google-suggest-use-curl-p t<span style="color: #7388d6;">)</span><span style="color: #707183;">)</span>\u000a\u000a<span style="color: #707183;">(</span><span style="color: #a020f0;">setq</span> helm-split-window-in-side-p           t <span style="color: #b22222;">; </span><span style="color: #b22222;">open helm buffer inside current window, not occupy whole other window</span>\u000a      helm-move-to-line-cycle-in-source     t <span style="color: #b22222;">; </span><span style="color: #b22222;">move to end or beginning of source when reaching top or bottom of source.</span>\u000a      helm-ff-search-library-in-sexp        t <span style="color: #b22222;">; </span><span style="color: #b22222;">search for library in `</span><span style="color: #008b8b;">require</span><span style="color: #b22222;">' and `</span><span style="color: #008b8b;">declare-function</span><span style="color: #b22222;">' sexp.</span>\u000a      helm-scroll-amount                    <span style="color: #008b8b;">8</span> <span style="color: #b22222;">; </span><span style="color: #b22222;">scroll 8 lines other window using M-&lt;next&gt;/M-&lt;prior&gt;</span>\u000a      helm-ff-file-name-history-use-recentf t\u000a      helm-echo-input-in-header-line t<span style="color: #707183;">)</span>\u000a\u000a<span style="color: #707183;">(</span><span style="color: #a020f0;">defun</span> <span style="color: #0000ff;">spacemacs//helm-hide-minibuffer-maybe</span> <span style="color: #7388d6;">()</span>\u000a  <span style="color: #8b2252;">"Hide minibuffer in Helm session if we use the header line as input field."</span>\u000a  <span style="color: #7388d6;">(</span><span style="color: #a020f0;">when</span> <span style="color: #909183;">(</span><span style="color: #a020f0;">with-helm-buffer</span> helm-echo-input-in-header-line<span style="color: #909183;">)</span>\u000a    <span style="color: #909183;">(</span><span style="color: #a020f0;">let</span> <span style="color: #709870;">(</span><span style="color: #907373;">(</span>ov <span style="color: #6276ba;">(</span>make-overlay <span style="color: #858580;">(</span>point-min<span style="color: #858580;">)</span> <span style="color: #858580;">(</span>point-max<span style="color: #858580;">)</span> nil nil t<span style="color: #6276ba;">)</span><span style="color: #907373;">)</span><span style="color: #709870;">)</span>\u000a      <span style="color: #709870;">(</span>overlay-put ov 'window <span style="color: #907373;">(</span>selected-window<span style="color: #907373;">)</span><span style="color: #709870;">)</span>\u000a      <span style="color: #709870;">(</span>overlay-put ov 'face\u000a                   <span style="color: #907373;">(</span><span style="color: #a020f0;">let</span> <span style="color: #6276ba;">(</span><span style="color: #858580;">(</span>bg-color <span style="color: #80a880;">(</span>face-background 'default nil<span style="color: #80a880;">)</span><span style="color: #858580;">)</span><span style="color: #6276ba;">)</span>\u000a                     `<span style="color: #6276ba;">(</span><span style="color: #483d8b;">:background</span> ,bg-color <span style="color: #483d8b;">:foreground</span> ,bg-color<span style="color: #6276ba;">)</span><span style="color: #907373;">)</span><span style="color: #709870;">)</span>\u000a      <span style="color: #709870;">(</span><span style="color: #a020f0;">setq-local</span> cursor-type nil<span style="color: #709870;">)</span><span style="color: #909183;">)</span><span style="color: #7388d6;">)</span><span style="color: #707183;">)</span>\u000a\u000a\u000a<span style="color: #707183;">(</span>add-hook 'helm-minibuffer-set-up-hook\u000a          'spacemacs//helm-hide-minibuffer-maybe<span style="color: #707183;">)</span>\u000a\u000a<span style="color: #707183;">(</span><span style="color: #a020f0;">setq</span> helm-autoresize-max-height <span style="color: #008b8b;">0</span><span style="color: #707183;">)</span>\u000a<span style="color: #707183;">(</span><span style="color: #a020f0;">setq</span> helm-autoresize-min-height <span style="color: #008b8b;">20</span><span style="color: #707183;">)</span>\u000a<span style="color: #707183;">(</span>helm-autoresize-mode <span style="color: #008b8b;">1</span><span style="color: #707183;">)</span>\u000a\u000a<span style="color: #707183;">(</span>helm-mode <span style="color: #008b8b;">1</span><span style="color: #707183;">)</span>\u000a</pre>\u000a</div>\u000a\u000a<div id="outline-container-orgheadline1" class="outline-2">\u000a<h2 id="orgheadline1"><a id="ID-07fe976f-bf1e-4c16-afb3-b108059921b1"></a>Usage:</h2>\u000a<div class="outline-text-2" id="text-orgheadline1">\u000a<p>\u000aAfter using Helm, you are going to have a big change in the way you\u000ause Emacs. After you get used to the Helm way, you won't want to leave\u000ait. However, if you don't like Helm, you can still use Ido, which is\u000aintroduced in a later section. Let's learn how to use helm by playing with\u000ait.\u000a</p>\u000a\u000a<p>\u000aCompletion with Helm is very different from the usual Emacs\u000acompletion:\u000a</p>\u000a\u000a<ul class="org-ul">\u000a<li>You type something.</li>\u000a\u000a<li>Instead of <b>TAB</b> to expand the common part until you find your\u000acandidates, in Helm, you type parts of the candidate you want to\u000asearch for, separated by spaces. In Helm, these strings are called\u000a<b>patterns</b>. Patterns can also be regexps.</li>\u000a\u000a<li>Helm will try to search and sort according to highest match, from\u000atop to bottom. The best match is at the top, so you can press <b>RET</b>\u000aand select it.</li>\u000a\u000a<li>You can navigate the buffer with <b>C-n</b> and <b>C-p</b> or <b>&lt;up&gt;</b> and\u000a<b>&lt;down&gt;</b> to move up/down, <b>C-v</b> and <b>M-v</b> to move to next/previous\u000apages, and <b>M-&lt;</b> and <b>M-&gt;</b> to move to the top and bottom of the Helm\u000abuffer.</li>\u000a\u000a<li>You can mark candidates with <b>C-SPC</b>; this is useful when you need\u000ato perform an action on many candidates of your choice. <b>M-a</b> to\u000aselect all.</li>\u000a\u000a<li>You can insert marked candidates into the current buffer with <b>C-c\u000aC-i</b>. This is useful when you have narrowed to a list of candidates,\u000ai.e. files, and then you want to save such candidates.</li>\u000a\u000a<li>If you find the current horizontal Helm window is small, you can\u000aalways switch it to a vertical window with <b>C-t</b>. Running <b>C-t</b> again\u000areturns the Helm window back to horizontal and so on.</li>\u000a</ul>\u000a\u000a<p>\u000aYou can practice the above commands with <b>C-x b</b>, which runs\u000a<code>helm-mini</code>. If you mark more than one buffer, <b>RET</b> opens the\u000aselected buffers.\u000a</p>\u000a\u000a<p>\u000a<b><span class="underline">IMPORTANT</span></b>: <i>Please remember that, when you use Helm, you never <b>TAB</b></i>\u000a<i>to complete prefixes like vanilla or other packages like Ido and its</i>\u000a<i>related packages. In Helm, when you type something, candidates get</i>\u000a<i>updated <b>automatically</b>. In vanilla Emacs, you have to <b>TAB</b> to get a</i>\u000a<i>list of candidates. This is a great feature from Helm, not a lack of a</i>\u000a<i>feature. You have to forget the habit of <b>TAB</b>'ing to get</i>\u000a<i>candidates. If you want quick completion of search patterns in the Helm</i>\u000a<i>prompt, you always have <code>hippie-expand</code> to replace the <b>TAB</b></i>\u000a<i>behavior, as introduced at the beginning of this section. This is</i>\u000a<i>the biggest confusion for new people switching to Helm. When you are</i>\u000a<i>used to Helm, you will love it.</i>\u000a</p>\u000a\u000a<p>\u000aWhen you execute a Helm command, you enter a Helm session. A Helm\u000asession is a dedicated state to working with Helm features; while in a\u000aHelm session, a dedicated Helm buffer is always opened. When you quit\u000aa Helm session, a Helm buffer is closed. In Helm, you basically need\u000ato remember these 3 commands:\u000a</p>\u000a\u000a<ul class="org-ul">\u000a<li>Access the action menu with <b>TAB</b>. An action is a command to run on\u000amarked candidates (one or more) and quits the current Helm session; an\u000aaction menu is a text-based menu that lists actions you can\u000atake. For example, <code>Find File</code> (open file), <code>Find File in Dired</code>,\u000a<code>Grep File</code>&#x2026;</li>\u000a\u000a<li><b>C-z</b> executes <b>helm-execute-persistent-action</b>; a persistent action\u000ais an action that you use in a Helm session that does not quit the\u000asession.</li>\u000a\u000a<li>In some Helm sessions, such as <code>helm-find-files</code> or <code>helm-mini</code>, you\u000acan select more than one candidates and execute actions on them,\u000asuch as <code>grep</code> or <code>open</code>.</li>\u000a</ul>\u000a\u000a<p>\u000aHowever, for convenience, let's <b>TAB</b> with <b>C-z</b> in the above\u000asettings, so we can use <b>TAB</b> more comfortably, because you actually\u000ause <b>helm-execute-persistent-action</b> more than\u000a<b>helm-select-action</b> by adding the code snippet below:\u000a</p>\u000a\u000a<div class="org-src-container">\u000a\u000a<pre class="src src-emacs-lisp"><span style="color: #707183;">(</span>define-key helm-map <span style="color: #7388d6;">(</span>kbd <span style="color: #8b2252;">"&lt;tab&gt;"</span><span style="color: #7388d6;">)</span> 'helm-execute-persistent-action<span style="color: #707183;">)</span> <span style="color: #b22222;">; </span><span style="color: #b22222;">rebind tab to do persistent action</span>\u000a<span style="color: #707183;">(</span>define-key helm-map <span style="color: #7388d6;">(</span>kbd <span style="color: #8b2252;">"C-i"</span><span style="color: #7388d6;">)</span> 'helm-execute-persistent-action<span style="color: #707183;">)</span> <span style="color: #b22222;">; </span><span style="color: #b22222;">make TAB works in terminal</span>\u000a<span style="color: #707183;">(</span>define-key helm-map <span style="color: #7388d6;">(</span>kbd <span style="color: #8b2252;">"C-z"</span><span style="color: #7388d6;">)</span>  'helm-select-action<span style="color: #707183;">)</span> <span style="color: #b22222;">; </span><span style="color: #b22222;">list actions using C-z</span>\u000a</pre>\u000a</div>\u000a\u000a<p>\u000aIn a Helm session, if you need help, use <b>C-c ?</b>, or refer to this\u000amanual again. The commands in the key bindings above are good enough\u000ato help you use Helm productively.\u000a</p>\u000a</div>\u000a</div>\u000a\u000a<div id="outline-container-orgheadline2" class="outline-2">\u000a<h2 id="orgheadline2"><a id="ID-260dfe60-eb43-4d20-b1c4-b51af5133a32"></a>Why is Helm powerful?</h2>\u000a<div class="outline-text-2" id="text-orgheadline2">\u000a<ul class="org-ul">\u000a<li><i><span class="underline">Simple and Consistent interface</span></i>: Every Helm session starts with\u000athe same, simple interface: a prompt for entering search patterns and\u000aa Helm buffer for displying results as the user types. Because of the\u000aconsistent and simple interface, new people use Helm with ease.</li>\u000a\u000a<li><i><span class="underline">Interactivity</span></i>: By nature, Helm is very interactive: as a user\u000atypes, results get updated immediately in the Helm buffer. Because\u000aof this feature, Helm provides a unique interactive version of many\u000acommmands that do not exist outside of Helm. For example,\u000a<code>helm-ff-run-grep</code>, which updates grep results as you type.</li>\u000a\u000a<li><i><span class="underline">Focus on finding what you want first, decide what to do with it\u000alater</span></i>: With Helm, you don't have to think about what you are going to\u000ado with a candidate until you have found it. For example, needing to\u000adecide whether you should open a file in the current window or in other\u000awindow <b>before</b> opening a file. In contrast, Helm helps you focus on\u000awhat you want to find; once you find your desired object (such as a\u000afile or directory), you <b>only then</b> decide what to do with it, such as\u000aopening the file in another window or opening the file as root. This\u000ahas the advantage that you don't have to cancel your executing command\u000aif you decide that the action you are taking is not appropriate\u000aanymore. For example, if you are executed <b>C-x C-f</b> to open a file, but\u000ahave a second thought that opening the file in another window is\u000abetter. Then you press <b>C-g</b> to cancel the command and re-execute the\u000a<b>C-x 4 C-f</b> version and have to start your navigating session all over\u000aagain!</li>\u000a\u000a<li><p>\u000a<i><span class="underline">Matching mechanism</span></i>: This is a powerful feature in Helm that I\u000ahaven't seen in other packages: out of order matching, <b>with regular\u000aexpression</b>. That's right, you can enter every search pattern as a\u000aregexp!. A really powerful concept: it enhances explanatory power\u000afor many things. One use cases is exploring a new project: using\u000aHelm, you can "learn" the project structure interactively. For\u000aexample, suppose I'm completely new to the Linux kernel source tree,\u000aand I wonder whether a file <code>main.c</code> exists for <code>x86</code>\u000aarchitecture. I know that they must have <code>x86</code> directory somewhere,\u000aand the file could contain <code>main.c</code> in it, i.e. It can be <code>main.c</code>\u000aor <code>x86-main.c</code>. These are the only pieces of information I know, so I\u000atried it in Helm Projectile (a package that makes use of Helm framework,\u000awhich does not come with stock Helm. You can read more about it <a href="http://tuhdo.github.io/helm-projectile.html">in my\u000aHelm Projectile guide</a>):\u000a</p>\u000a\u000a\u000a<div class="figure">\u000a<p><a href="static/helm_projectile.gif"><img src="static/helm_projectile.gif" alt="helm_projectile.gif" /></a>\u000a</p>\u000a</div>\u000a\u000a<p>\u000aFirst, I enter <code>main.c</code>, and I got lots of candidates. Then, I only\u000awant the <code>main.c</code> inside the x86 directory, so I type <code>x86</code>. The whole\u000apattern is <code>main.c x86</code> and Helm returns the correct candidate:\u000a<code>arch/x86/boot/main.c</code>.\u000a</p>\u000a\u000a<p>\u000aIt does exist. I also wonder where <code>i5100_edac.c</code> exists, because\u000aIntel has had a datasheet for it available for a long time, so it must be\u000aimplemented. As demonstrated in the above screencast, there was only\u000aone <code>i5100_eda.c</code>. Using the so-called "fuzzy-matching" mechanism,\u000ayou are still required to know things in advance and this severely\u000alimits the explanatory power. For example, to get to the file\u000a<code>driver/edac/i5100_edac.c</code>, you have to know the path to fuzzy\u000amatch like this: <code>dedi51</code>; <b>d</b> for matching <code>driver</code>, <b>ed</b> for matching\u000a<code>edac</code> because other directories also start with "e"; <b>i51</b> for\u000amatching <code>i5100_edac.c</code> because several files also start with "i5",\u000aor contain "1" and "0" or "edac" in it. "i51" is the only unique\u000aprefix. Using Helm, you can immediately enter the unique pattern of\u000aa candidate and ignore the common prefix to get a candidate. For\u000aexample, in the screencast above, I got <code>driver/edac/i5100_edac.c</code>\u000aimmediately just by typing "<b>i51</b>" and the file was narrowed down.\u000a</p>\u000a\u000a<p>\u000aFuzzy matching can also be less useful when working with a large source\u000atree, where many files share a common prefix.\u000a</p>\u000a\u000a<p>\u000aStarting from Helm 1.6.5, Helm includes fuzzy matching for many\u000acommands and a way for a package writer to activate fuzzy matching.\u000a</p></li>\u000a\u000a<li><i>Performance</i>: Helm can work with over 30000 candidates or more with no\u000aproblems.</li>\u000a</ul>\u000a</div>\u000a</div>\u000a\u000a<div id="outline-container-orgheadline3" class="outline-2">\u000a<h2 id="orgheadline3"><a id="ID-8de25a41-da8b-42b5-b152-e62ef75d2bfd"></a>Operate on text at point:</h2>\u000a<div class="outline-text-2" id="text-orgheadline3">\u000a<p>\u000aIf you are already in a Helm session, you can still get input from the\u000acurrent editing buffer by the following key bindings:\u000a</p>\u000a\u000a<ul class="org-ul">\u000a<li><b>C-w</b> yanks word at point, starting from point to the end of the\u000aword, into the Helm prompt (the minibuffer).</li>\u000a<li><b>M-n</b> yanks symbol at point</li>\u000a</ul>\u000a\u000a<p>\u000aIf <code>helm-mode</code> is activated, help commands also automatically\u000arecognize symbols at point if such symbols exist in Emacs, and use\u000athe Helm interface for interactive selection. For example:\u000a</p>\u000a\u000a<ul class="org-ul">\u000a<li><b>C-h f</b>, which runs <code>describe-function</code>, automatically takes the\u000asymbol at point as the default for searching function.</li>\u000a<li><b>C-h v</b>, which runs <code>describe-variable</code>, automatically takes the\u000asymbol at point as the default for searching variable.</li>\u000a<li><b>C-h w</b>, which runs <code>where-is</code>, automatically takes the\u000asymbol at point as the default for showing the key binding for a\u000acommand.</li>\u000a<li>&#x2026; and so on&#x2026; (<b>C-h C-h</b> to view all commands)</li>\u000a</ul>\u000a\u000a<p>\u000aAll of those commands automatically make use of Helm.\u000a</p>\u000a</div>\u000a</div>\u000a\u000a<div id="outline-container-orgheadline4" class="outline-2">\u000a<h2 id="orgheadline4">Autoresize</h2>\u000a<div class="outline-text-2" id="text-orgheadline4">\u000a<p>\u000aHelm can resize its buffer automatically to fit the number of\u000acandidates if you enable <code>helm-autoresize-mode</code>:\u000a</p>\u000a\u000a<div class="org-src-container">\u000a\u000a<pre class="src src-emacs-lisp"><span style="color: #707183;">(</span>helm-autoresize-mode t<span style="color: #707183;">)</span>\u000a</pre>\u000a</div>\u000a\u000a<p>\u000aYou can customize the minimum and maximum height that Helm can resize\u000awith these two variable: \u000a</p>\u000a\u000a<ul class="org-ul">\u000a<li><code>helm-autoresize-max-height</code></li>\u000a<li><code>helm-autoresize-min-height</code></li>\u000a</ul>\u000a\u000a<p>\u000aBy default, <code>helm-autoresize-max-height</code> is set to 40, meaning the Helm\u000acandidate buffer has a maximum height of 40% of the current frame\u000aheight. Similarly, <code>helm-autoresize-min-height</code> specifies a minimum\u000aheight for the Helm candidate buffer as a percentage of the current frame\u000aheight.\u000a</p>\u000a\u000a<p>\u000aIf you don't want the Helm window to be resized, you can set\u000a<code>helm-autoresize-max-height</code> equal to <code>helm-autoresize-min-height</code>.\u000a</p>\u000a\u000a<p>\u000aIf you use <a href="https://github.com/roman/golden-ratio.el">golden-ratio</a>, you have to disable its interference with the Helm window\u000a(Note: If you are using Spacemacs, you don't have to add this bit of configuration):\u000a</p>\u000a\u000a<div class="org-src-container">\u000a\u000a<pre class="src src-emacs-lisp"><span style="color: #707183;">(</span><span style="color: #a020f0;">defun</span> <span style="color: #0000ff;">pl/helm-alive-p</span> <span style="color: #7388d6;">()</span>\u000a  <span style="color: #7388d6;">(</span><span style="color: #a020f0;">if</span> <span style="color: #909183;">(</span>boundp 'helm-alive-p<span style="color: #909183;">)</span>\u000a      <span style="color: #909183;">(</span>symbol-value 'helm-alive-p<span style="color: #909183;">)</span><span style="color: #7388d6;">)</span><span style="color: #707183;">)</span>\u000a\u000a<span style="color: #707183;">(</span>add-to-list 'golden-ratio-inhibit-functions 'pl/helm-alive-p<span style="color: #707183;">)</span>\u000a</pre>\u000a</div>\u000a\u000a<p>\u000aIn DEMO 1, <code>helm-autoresize-max-height</code> is not equal to\u000a<code>helm-autoresize-min-height</code> (begins when <code>START DEMO</code> appears in\u000aminibuffer):\u000a</p>\u000a\u000a\u000a<div class="figure">\u000a<p><a href="static/part3/helm-autoresize-mode.gif"><img src="static/part3/helm-autoresize-mode.gif" alt="helm-autoresize-mode.gif" /></a>\u000a</p>\u000a</div>\u000a\u000a<p>\u000aIn DEMO 2, <code>helm-autoresize-max-height</code> is equal to\u000a<code>helm-autoresize-min-height</code> (begins when <code>START DEMO</code> appears in\u000aminibuffer):\u000a</p>\u000a\u000a\u000a<div class="figure">\u000a<p><a href="static/part3/helm-autoresize-fix.gif"><img src="static/part3/helm-autoresize-fix.gif" alt="helm-autoresize-fix.gif" /></a>\u000a</p>\u000a</div>\u000a</div>\u000a</div>\u000a\u000a<div id="outline-container-orgheadline5" class="outline-2">\u000a<h2 id="orgheadline5"><a id="ID-500a1c68-ab43-40a5-97c3-5d556a9f748d"></a>Command: <code>helm-M-x</code></h2>\u000a<div class="outline-text-2" id="text-orgheadline5">\u000a<p>\u000a<span class="underline">Key binding</span>:\u000a</p>\u000a\u000a<p>\u000aNo default key binding. We should give it one:\u000a</p>\u000a\u000a<div class="org-src-container">\u000a\u000a<pre class="src src-emacs-lisp"><span style="color: #707183;">(</span>global-set-key <span style="color: #7388d6;">(</span>kbd <span style="color: #8b2252;">"M-x"</span><span style="color: #7388d6;">)</span> 'helm-M-x<span style="color: #707183;">)</span>\u000a</pre>\u000a</div>\u000a\u000a<p>\u000a<span class="underline">Description</span>:\u000a</p>\u000a\u000a<p>\u000a<code>M-x</code> and see the difference. You will see a buffer that lists\u000acommands in Emacs. Some of you may not like it because it seems\u000aoverkill at first. However, even if you really don't like, please bear\u000awith me until the end.\u000a</p>\u000a\u000a<p>\u000aNow, type <code>li pa</code>; that's right <code>li</code> , a space and <code>pa</code>. You will see,\u000a<code>list-packages</code> is at the top. Surprise! Let's try another input. Now,\u000atype <code>pa ^li</code>, and you will receive <code>list-package</code> as the first\u000aentry.\u000a</p>\u000a\u000a<p>\u000a<code>helm-M-x</code> is also better then the default <code>M-x</code>, because it provides\u000akey bindings right next to the commands, and <b>TAB</b> provides you the\u000abuilt-in documentation of that command in another buffer.\u000a</p>\u000a\u000a<p>\u000aStarting from 1.6.5, <code>helm-M-x</code> can fuzzy match candidates, but this is\u000anot enabled by default. To enable fuzzy matching, add the following\u000asetting:\u000a</p>\u000a\u000a<div class="org-src-container">\u000a\u000a<pre class="src src-emacs-lisp"><span style="color: #707183;">(</span><span style="color: #a020f0;">setq</span> helm-M-x-fuzzy-match t<span style="color: #707183;">)</span> <span style="color: #b22222;">;; </span><span style="color: #b22222;">optional fuzzy matching for helm-M-x</span>\u000a</pre>\u000a</div>\u000a\u000a\u000a<p>\u000a<b>NOTE</b>: You have to bind <code>helm-M-x</code> to <b>M-x</b> manually. Otherwise, you\u000a still get Helm completion, but using the vanilla <b>M-x</b> that does not\u000a provides the above features like showing key bindings and <b>TAB</b> to\u000a open built-in documentation. Another important thing is, you have to\u000a pass the prefix argument <b>AFTER</b> you run <code>helm-M-x</code>, because your prefix\u000a argument will be displayed in the modeline when in <code>helm-M-x</code>\u000a buffer. Passing prefix argument <b>BEFORE</b> <code>helm-M-x</code> <b>has no effect</b>.\u000a</p>\u000a\u000a<p>\u000a<span class="underline">Demo</span>:\u000a</p>\u000a\u000a\u000a<div class="figure">\u000a<p><a href="static/part3/helm-m-x.gif"><img src="static/part3/helm-m-x.gif" alt="helm-m-x.gif" /></a>\u000a</p>\u000a</div>\u000a</div>\u000a</div>\u000a\u000a<div id="outline-container-orgheadline6" class="outline-2">\u000a<h2 id="orgheadline6"><a id="ID-77b4d145-c280-4ed4-98a7-d645fe1d18bf"></a>Command: <code>helm-show-kill-ring</code></h2>\u000a<div class="outline-text-2" id="text-orgheadline6">\u000a<p>\u000a<span class="underline">Key binding</span>:\u000a</p>\u000a\u000a<p>\u000aNo default key binding. We should give it one:\u000a</p>\u000a\u000a<div class="org-src-container">\u000a\u000a<pre class="src src-emacs-lisp"><span style="color: #707183;">(</span>global-set-key <span style="color: #7388d6;">(</span>kbd <span style="color: #8b2252;">"M-y"</span><span style="color: #7388d6;">)</span> 'helm-show-kill-ring<span style="color: #707183;">)</span>\u000a</pre>\u000a</div>\u000a\u000a<p>\u000a<span class="underline">Description</span>:\u000a</p>\u000a\u000a<p>\u000aDo you remember the binding <code>C-y</code> <a href="http://tuhdo.github.io/emacs-tutor.html#sec-7-15">cycle the kill ring</a>? However, working with\u000adefault kill ring is painful because you have a burden to remember an\u000ainvisible thing, that is the kill ring, at which position you kill\u000awhat. To view the kill ring, you have to <b>C-h v</b> and type <code>kill-ring</code>\u000ato see content of the kill ring, and it is not pretty.\u000a</p>\u000a\u000a<p>\u000a<code>helm-show-kill-ring</code> solves this problem: Helm shows the kill ring in\u000aa readable format and allows you to narrow down by entering\u000asub-strings of candidates. You are freed from the cognitive burden of\u000athe default <b>M-y</b>.\u000a</p>\u000a\u000a<p>\u000aIf you follow my Helm configuration, <code>M-y</code> binds to\u000a<code>helm-show-kill-ring</code>. Try it and see! Much easier than the default.\u000a</p>\u000a\u000a<p>\u000a<span class="underline">Demo</span>:\u000a</p>\u000a\u000a<p>\u000a<code>helm-kill-ring</code> in action (the demo starts when you see <code>START</code> in the\u000aminibuffer):\u000a</p>\u000a\u000a\u000a<div class="figure">\u000a<p><a href="static/part3/helm-kill-ring.gif"><img src="static/part3/helm-kill-ring.gif" alt="helm-kill-ring.gif" /></a>\u000a</p>\u000a</div>\u000a</div>\u000a</div>\u000a\u000a<div id="outline-container-orgheadline7" class="outline-2">\u000a<h2 id="orgheadline7"><a id="ID-0386c827-7f5d-4056-bf4d-8d0fc01fc1ab"></a>Command: <code>helm-mini</code></h2>\u000a<div class="outline-text-2" id="text-orgheadline7">\u000a<p>\u000a<span class="underline">Key binding</span>:\u000a</p>\u000a\u000a<p>\u000aNo default key binding. We should give it one:\u000a</p>\u000a\u000a<div class="org-src-container">\u000a\u000a<pre class="src src-emacs-lisp"><span style="color: #707183;">(</span>global-set-key <span style="color: #7388d6;">(</span>kbd <span style="color: #8b2252;">"C-x b"</span><span style="color: #7388d6;">)</span> 'helm-mini<span style="color: #707183;">)</span>\u000a</pre>\u000a</div>\u000a\u000a<p>\u000aTo enable fuzzy matching, add the following settings:\u000a</p>\u000a\u000a<div class="org-src-container">\u000a\u000a<pre class="src src-emacs-lisp"><span style="color: #707183;">(</span><span style="color: #a020f0;">setq</span> helm-buffers-fuzzy-matching t\u000a      helm-recentf-fuzzy-match    t<span style="color: #707183;">)</span>\u000a</pre>\u000a</div>\u000a\u000a<p>\u000a<code>helm-mini</code> is comprised of multiple sources:\u000a</p>\u000a\u000a<ul class="org-ul">\u000a<li>Current open buffers, under the header <code>Buffers</code>.</li>\u000a<li>Recently opened files, under the header <code>Recentf</code>.</li>\u000a<li>Allows you to create a new buffer by pressing <b>RET</b>, under the header\u000a<code>Create Buffer</code>.</li>\u000a</ul>\u000a\u000a<p>\u000aYou can move back and forth between the groups by using <b>&lt;left&gt;</b> and\u000a<b>&lt;right&gt;</b> arrow keys. Or you can just scroll down/up with <b>C-v</b> and\u000a<b>M-v</b>.\u000a</p>\u000a\u000a<p>\u000aYou can filter out buffers by major mode using the pattern\u000a<code>*&lt;major-mode&gt;</code>. For example, <code>*dired</code> narrows to only Dired\u000abuffers. You can also filter out buffers that belong to a major mode\u000aby adding <code>!</code> to the pattern. For example, <code>*!dired</code> select all buffers\u000athat are not in Dired mode.\u000a</p>\u000a\u000a<p>\u000aYou can also select buffers in a specific directory by using the pattern\u000a<code>/directory</code>. For example, <code>/.emacs.d/</code> narrows to buffers that are\u000aonly inside <code>.emacs.d</code>. Add <code>!</code> before the pattern for reverse\u000aversion. For example, <code>!/.emacs.d/</code> narrows to buffers not in\u000a<code>.emacs.d</code>.\u000a</p>\u000a\u000a<p>\u000aYou can even use <code>helm-mini</code> to narrow to buffers that contain a\u000aregexp in their contents, by prepending <code>@</code> to the search\u000apattern. For example, you can select buffers that only contain the\u000astring "test": <code>@test</code>. If you want to see the locations of the string\u000ain the buffers, mark all the buffer with <b>M-a</b> and <b>C-s</b> while in\u000a<code>helm-mini</code> session, to switch to <code>helm-moccur</code>. You can mark buffers\u000ato search with <b>C-SPC</b>. When you switch to <code>helm-moccur</code>, matches that\u000aare in selected buffers are displayed. You can also perform <code>occur</code>\u000aonly on the current buffer with prefix argument: <b>C-u C-s</b>; this is\u000auseful when you already marked buffers but don't want to unmark just\u000ato view only in a buffer. However, in general, you won't need <b>C-u\u000aC-s</b>.\u000a</p>\u000a\u000a<p>\u000aMeaning of colors and prefixes for buffers:\u000a</p>\u000a\u000a<ul class="org-ul">\u000a<li>Remote buffers are prefixed with '@'.</li>\u000a<li>Red =&gt; Buffer has had its file modified on disk by an external\u000aprocess.</li>\u000a<li>Indianred2 =&gt; Buffer exists but its file has been deleted.</li>\u000a<li>Orange =&gt; Buffer is modified and its file has not been saved to disk.</li>\u000a<li>Italic =&gt; A non-file buffer.</li>\u000a</ul>\u000a\u000a<p>\u000aSome Emacs themes change the colors. You should check the\u000acorresponding color in your color themes.\u000a</p>\u000a\u000a<p>\u000aExample:\u000a</p>\u000a\u000a<ul class="org-ul">\u000a<li>If I enter the pattern: <code>*lisp ^helm @moc</code>, Helm will narrow\u000adown the list by selecting only buffers that are in lisp mode, start\u000aby helm and match "moc" in their contents.</li>\u000a\u000a<li>If I want to specify more than one major-mode, separate them with\u000a<code>,</code>, e.g <code>*!lisp,!sh,!fun</code> will list all buffers but the ones in\u000alisp-mode, sh-mode and fundamental-mode.</li>\u000a\u000a<li>If I enter the pattern: <code>*lisp ^helm moc</code>. Notice there is no\u000a<code>@</code> this time helm will look for lisp mode buffers starting by\u000a"helm" and have "moc" in their name.</li>\u000a\u000a<li>If I enter the pattern: <code>*!lisp !helm</code> Helm will narrow down\u000ato buffers that are not in "lisp" mode and that do not match "helm".</li>\u000a\u000a<li><p>\u000aIf I enter the pattern: <code>/helm/ w3</code> Helm will narrow down\u000abuffers that are in any "helm" sub-directory and matching w3.\u000a</p>\u000a\u000a<p>\u000a<code>helm-mini</code> is like an interactive version of <code>ibuffer</code>.\u000a</p></li>\u000a</ul>\u000a\u000a<p>\u000a<span class="underline">Demo</span>:\u000a</p>\u000a\u000a\u000a<div class="figure">\u000a<p><a href="static/part3/helm-mini.gif"><img src="static/part3/helm-mini.gif" alt="helm-mini.gif" /></a>\u000a</p>\u000a</div>\u000a\u000a<p>\u000aThe demo starts when you see <code>Eval: START</code> in the minibuffer. Note that\u000athe demo use <code>helm-buffers-list</code>, which is almost the same as\u000a<code>helm-mini</code>. The only difference is that <code>helm-buffers-list</code> uses\u000a<code>ido-virtual-buffers</code> for listing recently used files, while\u000a<code>helm-mini</code> uses <code>recentf</code>.\u000a</p>\u000a\u000a<ul class="org-ul">\u000a<li>All the C buffers are selected using the pattern <code>*C</code>. In the demo,\u000aI also select Tcl buffers with *Tcl and then switched back to C \u000abuffers with <code>*C</code>.</li>\u000a\u000a<li>I only want to have buffers that contain only the string\u000a<code>crash</code>. To do that, I add a space, then add the pattern\u000a<code>@crash</code>. After the initial search pattern, I hand the currently\u000ahighlighted buffer over to <code>helm-moccur</code> (<code>moccur</code> with Helm interface)\u000ausing <b>C-s</b>. Candidates can be filtered gradually by adding more\u000apatterns, e.g., I added <code>memory</code> to filter down to buffers that\u000acontain the string "memory" among the buffers that contain\u000a<code>crash</code>. You can also mark multiple with <b>C-SPC</b> or mark all buffers\u000awith <b>M-a</b> to search all buffers listed in <code>helm-mini</code>.</li>\u000a\u000a<li>As you can see, as I filtered, the number of candidates\u000adecreased, as displayed in the modeline. At the end, there were 12\u000abuffers remained as the result of filtering, down from the total 253\u000abuffers.</li>\u000a</ul>\u000a\u000a<p>\u000aThe demo above is part of <a href="https://github.com/emacs-helm/helm#advanced-usage">Helm's homepage</a> now.\u000a</p>\u000a\u000a<p>\u000a<span class="underline">Similar Commands</span>:\u000a</p>\u000a\u000a<ul class="org-ul">\u000a<li><p>\u000a<code>helm-multi-files</code>: this command lists buffers and recent files and\u000afiles in current directory. However, when no match is found,\u000a<code>helm-mini</code> asks if you want to create a new buffer by highlighting\u000athe only entry, which look like this:\u000a</p>\u000a\u000a\u000a<div class="figure">\u000a<p><a href="static/helm-new-file-buffer.gif"><img src="static/helm-new-file-buffer.gif" alt="helm-new-file-buffer.gif" /></a>\u000a</p>\u000a</div>\u000a\u000a<p>\u000awhile <code>helm-multi-files</code> shows a blank buffer. However, you can\u000astart a <code>helm-locate</code> session to search the whole file system for\u000athe desired file by pressing <b>C-c p</b>. By default, <code>helm-for-files</code>\u000ais bound to <code>&lt;prefix&gt; f</code> (current prefix is <b>C-c h</b>).\u000a</p></li>\u000a\u000a<li><code>helm-buffer-list</code>: similar to <code>helm-mini</code>, but instead of listing\u000arecent files from <code>recentf</code>, it uses <code>ido-virtual-buffers</code>, which is\u000aa list of recently visited files managed by <code>ido</code>. The virtual\u000abuffers do not contain paths. Depending on your preference, you can\u000ause this command in place of <code>helm-mini</code>. To enable fuzzy matching\u000a<code>ido-virtual-buffers</code>, if you set <code>helm-buffers-fuzzy-matching</code> to\u000a<code>t</code> already, you also get fuzzy matching for <code>ido-virtual-buffers</code>.</li>\u000a</ul>\u000a</div>\u000a</div>\u000a\u000a<div id="outline-container-orgheadline8" class="outline-2">\u000a<h2 id="orgheadline8"><a id="ID-b71abd6c-cb29-4b64-a55f-29bd75937c11"></a>Command: <code>helm-find-files</code></h2>\u000a<div class="outline-text-2" id="text-orgheadline8">\u000a<p>\u000a<span class="underline">Key binding</span>:\u000a</p>\u000a\u000a<p>\u000a<b>&lt;prefix&gt; C-x C-f</b> or <b>C-x C-f</b> (prefix is <b>C-x c</b> by default, or\u000a<b>C-c h</b> if set). This is a rather long key sequence, and\u000a*=helm-find-files= deserves a better binding:\u000a</p>\u000a\u000a<div class="org-src-container">\u000a\u000a<pre class="src src-emacs-lisp"><span style="color: #707183;">(</span>global-set-key <span style="color: #7388d6;">(</span>kbd <span style="color: #8b2252;">"C-x C-f"</span><span style="color: #7388d6;">)</span> 'helm-find-files<span style="color: #707183;">)</span>\u000a</pre>\u000a</div>\u000a\u000a<p>\u000a<span class="underline">Description</span>:\u000a</p>\u000a\u000a<p>\u000a<code>helm-find-files</code> is file navigation on steroids:\u000a</p>\u000a\u000a<ul class="org-ul">\u000a<li><code>helm-find-files</code> can fuzzy match candidates in the current\u000adirectory. e.g "fob" or "fbr" will complete "foobar".</li>\u000a\u000a<li>You can also execute a persistent action, which is bound to <b>C-z</b> (by\u000adefault) or <b>TAB</b> if you use my configuration, to narrow the current\u000ahighlighting candidate; <b>C-z</b> or <b>TAB</b> again to view the contents of the\u000abuffer. You can scroll the other buffer up/down with <b>M-&lt;next&gt;</b> and\u000a<b>M-&lt;prior&gt;</b>.</li>\u000a\u000a<li>Alternatively, you can hit <b>C-j</b> to narrow to the highlighting candidate\u000aand <b>C-j</b> again to view the content of the other buffer. <b>C-l</b> goes\u000aback.</li>\u000a\u000a<li>You can also go up one directory level with <b>C-l</b>. <b><span class="underline">NOTE</span></b>: if you\u000ause <b>C-l</b>, Helm goes up one level and places the cursor on the directory\u000ayou've just exited. If you want to go up and have the cursor on\u000athe parent directory, in Helm prompt, enter <code>../</code>.</li>\u000a\u000a<li>After you go up with <b>C-l</b>, you can go back to the exact visited\u000adirectories with <b>C-r</b>.</li>\u000a\u000a<li>To create a directory, enter a new name that does not exist in the\u000acurrent directory and append <code>/</code> at the end. After you create a\u000adirectory, Helm continues in that directory.</li>\u000a\u000a<li>To create a new file, enter a name and select the top row that has\u000athe symbol <code>[?]</code> next to it. By default, Helm always selects the\u000afirst match in the directory.</li>\u000a\u000a<li>You can invoke <code>grep</code> on the currently highlighted entry with\u000a<b>C-s</b>. <b>C-u C-s</b> performs a recursive grep.</li>\u000a\u000a<li>Enter <code>~/</code> at the end of the pattern to quickly reach home directory.</li>\u000a\u000a<li>Enter <code>/</code> at the end of the pattern to quickly reach root of your file system.</li>\u000a\u000a<li>Enter <code>./</code> at the end of the pattern to quickly reach `default-directory'\u000a(initial start of session). If you are in `default-directory' move\u000acursor on top.</li>\u000a</ul>\u000a\u000a<p>\u000aYou can perform more actions on the highlighted entry by running\u000a<code>helm-select-action</code>, which is bound to <b>TAB</b> by default and <b>C-z</b> in\u000amy configuration. The guide for each action in the action menu is\u000awritten in the guide <a href="http://tuhdo.github.io/helm-projectile.html">Exploring large projects with Projectile and Helm\u000aProjectile</a>. It is written there because you will end up using\u000a<a href="https://github.com/bbatsov/projectile">Projectile</a> (a project manage for Emacs, introduced in later section)\u000ato navigate to files much more efficiently, anywhere and anytime you\u000aneed.\u000a</p>\u000a\u000a<p>\u000a<span class="underline">Demo</span>: \u000a</p>\u000a\u000a<p>\u000aI only needed to type into the prompt a few character to get the\u000acandidate I wanted among many candidates. The demo starts when you see\u000a<code>START</code> in the minibuffer:\u000a</p>\u000a\u000a\u000a<div class="figure">\u000a<p><a href="static/part3/helm-find-files.gif"><img src="static/part3/helm-find-files.gif" alt="helm-find-files.gif" /></a>\u000a</p>\u000a</div>\u000a</div>\u000a\u000a<ul class="org-ul"><li><a id="orgheadline9"></a><a id="ID-a70d8543-d81d-42f6-bd80-f0d459ed1a8c"></a><span class="underline">Find file at point</span>:<br  /><div class="outline-text-5" id="text-orgheadline9">\u000a<p>\u000aDid you know the command <code>ffap</code>? It was introduced in part 1, but here\u000ais the demo:\u000a</p>\u000a\u000a\u000a<div class="figure">\u000a<p><a href="static/ffap.gif"><img src="static/ffap.gif" alt="ffap.gif" /></a>\u000a</p>\u000a</div>\u000a\u000a<p>\u000a<code>helm-find-files</code> can do that too: all you need to do is move your\u000apoint onto a proper filepath, and Helm will reach the correct path for\u000ayou, similar to the screenshot. Now, you no longer have to use a\u000aseparate command to open the file at point, but using the same <b>C-x\u000aC-f</b>. It's really convenient.\u000a</p>\u000a</div></li>\u000a\u000a<li><a id="orgheadline10"></a><a id="ID-e1b80059-4a23-4a65-adb7-916764b47695"></a><span class="underline">File and directory histories</span>:<br  /><div class="outline-text-5" id="text-orgheadline10">\u000a<p>\u000aWith a prefix argument, <code>helm-find-files</code> displays a\u000alist of visited directories. If one is selected at point,\u000a<code>helm-find-files</code> starts in that directory and you can navigate\u000afrom there.\u000a</p>\u000a\u000a<p>\u000aDuring a <code>helm-find-files</code> session, you can get a list of visited\u000afiles and directories with <b>C-c h</b>. From there, the default action is\u000a<b>RET</b> to open the file/directory at point, or continue with\u000a<code>helm-find-files</code> starting at that file/directory.\u000a</p>\u000a\u000a<p>\u000aYou can use <b>M-p</b> and <b>M-n</b> to move back and forth between previously\u000avisited directory.\u000a</p>\u000a</div></li></ul>\u000a</div>\u000a\u000a<div id="outline-container-orgheadline11" class="outline-2">\u000a<h2 id="orgheadline11"><a id="ID-ded88dfc-ea36-4650-856b-b7e176836f46"></a>Command: <code>helm-ff-do-grep</code>, live grep in Helm</h2>\u000a<div class="outline-text-2" id="text-orgheadline11">\u000a<p>\u000a<span class="underline">Key binding</span>: \u000a</p>\u000a\u000a<p>\u000aFrom within a <code>helm-find-files</code> session, you can invoke\u000a<code>helm-ff-run-grep</code> with <b>C-s</b> to search a file/directory on\u000ahighlighted entry in the Helm buffer. With prefix argument <b>C-u</b>,\u000arecursively greps a selected directory.\u000a</p>\u000a\u000a<p>\u000aYou can also save the result into a Grep buffer using the action\u000a<code>Save results in Grep buffer</code>. Note that this Grep buffer is created\u000aby Helm, not the default Emacs grep buffer. It has minimal key\u000abindings. In <code>*hgrep*</code> buffer, press <b>C-h m</b> to view all key\u000abindings.\u000a</p>\u000a\u000a<p>\u000a<span class="underline">Description</span>:\u000a</p>\u000a\u000a<p>\u000aEvery time you type a character, <code>helm</code> updates <code>grep</code> result\u000aimmediately. You can use <code>ack-grep</code> to replace <code>grep</code> with this\u000aconfiguration:\u000a</p>\u000a\u000a<div class="org-src-container">\u000a\u000a<pre class="src src-emacs-lisp"><span style="color: #707183;">(</span><span style="color: #a020f0;">when</span> <span style="color: #7388d6;">(</span>executable-find <span style="color: #8b2252;">"ack-grep"</span><span style="color: #7388d6;">)</span>\u000a  <span style="color: #7388d6;">(</span><span style="color: #a020f0;">setq</span> helm-grep-default-command <span style="color: #8b2252;">"ack-grep -Hn --no-group --no-color %e %p %f"</span>\u000a        helm-grep-default-recurse-command <span style="color: #8b2252;">"ack-grep -H --no-group --no-color %e %p %f"</span><span style="color: #7388d6;">)</span><span style="color: #707183;">)</span>\u000a</pre>\u000a</div>\u000a\u000a<p>\u000a<span class="underline">Demo</span>:\u000a</p>\u000a\u000a\u000a<div class="figure">\u000a<p><a href="static/live_grep.gif"><img src="static/live_grep.gif" alt="live_grep.gif" /></a>\u000a</p>\u000a</div>\u000a</div>\u000a</div>\u000a\u000a<div id="outline-container-orgheadline12" class="outline-2">\u000a<h2 id="orgheadline12"><a id="ID-57d8eda0-9f2d-4aaf-b85d-3bcd261c40e8"></a>Command: <code>helm-semantic-or-imenu</code></h2>\u000a<div class="outline-text-2" id="text-orgheadline12">\u000a<p>\u000a<span class="underline">Key binding</span>:\u000a</p>\u000a\u000a<p>\u000a<b>&lt;prefix&gt; i</b> (prefix is <b>C-x c</b> by default, or <b>C-c h</b> if set).\u000a</p>\u000a\u000a<p>\u000a<span class="underline">Description</span>:\u000a</p>\u000a\u000a<p>\u000aThe Imenu facility offers a way to find the major definitions,\u000asuch as function definitions or variable definitions in a file by\u000aname. You can run <code>imenu</code> command individually.\u000a</p>\u000a\u000a<p>\u000aSemantic is a package that provides language-aware editing\u000acommands based on 'source-code parsers'.  When enabled, each file\u000ayou visit is automatically parsed. Semantic provides execellent\u000asupport for C/C++. To enable Semantic mode, execute\u000a<code>(semantic-mode 1)</code>.\u000a</p>\u000a\u000a<p>\u000aHelm offers an interface to both Semantic and Imenu at the same\u000atime: If `semantic-mode' is active in the current buffer, then use\u000asemantic for generating tags, otherwise fall back to <code>imenu</code>. If\u000apoint is on a symbol, helm feeds the symbol into input prompt by\u000adefault.\u000a</p>\u000a\u000a<p>\u000a<code>helm-semantic-or-imenu</code> works with many modes like C/C++, Java,\u000aPython, Ruby, Emacs Lisp and Lisp in general, shell script,\u000aOrg-mode&#x2026;\u000a</p>\u000a\u000a<p>\u000aTo enable fuzzy matching for both <code>Semantic</code> and <code>Imenu</code> listing, add\u000athe following setting:\u000a</p>\u000a\u000a<div class="org-src-container">\u000a\u000a<pre class="src src-emacs-lisp"><span style="color: #707183;">(</span><span style="color: #a020f0;">setq</span> helm-semantic-fuzzy-match t\u000a      helm-imenu-fuzzy-match    t<span style="color: #707183;">)</span>\u000a</pre>\u000a</div>\u000a\u000a<p>\u000a<span class="underline">Usage</span>:\u000a</p>\u000a\u000a<ul class="org-ul">\u000a<li>Invoke the command (by default, <b>C-c h i</b>).</li>\u000a\u000a<li>You can use the arrow keys or <b>C-p/C-n</b> to move up and down between\u000acandidates. You can also use <b>C-&lt;down&gt;</b> and <b>C-&lt;up&gt;</b>; as you move the\u000aselection between tags inside the Helm Semantic buffer, the point moves\u000abetween tag locations as well.</li>\u000a\u000a<li>A nice feature of <code>helm-semantic-or-imenu</code> is that whenever you\u000aactivate the command, if point is inside a Semantic tag\u000a(such as a function definition), the selection is positioned at the\u000atag in the Helm buffer. This works nicely in combination with\u000a<b>C-&lt;down&gt;</b> and <b>C-&lt;up&gt;</b> to move between definitions in your buffer.</li>\u000a</ul>\u000a\u000a<p>\u000aHelm gives you finer control: you can move between functions using\u000a<code>beginning-of-defun</code> (bound to <b>C-M-a</b>) and <code>end-of-defun</code> (bound to\u000a<b>C-M-e</b>), but it will also move the point and scroll your buffer. Using\u000a<code>helm-semantic-or-imenu</code>, you have similar behavior and you have more\u000achoices: either <code>C-g</code> to return back to the position where you originally\u000ainvoked <code>helm-semantic-or-imenu</code> because you only needed to look up a\u000afunction interface (e.g., to see what kinds of parameters a function\u000aaccepts), or <code>RET</code> to jump to the tag location. Currently, only the\u000aSemantic part of <code>helm-semantic-or-imenu</code> is supported. If a buffer only\u000ahas <code>imenu</code> support from the command, you won't be able to use this\u000afeature.\u000a</p>\u000a\u000a<p>\u000a<code>helm-semantic-or-imenu</code> provides these types of Semantic tags: \u000a</p>\u000a\u000a<ul class="org-ul">\u000a<li><code>Dependencies</code>: the dependencies of the current file as defined by\u000athe current major mode. For example, <code>Dependencies</code> in C/C++ include\u000aheader files. When you execute a persistent action on a dependency,\u000athe point moves to the location of that dependency in the current\u000awindow.</li>\u000a\u000a<li><code>Variables</code>: variables defined in current buffer.</li>\u000a<li><code>Functions</code>: function defined in current buffer</li>\u000a<li><code>Provides</code>: modules that this buffer provides; for example, <code>(provide\u000a  ...)</code> expression in Emacs Lisp.</li>\u000a</ul>\u000a\u000a<p>\u000aIf you want to filter by tag type, enter caret character <code>^</code>\u000a(beginning of line in regex) and follow the first character of that\u000atype. For example, to see only function tags, type <code>^f</code> in\u000athe prompt.\u000a</p>\u000a\u000a<p>\u000a<span class="underline">Demo 1</span>:\u000a</p>\u000a\u000a<p>\u000aDEMO (begin when <code>START DEMO</code> is in minibuffer):\u000a</p>\u000a\u000a<ul class="org-ul">\u000a<li>First, I use <code>helm-semantic-or-imenu</code> to move to the function\u000ahelm-define-key-with-subkeys and move point there.</li>\u000a\u000a<li>Then, I start <code>helm-semantic-or-imenu</code> again and\u000ahelm-define-key-with-subkeys is pre-selected.</li>\u000a\u000a<li><p>\u000aThen, I move point to the variable <code>helm-map</code> and execute\u000a<code>helm-semantic-or-imenu</code> again on two function: <code>helm-next-source</code>\u000aand <code>helm-previous-source</code>. This time, instead of showing the\u000acurrent semantic tag I'm operating in (which is <code>helm-map</code>), it\u000ashows the other two tags in Helm Semantic buffer. This is because I\u000asupplied a prefix argument before running the command.\u000a</p>\u000a\u000a\u000a<div class="figure">\u000a<p><a href="static/part3/helm-semantic-or-imenu-2.gif"><img src="static/part3/helm-semantic-or-imenu-2.gif" alt="helm-semantic-or-imenu-2.gif" /></a>\u000a</p>\u000a</div></li>\u000a</ul>\u000a\u000a<p>\u000a<span class="underline">Demo 2</span>:\u000a</p>\u000a\u000a<p>\u000aHere is <code>helm-semantic-or-imenu</code> in action, please notice the\u000a"pattern: " prompt in the minibuffer:\u000a</p>\u000a\u000a<ul class="org-ul">\u000a<li>At first, I narrow to candidates that are functions with this\u000apattern in the prompt: <code>Functi</code>.</li>\u000a\u000a<li>Then, I narrow to candidates that are functions and contain\u000a<code>void</code> in them with this pattern: <code>functi void</code>, effectively\u000aselecting functions that have type <code>void</code> <b>or</b> accept <code>void</code> arguments.</li>\u000a\u000a<li>Then, I narrow to candidates that are functions and contain <code>int</code>\u000ain them with this pattern: <code>functi int</code>, effectively selecting functions\u000athat have type <code>int</code> <b>or</b> accept <code>int</code> arguments.</li>\u000a\u000a<li><p>\u000aThen, I narrow to candidates that are variables and contain <code>u16</code>\u000ain them, effectively selecting only variables that have type <code>u16</code>; the\u000asame for <code>u32</code> in the demo.\u000a</p>\u000a\u000a\u000a<div class="figure">\u000a<p><a href="static/part3/helm-semantic-or-imenu.gif"><img src="static/part3/helm-semantic-or-imenu.gif" alt="helm-semantic-or-imenu.gif" /></a>\u000a</p>\u000a</div></li>\u000a</ul>\u000a\u000a<p>\u000aPress <b>RET</b> to visit the the candidate location. The above examples are just\u000ademonstrations. You can narrow to anything you want with search\u000apatterns separated by spaces, e.g., you can use two patterns,\u000a"func" and a part of a function name, and Helm can narrow to it\u000afine.\u000a</p>\u000a\u000a<p>\u000aIn the demo, you see things like <code>class u16</code> and <code>class u32</code>; that is\u000abecause <code>u16</code> and <code>u32</code> are defined by typedef.\u000a</p>\u000a</div>\u000a</div>\u000a\u000a<div id="outline-container-orgheadline13" class="outline-2">\u000a<h2 id="orgheadline13"><a id="ID-2578b1bd-7ae9-4250-b701-c9191603404f"></a>Command: <code>helm-man-woman</code></h2>\u000a<div class="outline-text-2" id="text-orgheadline13">\u000a<p>\u000a<span class="underline">Key binding</span>:\u000a</p>\u000a\u000a<p>\u000a<b>&lt;prefix&gt; m</b> (prefix is <b>C-x c</b> by default, or <b>C-c h</b> if set).\u000a</p>\u000a\u000a<p>\u000a<span class="underline">Description</span>:\u000a</p>\u000a\u000a<p>\u000aWith <code>helm-man-woman</code>, you can quickly jump to any man entry using the\u000aHelm interface, either by typing in Helm prompt or if the point is on a\u000asymbol, opening the man page at point. To enable man page at point, add the\u000afollowing code:\u000a</p>\u000a\u000a<div class="org-src-container">\u000a\u000a<pre class="src src-emacs-lisp"><span style="color: #707183;">(</span>add-to-list 'helm-sources-using-default-as-input 'helm-source-man-pages<span style="color: #707183;">)</span>\u000a</pre>\u000a</div>\u000a\u000a<p>\u000aDemo:\u000a</p>\u000a\u000a\u000a<div class="figure">\u000a<p><img src="static/part3/helm-man-woman.gif" alt="helm-man-woman.gif" />\u000a</p>\u000a</div>\u000a</div>\u000a</div>\u000a\u000a<div id="outline-container-orgheadline14" class="outline-2">\u000a<h2 id="orgheadline14"><a id="ID-b7a95407-8629-48c4-bc9c-d0a391c95478"></a>Command: <code>helm-find</code></h2>\u000a<div class="outline-text-2" id="text-orgheadline14">\u000a<p>\u000a<span class="underline">Key binding</span>:\u000a</p>\u000a\u000a<p>\u000a<b>&lt;prefix&gt; /</b> (prefix is <b>C-x c</b> by default, or <b>C-c h</b> if set).\u000a</p>\u000a\u000a<p>\u000a<span class="underline">Description</span>:\u000a</p>\u000a\u000a<p>\u000aNormally, you use <code>find</code> command with arguments in terminal, then\u000apress <b>RET</b> and wait for a big list of result, and if the result is not\u000aas expected, repeat the whole thing. You can shorten this process by\u000ainteractively get results from Unix <code>find</code> for every character you\u000aenter into Helm prompt.\u000a</p>\u000a\u000a<p>\u000aYou can separate search patterns by spaces. However, since Helm is\u000ausing Unix <code>find</code> utility, you have to enter search patterns according\u000ato the search string of <code>find</code>; use <code>helm-man-woman</code> to read the <code>find</code>\u000aman page.\u000a</p>\u000a\u000a<p>\u000aBy default, invoking <code>helm-find</code> only searches current directory. With\u000aprefix argument <code>C-u</code> (i.e. <code>C-u C-c h /</code>), a prompt asks for a\u000adirectory to find. <code>helm-find</code> can be invoked within <code>helm-find-files</code>\u000asession, by using <b>C-c /</b>. To open more than one file, mark individual\u000acandidates with <b>C-SPC</b> or mark all with <b>M-a</b>, then <b>RET</b>. You can\u000aswitch to <code>helm-find-files</code> with <b>C-x C-f</b>.\u000a</p>\u000a\u000a<p>\u000aIf you use <code>helm-find</code> on a large directory and feel live updating is too\u000asluggish, you can always suspend the live updating with <b>C-!</b> and\u000aresume the live updating with <b>C-!</b> later.\u000a</p>\u000a\u000a<p>\u000a<span class="underline">Demo</span>:\u000a</p>\u000a\u000a\u000a<div class="figure">\u000a<p><a href="static/part3/helm-find.gif"><img src="static/part3/helm-find.gif" alt="helm-find.gif" /></a>\u000a</p>\u000a</div>\u000a</div>\u000a</div>\u000a\u000a<div id="outline-container-orgheadline15" class="outline-2">\u000a<h2 id="orgheadline15"><a id="ID-0e8e485d-c539-4175-9c81-9c8f9f17f608"></a>Command: <code>helm-locate</code></h2>\u000a<div class="outline-text-2" id="text-orgheadline15">\u000a<p>\u000a<span class="underline">Key binding</span>:\u000a</p>\u000a\u000a<p>\u000a<b>&lt;prefix&gt; l</b> (prefix is <b>C-x c</b> by default, or <b>C-c h</b> if set).\u000a</p>\u000a\u000a<p>\u000a<span class="underline">Description</span>:\u000a</p>\u000a\u000a<p>\u000aSimilar to <code>helm-find</code>, but uses the <code>locate</code> command and accepts search\u000apatterns according to <code>locate</code> input. Use <code>helm-man-woman</code> to read\u000a<code>locate</code> man page. In Mac OS, <code>mdfind</code> is used instead. On Windows,\u000ayou need to install <a href="http://www.voidtools.com/">Everything search engine</a>; once you installed\u000aEverything and expose <code>es.exe</code> to Emacs via the PATH environment\u000avariable, <code>helm-locate</code> will use <code>Everything</code> and work out of the box\u000awithout any configuration.\u000a</p>\u000a\u000a<p>\u000aTo use a local database, execute <code>helm-locate</code> with prefix argument\u000a<code>C-u</code>.\u000a</p>\u000a\u000a<p>\u000aIf you use <code>helm-locate</code> on a large hard drive and feel live updating is\u000atoo sluggish, you can always suspend the live updating with <b>C-!</b> and\u000aresume the live updating with <b>C-!</b> later.\u000a</p>\u000a\u000a<p>\u000aTo enable fuzzy matching in <code>helm-locate</code>, add this setting:\u000a</p>\u000a\u000a<div class="org-src-container">\u000a\u000a<pre class="src src-emacs-lisp"><span style="color: #707183;">(</span><span style="color: #a020f0;">setq</span> helm-locate-fuzzy-match t<span style="color: #707183;">)</span>\u000a</pre>\u000a</div>\u000a\u000a<p>\u000aNote that it is currently working with <code>locate</code> command in Linux. If\u000ayou are on other platform, don't set it or you won't have any result.\u000a</p>\u000a\u000a<p>\u000a<span class="underline">Demo</span>:\u000a</p>\u000a\u000a\u000a<div class="figure">\u000a<p><a href="static/part3/helm-locate.gif"><img src="static/part3/helm-locate.gif" alt="helm-locate.gif" /></a>\u000a</p>\u000a</div>\u000a</div>\u000a</div>\u000a\u000a<div id="outline-container-orgheadline16" class="outline-2">\u000a<h2 id="orgheadline16"><a id="ID-5fe9a6c3-5af2-4b4a-94ff-5849560c831f"></a>Command: <code>helm-occur</code></h2>\u000a<div class="outline-text-2" id="text-orgheadline16">\u000a<p>\u000a<span class="underline">Key binding</span>:\u000a</p>\u000a\u000a<p>\u000a<b>&lt;prefix&gt; M-s o</b> (prefix is <b>C-x c</b> by default, or <b>C-c h</b> if\u000aset). Since this is a rather long binding, we should bind a more\u000aconvenient key sequence:\u000a</p>\u000a\u000a<div class="org-src-container">\u000a\u000a<pre class="src src-emacs-lisp"><span style="color: #707183;">(</span>global-set-key <span style="color: #7388d6;">(</span>kbd <span style="color: #8b2252;">"C-c h o"</span><span style="color: #7388d6;">)</span> 'helm-occur<span style="color: #707183;">)</span>\u000a</pre>\u000a</div>\u000a\u000a<p>\u000a<span class="underline">Description</span>:\u000a</p>\u000a\u000a<p>\u000aSimilar to <code>occur</code>, but using Helm interface. As you type, matching\u000alines are updated immediately. This is convenient when you want to\u000ahave a list of matches in the current buffer to jump back and\u000aforth. <b>TAB</b> to temporarily move the point to the location of the currently\u000ahighlighted match. <b>C-g</b> cancels the current Helm session and returns to\u000athe original location where <code>helm-occur</code> was invoked. <b>RET</b> on a match\u000ajumps to that match.\u000a</p>\u000a\u000a<p>\u000a<span class="underline">Demo</span>:\u000a</p>\u000a\u000a<p>\u000aYou can see that candidates keep getting updated when I\u000atype. The demo starts when you see <code>START</code> in the minibuffer.\u000a</p>\u000a\u000a\u000a<div class="figure">\u000a<p><a href="static/part3/helm-occur.gif"><img src="static/part3/helm-occur.gif" alt="helm-occur.gif" /></a>\u000a</p>\u000a</div>\u000a</div>\u000a</div>\u000a\u000a<div id="outline-container-orgheadline17" class="outline-2">\u000a<h2 id="orgheadline17"><a id="ID-479cdaab-0aba-48b8-b4d2-b026d23eb41a"></a>Command: <code>helm-apropos</code></h2>\u000a<div class="outline-text-2" id="text-orgheadline17">\u000a<p>\u000a<span class="underline">Key binding</span>:\u000a</p>\u000a\u000a<p>\u000a<b>&lt;prefix&gt; a</b> (prefix is <b>C-x c</b> by default, or <b>C-c h</b> if set).\u000a</p>\u000a\u000a<p>\u000a<span class="underline">Description</span>:\u000a</p>\u000a\u000a<p>\u000aPre-configured helm to describe commands, functions, variables and\u000afaces - all in one command!. It is similar to <b>C-h a</b> which runs\u000a<code>apropos-command</code>, but interactive includes more than just commands.\u000a<code>helm-apropos</code> combines 5 sources:\u000a</p>\u000a\u000a<ul class="org-ul">\u000a<li><b>Commands</b>: Lists all available commands.</li>\u000a<li><b>Fucntion</b>: Lists all available functions.</li>\u000a<li><b>Classes</b>: Lists all classes created by <code>defclass</code>. See <a href="https://www.gnu.org/software/emacs/manual/html_node/eieio/Building-Classes.html">Building\u000aClasses</a>.</li>\u000a<li><b>Generic Functions</b>: Lists all functions created by <code>defmethod</code>. See\u000a<a href="https://www.gnu.org/software/emacs/manual/html_node/eieio/Writing-Methods.html#Writing-Methods">Writing Methods</a></li>\u000a<li><b>Variables</b>: Lists all available variables.</li>\u000a<li><b>Faces</b>: Lists all available faces.</li>\u000a<li><b>Helm attributes</b>: Lists all attributes that you can use to build a\u000aHelm source. Useful if you want to write extension with Helm.</li>\u000a</ul>\u000a\u000a<p>\u000aTo enable fuzzy matching, add this setting:\u000a</p>\u000a\u000a<div class="org-src-container">\u000a\u000a<pre class="src src-emacs-lisp"><span style="color: #707183;">(</span><span style="color: #a020f0;">setq</span> helm-apropos-fuzzy-match t<span style="color: #707183;">)</span>\u000a</pre>\u000a</div>\u000a</div>\u000a</div>\u000a\u000a<div id="outline-container-orgheadline18" class="outline-2">\u000a<h2 id="orgheadline18"><a id="ID-93e5fcb9-231b-43b8-81df-501a59bca2b6"></a>Command: <code>helm-info-*</code></h2>\u000a<div class="outline-text-2" id="text-orgheadline18">\u000a<p>\u000a<span class="underline">Key binding</span>:\u000a</p>\u000a\u000a<p>\u000a<b>&lt;prefix&gt; h &lt;key&gt;</b> (prefix is <b>C-x c</b> by default, or <b>C-c h</b> if\u000aset); <b>&lt;key&gt;</b>, by default, is one of <b>g</b>, <b>i</b> or <b>r</b>:\u000a</p>\u000a\u000a<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">\u000a\u000a\u000a<colgroup>\u000a<col  class="org-left" />\u000a\u000a<col  class="org-left" />\u000a</colgroup>\u000a<thead>\u000a<tr>\u000a<th scope="col" class="org-left">Key</th>\u000a<th scope="col" class="org-left">Binding</th>\u000a</tr>\u000a</thead>\u000a<tbody>\u000a<tr>\u000a<td class="org-left"><b>&lt;prefix&gt; h g</b></td>\u000a<td class="org-left">Command: <code>helm-info-gnus</code></td>\u000a</tr>\u000a\u000a<tr>\u000a<td class="org-left"><b>&lt;prefix&gt; h i</b></td>\u000a<td class="org-left">Command: <code>helm-info-at-point</code></td>\u000a</tr>\u000a\u000a<tr>\u000a<td class="org-left"><b>&lt;prefix&gt; h r</b></td>\u000a<td class="org-left">Command: <code>helm-info-emacs</code></td>\u000a</tr>\u000a</tbody>\u000a</table>\u000a\u000a<p>\u000a<span class="underline">Description</span>:\u000a</p>\u000a\u000a<p>\u000aThe prefix for info commands is <code>&lt;prefix&gt; h</code>. You can think of <code>h</code>\u000aas stands for <b>help</b> and <b>&lt;key&gt;</b> is one of the info topic to make it\u000aeasier to remember.\u000a</p>\u000a\u000a<p>\u000a<code>helm</code> offers a wide ranges of info commands for various topics. <code>M-x\u000ahelm info</code> to see these commands, i.e. <code>helm-info-as</code>,\u000a<code>helm-info-gdb</code>&#x2026; You can search for info nodes easily with the Helm\u000ainterface and press <b>TAB</b> on an entry to view. <b>M-&lt;next&gt;</b> moves to the next\u000apage, and <b>M-&lt;prior&gt;</b> moves to the previous page in the other buffer.\u000a</p>\u000a\u000a<p>\u000aYou can have more <code>helm-info-</code> commands, such as:\u000a</p>\u000a\u000a<ul class="org-ul">\u000a<li><code>helm-info-gdb</code>.</li>\u000a<li><code>helm-info-find</code>.</li>\u000a<li><code>helm-info-elisp</code>.</li>\u000a</ul>\u000a<p>\u000a&#x2026;.\u000a</p>\u000a\u000a<p>\u000aUse <code>M-x helm-info</code> to see the list of <code>helm-info-</code> commands using the\u000adefault info prefix: <code>&lt;prefix&gt; h</code> or key bindings of your choice.\u000a</p>\u000a</div>\u000a</div>\u000a\u000a<div id="outline-container-orgheadline19" class="outline-2">\u000a<h2 id="orgheadline19">Command: <code>helm-lisp-completion-at-point</code></h2>\u000a<div class="outline-text-2" id="text-orgheadline19">\u000a<p>\u000a<span class="underline">Key binding</span>:\u000a</p>\u000a\u000a<p>\u000a<b>&lt;prefix&gt; &lt;tab&gt;</b> (prefix is <b>C-x c</b> by default, or <b>C-c h</b> if set).\u000a</p>\u000a\u000a<p>\u000a<span class="underline">Description</span>:\u000a</p>\u000a\u000a<p>\u000aIf you work with Emacs Lisp, this command provides a list of available\u000aloaded functions in Emacs. To get a list of completions, you first\u000ahave to write a prefix, even just one character. Then execute the\u000acommand and get a list of completion candidates. To enable fuzzy\u000amatching, add this setting:\u000a</p>\u000a\u000a<div class="org-src-container">\u000a\u000a<pre class="src src-emacs-lisp"><span style="color: #707183;">(</span><span style="color: #a020f0;">setq</span> helm-lisp-fuzzy-completion t<span style="color: #707183;">)</span>\u000a</pre>\u000a</div>\u000a</div>\u000a</div>\u000a\u000a<div id="outline-container-orgheadline20" class="outline-2">\u000a<h2 id="orgheadline20"><a id="ID-9d698347-33ee-447d-9fd1-eb01e9770dbb"></a>Command: <code>helm-resume</code></h2>\u000a<div class="outline-text-2" id="text-orgheadline20">\u000a<p>\u000a<span class="underline">Key binding</span>:\u000a</p>\u000a\u000a<p>\u000a<b>&lt;prefix&gt; b</b> (prefix is <b>C-x c</b> by default, or <b>C-c h</b> if set).\u000a</p>\u000a\u000a<p>\u000a<span class="underline">Description</span>:\u000a</p>\u000a\u000a<p>\u000aThis command allows you to resume the previous Helm session, along\u000awith your previous patterns in the prompt. For example, if your\u000alast helm session was <code>helm-ff-run-grep</code> and you entered patterns in\u000aHelm prompt, <code>helm-resume</code> resumes that session along with your\u000aprevious input.\u000a</p>\u000a\u000a<p>\u000aWith prefix argument, <code>helm-resume</code> allows you to choose among all\u000aexisting Helm buffers. <code>helm-mini</code> or <code>helm-buffer-list</code> does not\u000ashow existing Helm buffers; they ignore it by default; but if you\u000arun <code>ibuffer</code>, you will see a list of Helm buffers visible\u000athere. Don't kill them or you won't be able to resume.\u000a</p>\u000a\u000a<p>\u000aThis is really convenient when you have complex input ,and\u000apreparation steps. For example, if you have multiple regexp\u000apatterns in your previous Helm session, then you don't have to\u000atype it again. Or in your previous Helm session, you have to\u000atravel to a deep directory, and <code>helm-resume</code> helps you to reuse\u000ayour previous session without going through all the troubles\u000aagain.\u000a</p>\u000a</div>\u000a</div>\u000a\u000a<div id="outline-container-orgheadline21" class="outline-2">\u000a<h2 id="orgheadline21"><a id="ID-12d8e9d0-1a43-434f-8398-6bb5deb729df"></a>Command: <code>helm-all-mark-rings</code></h2>\u000a<div class="outline-text-2" id="text-orgheadline21">\u000a<p>\u000a<span class="underline">Key binding</span>:\u000a</p>\u000a\u000a<p>\u000a<b>&lt;prefix&gt; C-c SPC</b> (prefix is <b>C-x c</b> by default, or <b>C-c h</b> if\u000aset). This is a rather long key sequence, this command deserves a\u000abetter binding, for example:\u000a</p>\u000a\u000a<div class="org-src-container">\u000a\u000a<pre class="src src-emacs-lisp"><span style="color: #707183;">(</span>global-set-key <span style="color: #7388d6;">(</span>kbd <span style="color: #8b2252;">"C-h SPC"</span><span style="color: #7388d6;">)</span> 'helm-all-mark-rings<span style="color: #707183;">)</span>\u000a</pre>\u000a</div>\u000a\u000a<p>\u000a<span class="underline">Description</span>:\u000a</p>\u000a\u000a<p>\u000aOne handy command. It allows you to view the content of the both the\u000alocal and global mark rings in a friendly interface, so you can always\u000ajump back to where you were. Without this command, if you want to view\u000athe mark rings, you have to run <b>M-:</b> and enter <code>mark-ring</code> or\u000a<code>global-mark-ring</code> to view  their contents. And even so, Emacs only\u000adisplays the bare content of the <code>mark-ring</code> and <code>global-mark-ring</code>\u000alists, which is the line number and its buffer like this:\u000a</p>\u000a\u000a<p>\u000a<code>(#&lt;marker at 23614 in helm.org&gt; #&lt;marker at 2343 in setup-helm.el&gt; #&lt;marker at 4280 in helm.org&gt; #&lt;marker in no buffer&gt; #&lt;marker at 1271 in helm.org&gt; #&lt;marker at 643 in emacs-tutor.org&gt; #&lt;marker in no buffer&gt; #&lt;marker at 1 in setup-applications.el&gt; #&lt;marker at 1 in emacs-tutor3.org&gt;)</code>\u000a</p>\u000a\u000a<p>\u000aWith <code>helm-all-mark-rings</code>, you have this nice interface with line\u000acontent and syntax highlighting:\u000a</p>\u000a\u000a\u000a<div class="figure">\u000a<p><a href="static/part3/helm-all-mark-rings.gif"><img src="static/part3/helm-all-mark-rings.gif" alt="helm-all-mark-rings.gif" /></a>\u000a</p>\u000a</div>\u000a</div>\u000a</div>\u000a\u000a<div id="outline-container-orgheadline22" class="outline-2">\u000a<h2 id="orgheadline22"><a id="ID-2990875c-646a-4109-b8b4-1f8ea951e78d"></a>Command: <code>helm-regexp</code></h2>\u000a<div class="outline-text-2" id="text-orgheadline22">\u000a<p>\u000a<span class="underline">Key binding</span>:\u000a<b>&lt;prefix&gt; r</b> (prefix is <b>C-x c</b> by default, or <b>C-c h</b> if set).\u000a</p>\u000a\u000a<p>\u000a<span class="underline">Description</span>:\u000a</p>\u000a\u000a<p>\u000aPre-configured helm to build regexps. This commands is useful when you\u000awant to test out a regexp interactively. The following actions are\u000aavailable with <b>C-z</b>:\u000a</p>\u000a\u000a<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">\u000a\u000a\u000a<colgroup>\u000a<col  class="org-left" />\u000a\u000a<col  class="org-left" />\u000a</colgroup>\u000a<thead>\u000a<tr>\u000a<th scope="col" class="org-left">Key</th>\u000a<th scope="col" class="org-left">Action</th>\u000a</tr>\u000a</thead>\u000a<tbody>\u000a<tr>\u000a<td class="org-left"><b>[f1]</b></td>\u000a<td class="org-left"><code>Kill regexp as sexp</code></td>\u000a</tr>\u000a\u000a<tr>\u000a<td class="org-left">&#xa0;</td>\u000a<td class="org-left">Saves the regexp as a string in <code>kill-ring</code></td>\u000a</tr>\u000a</tbody>\u000a<tbody>\u000a<tr>\u000a<td class="org-left"><b>[f2]</b></td>\u000a<td class="org-left"><code>Query Replace Regexp</code></td>\u000a</tr>\u000a\u000a<tr>\u000a<td class="org-left">&#xa0;</td>\u000a<td class="org-left">Invoke <code>query-replace</code> with current regexp to be replaced</td>\u000a</tr>\u000a</tbody>\u000a<tbody>\u000a<tr>\u000a<td class="org-left"><b>[f3]</b></td>\u000a<td class="org-left"><code>Kill regexp</code></td>\u000a</tr>\u000a\u000a<tr>\u000a<td class="org-left">&#xa0;</td>\u000a<td class="org-left">Saves the regexp as is in the current Helm prompt</td>\u000a</tr>\u000a</tbody>\u000a</table>\u000a\u000a<p>\u000a<span class="underline">Demo</span>:\u000a</p>\u000a\u000a\u000a<div class="figure">\u000a<p><a href="static/part3/helm-regexp.gif"><img src="static/part3/helm-regexp.gif" alt="helm-regexp.gif" /></a>\u000a</p>\u000a</div>\u000a</div>\u000a</div>\u000a\u000a<div id="outline-container-orgheadline23" class="outline-2">\u000a<h2 id="orgheadline23"><a id="ID-eba2ce38-e084-4338-8209-cd1c3a8e26b9"></a>Command: <code>helm-register</code></h2>\u000a<div class="outline-text-2" id="text-orgheadline23">\u000a<p>\u000a<span class="underline">Key binding</span>:\u000a</p>\u000a\u000a<p>\u000a<b>&lt;prefix&gt; C-x r i</b> (prefix is <b>C-x c</b> by default, or <b>C-c\u000ah</b> if set). Let's bind it to something else:\u000a</p>\u000a\u000a<div class="org-src-container">\u000a\u000a<pre class="src src-emacs-lisp"><span style="color: #707183;">(</span>global-set-key <span style="color: #7388d6;">(</span>kbd <span style="color: #8b2252;">"C-c h x"</span><span style="color: #7388d6;">)</span> 'helm-register<span style="color: #707183;">)</span>\u000a</pre>\u000a</div>\u000a\u000a<p>\u000aPre-configured for viewing Emacs registers. By simply executing\u000a<code>helm-register</code>, you can view what is in registers. <b>RET</b> or <b>TAB</b>\u000ainserts content of selected register.\u000a</p>\u000a\u000a<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">\u000a\u000a\u000a<colgroup>\u000a<col  class="org-left" />\u000a\u000a<col  class="org-left" />\u000a</colgroup>\u000a<thead>\u000a<tr>\u000a<th scope="col" class="org-left">Key</th>\u000a<th scope="col" class="org-left">Action</th>\u000a</tr>\u000a</thead>\u000a<tbody>\u000a<tr>\u000a<td class="org-left"><b>[f1]</b></td>\u000a<td class="org-left"><code>Insert Register</code></td>\u000a</tr>\u000a\u000a<tr>\u000a<td class="org-left">&#xa0;</td>\u000a<td class="org-left">Insert register content into buffer</td>\u000a</tr>\u000a</tbody>\u000a<tbody>\u000a<tr>\u000a<td class="org-left"><b>[f2]</b></td>\u000a<td class="org-left"><code>Append Region to Register</code></td>\u000a</tr>\u000a\u000a<tr>\u000a<td class="org-left">&#xa0;</td>\u000a<td class="org-left">Append an active region to current content</td>\u000a</tr>\u000a\u000a<tr>\u000a<td class="org-left">&#xa0;</td>\u000a<td class="org-left">in selected register</td>\u000a</tr>\u000a</tbody>\u000a<tbody>\u000a<tr>\u000a<td class="org-left"><b>[f3]</b></td>\u000a<td class="org-left"><code>Prepend Region to Register</code></td>\u000a</tr>\u000a\u000a<tr>\u000a<td class="org-left">&#xa0;</td>\u000a<td class="org-left">Prepend an active region to current content</td>\u000a</tr>\u000a\u000a<tr>\u000a<td class="org-left">&#xa0;</td>\u000a<td class="org-left">in selected register</td>\u000a</tr>\u000a</tbody>\u000a</table>\u000a\u000a<p>\u000a<span class="underline">Demo</span>:\u000a</p>\u000a\u000a\u000a<div class="figure">\u000a<p><a href="static/part3/helm-registers.gif"><img src="static/part3/helm-registers.gif" alt="helm-registers.gif" /></a>\u000a</p>\u000a</div>\u000a</div>\u000a</div>\u000a\u000a<div id="outline-container-orgheadline24" class="outline-2">\u000a<h2 id="orgheadline24"><a id="ID-f8adcc89-8421-434d-a8a3-92865d1cbb2a"></a>Command: <code>helm-top</code></h2>\u000a<div class="outline-text-2" id="text-orgheadline24">\u000a<p>\u000a<span class="underline">Key binding</span>:\u000a</p>\u000a\u000a<p>\u000a<b>&lt;prefix&gt; t</b> (prefix is <b>C-x c</b> by default, or <b>C-c h</b> if set).\u000a</p>\u000a\u000a<p>\u000a<span class="underline">Description</span>:\u000a</p>\u000a\u000a<p>\u000aThis command provides a Helm interface for the <code>top</code> program. You can\u000ainteract with each process with the following actions:\u000a</p>\u000a\u000a<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">\u000a\u000a\u000a<colgroup>\u000a<col  class="org-left" />\u000a\u000a<col  class="org-left" />\u000a</colgroup>\u000a<thead>\u000a<tr>\u000a<th scope="col" class="org-left">Key</th>\u000a<th scope="col" class="org-left">Binding</th>\u000a</tr>\u000a</thead>\u000a<tbody>\u000a<tr>\u000a<td class="org-left"><b>[f1]</b></td>\u000a<td class="org-left">kill (SIGTERM)</td>\u000a</tr>\u000a</tbody>\u000a<tbody>\u000a<tr>\u000a<td class="org-left"><b>[f2]</b></td>\u000a<td class="org-left">kill (SIGKILL)</td>\u000a</tr>\u000a</tbody>\u000a<tbody>\u000a<tr>\u000a<td class="org-left"><b>[f3]</b></td>\u000a<td class="org-left">kill (SIGINT)</td>\u000a</tr>\u000a</tbody>\u000a<tbody>\u000a<tr>\u000a<td class="org-left"><b>[f4]</b></td>\u000a<td class="org-left">kill (Choose signal)</td>\u000a</tr>\u000a</tbody>\u000a</table>\u000a\u000a<p>\u000a<code>helm-top</code> specific commands:\u000a</p>\u000a\u000a<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">\u000a\u000a\u000a<colgroup>\u000a<col  class="org-left" />\u000a\u000a<col  class="org-left" />\u000a</colgroup>\u000a<thead>\u000a<tr>\u000a<th scope="col" class="org-left">Key</th>\u000a<th scope="col" class="org-left">Binding</th>\u000a</tr>\u000a</thead>\u000a<tbody>\u000a<tr>\u000a<td class="org-left"><b>C-c C-u</b></td>\u000a<td class="org-left">Refresh <code>helm-top</code></td>\u000a</tr>\u000a</tbody>\u000a<tbody>\u000a<tr>\u000a<td class="org-left"><b>M-C</b></td>\u000a<td class="org-left">Sort by <b>shell commands</b></td>\u000a</tr>\u000a</tbody>\u000a<tbody>\u000a<tr>\u000a<td class="org-left"><b>M-P</b></td>\u000a<td class="org-left">Sort by <b>CPU usage</b></td>\u000a</tr>\u000a</tbody>\u000a<tbody>\u000a<tr>\u000a<td class="org-left"><b>M-U</b></td>\u000a<td class="org-left">Sort by <b>user</b></td>\u000a</tr>\u000a</tbody>\u000a<tbody>\u000a<tr>\u000a<td class="org-left"><b>M-M</b></td>\u000a<td class="org-left">Sort by <b>memory</b></td>\u000a</tr>\u000a</tbody>\u000a</table>\u000a\u000a<p>\u000a<code>user</code> and <code>shell commands</code> are sorted alphabetically.\u000a</p>\u000a\u000a<p>\u000a<span class="underline">Demo</span>:\u000a</p>\u000a\u000a\u000a<div class="figure">\u000a<p><a href="static/part3/helm-top.gif"><img src="static/part3/helm-top.gif" alt="helm-top.gif" /></a>\u000a</p>\u000a</div>\u000a</div>\u000a</div>\u000a\u000a<div id="outline-container-orgheadline25" class="outline-2">\u000a<h2 id="orgheadline25"><a id="ID-b436e961-79a4-426e-a2a1-23d790390cb1"></a>Command: <code>helm-surfraw</code></h2>\u000a<div class="outline-text-2" id="text-orgheadline25">\u000a<p>\u000a<span class="underline">Key binding</span>:\u000a</p>\u000a\u000a<p>\u000a<b>&lt;prefix&gt; s</b> (prefix is <b>C-x c</b> by default, or <b>C-c h</b> if set).\u000a</p>\u000a\u000a<p>\u000a<span class="underline">Description</span>:\u000a</p>\u000a\u000a<p>\u000a<code>surfraw</code> provides a fast UNIX command line interface to a variety\u000aof popular WWW search engines and other artifacts of power.  It\u000areclaims google, altavista, dejanews, freshmeat, research index,\u000aslashdot&#x2026;\u000a</p>\u000a\u000a<p>\u000a<code>helm-surfraw</code> provides a Helm interface to the <code>surfraw</code> program that is\u000aeasy to use. All you have to do is enter a search term, and then Helm\u000aprovides a number of services, such as Google, Stackoverflow&#x2026; to\u000ause.\u000a</p>\u000a\u000a<p>\u000a<span class="underline">Demo</span>:\u000a</p>\u000a\u000a\u000a<div class="figure">\u000a<p><a href="static/part3/helm-surfraw.gif"><img src="static/part3/helm-surfraw.gif" alt="helm-surfraw.gif" /></a>\u000a</p>\u000a</div>\u000a</div>\u000a</div>\u000a\u000a<div id="outline-container-orgheadline26" class="outline-2">\u000a<h2 id="orgheadline26"><a id="ID-fe45a7e8-785a-456a-8a16-73c2c4e3a52b"></a>Command: <code>helm-google-suggest</code></h2>\u000a<div class="outline-text-2" id="text-orgheadline26">\u000a<p>\u000a<span class="underline">Key binding</span>: \u000a</p>\u000a\u000a<p>\u000a<b>&lt;prefix&gt; C-c g</b> (prefix is <b>C-x c</b> by default, or <b>C-c h</b> if\u000aset). Let's bind it to something else:\u000a</p>\u000a\u000a<div class="org-src-container">\u000a\u000a<pre class="src src-emacs-lisp"><span style="color: #707183;">(</span>global-set-key <span style="color: #7388d6;">(</span>kbd <span style="color: #8b2252;">"C-c h g"</span><span style="color: #7388d6;">)</span> 'helm-google-suggest<span style="color: #707183;">)</span>\u000a</pre>\u000a</div>\u000a\u000a<p>\u000a<span class="underline">Description</span>:\u000a</p>\u000a\u000a<p>\u000aThis command allows you to interactively enter search terms and get\u000aresults from Google in a Helm buffer. Then, you can open one of the\u000acandidates in other services, such as Google, Wikipedia, Youtube,\u000aImbd, Google Maps, Google News. If you are on Windows, don't type too\u000afast or, you will have an error and you have to abandon this Helm\u000asession.\u000a</p>\u000a\u000a<p>\u000a<span class="underline">Demo</span>:\u000a</p>\u000a\u000a\u000a<div class="figure">\u000a<p><a href="static/part3/helm-google-suggest.gif"><img src="static/part3/helm-google-suggest.gif" alt="helm-google-suggest.gif" /></a>\u000a</p>\u000a</div>\u000a</div>\u000a</div>\u000a\u000a<div id="outline-container-orgheadline27" class="outline-2">\u000a<h2 id="orgheadline27"><a id="ID-6e010b94-e671-40f4-9a5a-31e54ba00bdd"></a>Command: <code>helm-color</code></h2>\u000a<div class="outline-text-2" id="text-orgheadline27">\u000a<p>\u000a<span class="underline">Key binding</span>:\u000a</p>\u000a\u000a<p>\u000a<b>&lt;prefix&gt; c</b> (prefix is <b>C-x c</b> by default, or <b>C-c h</b> if set).\u000a</p>\u000a\u000a<p>\u000a<span class="underline">Description</span>:\u000a</p>\u000a\u000a<p>\u000aIf you want to quickly view and copy hexadecimal values of colors,\u000a<code>helm-color</code> provides such a feature. But, <code>helm-color</code> is beyond a\u000amere color picker. The real usage for <code>helm-color</code> is for face\u000acustomization: the command list ALL available faces, with a preview of\u000aeach face in the same row. This makes theme customization really quick\u000abecause you can quickly view a face with its color. Because of the way\u000aHelm works, you can look at a group of faces together to have a global\u000aview of whether or not the colors work well with each other.\u000a</p>\u000a\u000a<p>\u000a<code>helm-color</code> contains two groups, with actions in each:\u000a</p>\u000a\u000a<ul class="org-ul">\u000a<li>Colors:</li>\u000a</ul>\u000a\u000a<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">\u000a\u000a\u000a<colgroup>\u000a<col  class="org-left" />\u000a\u000a<col  class="org-left" />\u000a</colgroup>\u000a<thead>\u000a<tr>\u000a<th scope="col" class="org-left">Key</th>\u000a<th scope="col" class="org-left">Action</th>\u000a</tr>\u000a</thead>\u000a<tbody>\u000a<tr>\u000a<td class="org-left"><b>[f1]</b> or <b>C-c N</b></td>\u000a<td class="org-left"><code>Copy Name</code></td>\u000a</tr>\u000a\u000a<tr>\u000a<td class="org-left">&#xa0;</td>\u000a<td class="org-left">Copy color name into kill-ring</td>\u000a</tr>\u000a</tbody>\u000a<tbody>\u000a<tr>\u000a<td class="org-left"><b>[f2]</b> or <b>C-c R</b></td>\u000a<td class="org-left"><code>Copy RGB</code></td>\u000a</tr>\u000a\u000a<tr>\u000a<td class="org-left">&#xa0;</td>\u000a<td class="org-left">Copy hex value into kill-ring</td>\u000a</tr>\u000a</tbody>\u000a<tbody>\u000a<tr>\u000a<td class="org-left"><b>[f3]</b> or <b>C-c n</b></td>\u000a<td class="org-left"><code>Insert Name</code></td>\u000a</tr>\u000a\u000a<tr>\u000a<td class="org-left">&#xa0;</td>\u000a<td class="org-left">Insert color name into current buffer</td>\u000a</tr>\u000a</tbody>\u000a<tbody>\u000a<tr>\u000a<td class="org-left"><b>[f4]</b> or <b>C-c r</b></td>\u000a<td class="org-left"><code>Insert RGB</code></td>\u000a</tr>\u000a\u000a<tr>\u000a<td class="org-left">&#xa0;</td>\u000a<td class="org-left">Insert hex value  into current buffer</td>\u000a</tr>\u000a</tbody>\u000a</table>\u000a\u000a<ul class="org-ul">\u000a<li>Customize Face:</li>\u000a</ul>\u000a\u000a<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">\u000a\u000a\u000a<colgroup>\u000a<col  class="org-left" />\u000a\u000a<col  class="org-left" />\u000a</colgroup>\u000a<thead>\u000a<tr>\u000a<th scope="col" class="org-left">Key</th>\u000a<th scope="col" class="org-left">Action</th>\u000a</tr>\u000a</thead>\u000a<tbody>\u000a<tr>\u000a<td class="org-left"><b>[f1]</b></td>\u000a<td class="org-left"><code>Customize</code></td>\u000a</tr>\u000a\u000a<tr>\u000a<td class="org-left">&#xa0;</td>\u000a<td class="org-left">Open Customization window</td>\u000a</tr>\u000a</tbody>\u000a<tbody>\u000a<tr>\u000a<td class="org-left"><b>[f2]</b></td>\u000a<td class="org-left"><code>Copy Name</code></td>\u000a</tr>\u000a\u000a<tr>\u000a<td class="org-left">&#xa0;</td>\u000a<td class="org-left">Copy face name</td>\u000a</tr>\u000a</tbody>\u000a</table>\u000a\u000a<p>\u000a<span class="underline">Demo</span>:\u000a</p>\u000a\u000a\u000a<div class="figure">\u000a<p><a href="static/part3/helm-color.gif"><img src="static/part3/helm-color.gif" alt="helm-color.gif" /></a>\u000a</p>\u000a</div>\u000a</div>\u000a</div>\u000a\u000a<div id="outline-container-orgheadline28" class="outline-2">\u000a<h2 id="orgheadline28"><a id="ID-5ff6249d-02a6-449a-98b8-9b40664b32ce"></a>Command: <code>helm-eval-expression-with-eldoc</code></h2>\u000a<div class="outline-text-2" id="text-orgheadline28">\u000a<p>\u000a<span class="underline">Key binding</span>:\u000a</p>\u000a\u000a<p>\u000a<b>&lt;prefix&gt; C-:</b> (prefix is <b>C-x c</b> by default, or <b>C-c h</b> if\u000aset). <b>C-:</b> is a bit difficult to press, it would be better with:\u000a</p>\u000a\u000a<div class="org-src-container">\u000a\u000a<pre class="src src-emacs-lisp"><span style="color: #707183;">(</span>global-set-key <span style="color: #7388d6;">(</span>kbd <span style="color: #8b2252;">"C-c h M-:"</span><span style="color: #7388d6;">)</span> 'helm-eval-expression-with-eldoc<span style="color: #707183;">)</span>\u000a</pre>\u000a</div>\u000a\u000a<p>\u000a<span class="underline">Description</span>:\u000a</p>\u000a\u000a<p>\u000aThis command allows you to enter Emacs Lisp expressions and get\u000ainstant results in a Helm buffer for every character you type. The\u000achanged key binding above makes it easier to remember, since the\u000astock <code>eval-expression</code> binds to <b>M-:</b>. So, from now on, to eval\u000aexpression without live update, use <b>M-:</b>, and with live update, use\u000a<b>C-c h M-:</b>. This command is useful when you want to try out a command\u000awith various inputs, and want to see the results as fast as\u000apossible.\u000a</p>\u000a\u000a<p>\u000a<span class="underline">Demo</span>:\u000a</p>\u000a\u000a\u000a<div class="figure">\u000a<p><a href="static/part3/helm-eval-expression.gif"><img src="static/part3/helm-eval-expression.gif" alt="helm-eval-expression.gif" /></a>\u000a</p>\u000a</div>\u000a</div>\u000a</div>\u000a\u000a<div id="outline-container-orgheadline29" class="outline-2">\u000a<h2 id="orgheadline29"><a id="ID-25c713ac-d068-48f9-b518-93df630ed0a2"></a>Command: <code>helm-calcul-expression</code></h2>\u000a<div class="outline-text-2" id="text-orgheadline29">\u000a<p>\u000a<span class="underline">Key binding</span>:\u000a</p>\u000a\u000a<p>\u000a<b>&lt;prefix&gt; C-,</b> (prefix is <b>C-x c</b> by default, or <b>C-c h</b> if set).\u000a</p>\u000a\u000a<p>\u000a<span class="underline">Description</span>:\u000a</p>\u000a\u000a<p>\u000aThis commands provides a Helm interface for the <code>calc</code> command. What is\u000a<code>calc</code>? According to <a href="http://www.gnu.org/software/emacs/manual/html_mono/calc.html#Getting-Started">Calc Manual</a>:\u000a</p>\u000a\u000a<blockquote>\u000a<p>\u000aCalc is an advanced calculator and mathematical tool that runs as part\u000aof the GNU Emacs environment. Very roughly based on the HP-28/48\u000aseries of calculators, its many features include:\u000a</p>\u000a\u000a<ul class="org-ul">\u000a<li>Choice of algebraic or RPN (stack-based) entry of calculations.</li>\u000a<li>Arbitrary precision integers and floating-point numbers.</li>\u000a<li>Arithmetic on rational numbers, complex numbers (rectangular and\u000apolar), error forms with standard deviations, open and closed\u000aintervals, vectors and matrices, dates and times, infinities, sets,\u000aquantities with units, and algebraic formulas.</li>\u000a<li>Mathematical operations such as logarithms and trigonometric functions.</li>\u000a<li>Programmer's features (bitwise operations, non-decimal numbers).</li>\u000a<li>Financial functions such as future value and internal rate of return.</li>\u000a<li>Number theoretical features such as prime factorization and arithmetic modulo m for any m.</li>\u000a<li>Algebraic manipulation features, including symbolic calculus.</li>\u000a<li>Moving data to and from regular editing buffers.</li>\u000a<li>Embedded mode for manipulating Calc formulas and data directly inside any editing buffer.</li>\u000a<li>Graphics using GNUPLOT, a versatile (and free) plotting program.</li>\u000a<li>Easy programming using keyboard macros, algebraic formulas, algebraic rewrite rules, or extended Emacs Lisp.</li>\u000a</ul>\u000a</blockquote>\u000a\u000a<p>\u000aYou can enter valid <code>calc</code> mathematic expressions such as +, -,*, /,\u000asin, cos, tan, sqrt&#x2026;. To make the most out of this command, obviously\u000ayou should carefully study <code>calc</code> itself by reading the <a href="http://www.gnu.org/software/emacs/manual/html_mono/calc.html">Calc Manual</a>.\u000a</p>\u000a\u000a<p>\u000a<span class="underline">Demo</span>:\u000a</p>\u000a\u000a\u000a<div class="figure">\u000a<p><a href="static/part3/helm-calc.gif"><img src="static/part3/helm-calc.gif" alt="helm-calc.gif" /></a>\u000a</p>\u000a</div>\u000a</div>\u000a</div>\u000a\u000a<div id="outline-container-orgheadline30" class="outline-2">\u000a<h2 id="orgheadline30"><a id="ID-ad0fbac6-b78e-42b7-82d4-f95057401ba2"></a>Command: <code>helm-eshell-history</code></h2>\u000a<div class="outline-text-2" id="text-orgheadline30">\u000a<p>\u000a<span class="underline">Key binding</span>:\u000a</p>\u000a\u000a<p>\u000aNo key binding. Let's bind it to a key to be used in Eshell:\u000a</p>\u000a\u000a<div class="org-src-container">\u000a\u000a<pre class="src src-emacs-lisp"><span style="color: #707183;">(</span><span style="color: #a020f0;">require</span> '<span style="color: #008b8b;">helm-eshell</span><span style="color: #707183;">)</span>\u000a\u000a<span style="color: #707183;">(</span>add-hook 'eshell-mode-hook\u000a          #'<span style="color: #7388d6;">(</span>lambda <span style="color: #909183;">()</span>\u000a              <span style="color: #909183;">(</span>define-key eshell-mode-map <span style="color: #709870;">(</span>kbd <span style="color: #8b2252;">"C-c C-l"</span><span style="color: #709870;">)</span>  'helm-eshell-history<span style="color: #909183;">)</span><span style="color: #7388d6;">)</span><span style="color: #707183;">)</span>\u000a</pre>\u000a</div>\u000a\u000a<p>\u000a<span class="underline">Description</span>:\u000a</p>\u000a\u000a<p>\u000aIf you usually re-execute an old shell command in Eshell with <b>M-r</b>,\u000athen <code>helm-eshell-history</code> provides an easy and efficient way to work\u000awith command history. Using stock <b>M-r</b>, you have to actively remember\u000apast commands you worked with; otherwise Eshell cannot find the\u000acommand. If you forget, you will have to type in the command <code>history</code>\u000ato refresh your memory. <code>helm-eshell-history</code> combines the two: you\u000acan interactively use a regexp to select past commands and get live\u000afeedback with a list of commands that satisfy the search. Now you don't have to\u000aremember which commands exist. Let Helm handle that problem for you.\u000a</p>\u000a\u000a<p>\u000a<span class="underline">Demo</span>:\u000a</p>\u000a\u000a\u000a<div class="figure">\u000a<p><a href="static/part3/helm-eshell-history.gif"><img src="static/part3/helm-eshell-history.gif" alt="helm-eshell-history.gif" /></a>\u000a</p>\u000a</div>\u000a</div>\u000a</div>\u000a<div id="outline-container-orgheadline31" class="outline-2">\u000a<h2 id="orgheadline31"><a id="ID-2c28164f-ddff-4733-8dc1-cddb0b121b4a"></a>Command: <code>helm-comint-input-ring</code></h2>\u000a<div class="outline-text-2" id="text-orgheadline31">\u000a<p>\u000aSimilar to <code>helm-eshell-history</code>, but used for <code>M-x shell</code>.\u000a</p>\u000a\u000a<div class="org-src-container">\u000a\u000a<pre class="src src-emacs-lisp"><span style="color: #707183;">(</span>define-key shell-mode-map <span style="color: #7388d6;">(</span>kbd <span style="color: #8b2252;">"C-c C-l"</span><span style="color: #7388d6;">)</span> 'helm-comint-input-ring<span style="color: #707183;">)</span>\u000a</pre>\u000a</div>\u000a</div>\u000a</div>\u000a\u000a<div id="outline-container-orgheadline32" class="outline-2">\u000a<h2 id="orgheadline32"><a id="ID-2bc57adc-953f-4760-ae6d-330600e46da2"></a>Command: <code>helm-mini-buffer-history</code></h2>\u000a<div class="outline-text-2" id="text-orgheadline32">\u000a<p>\u000aDo you ever feel uneasy operating on the minibuffer history when\u000ait's getting large (say, hundreds of history items)? If so, Helm can\u000ahelp you easily manage a large number of items in the history list\u000awith ease using the Helm interface.\u000a</p>\u000a\u000a<div class="org-src-container">\u000a\u000a<pre class="src src-emacs-lisp"><span style="color: #707183;">(</span>define-key minibuffer-local-map <span style="color: #7388d6;">(</span>kbd <span style="color: #8b2252;">"C-c C-l"</span><span style="color: #7388d6;">)</span> 'helm-minibuffer-history<span style="color: #707183;">)</span>\u000a</pre>\u000a</div>\u000a</div>\u000a</div>\u000a\u000a<div id="outline-container-orgheadline33" class="outline-2">\u000a<h2 id="orgheadline33"><a id="ID-50cc1f5e-022d-4818-bedf-0a52e7e4615b"></a>Package: <code>helm-projectile</code></h2>\u000a<div class="outline-text-2" id="text-orgheadline33">\u000a<p>\u000a<span class="underline">Author</span>:  <a href="https://github.com/bbatsov">Bozhidar Batsov</a>, <code>bozhidar@batsov.com</code>\u000a</p>\u000a\u000a<p>\u000a<span class="underline">Homepage</span>: <a href="https://github.com/bbatsov/projectile">GitHub</a>\u000a</p>\u000a\u000a<p>\u000a<span class="underline">Features</span>:\u000a</p>\u000a\u000a<p>\u000aProvide a Helm interface for quickly selecting files in a project using\u000aProjectile.\u000a</p>\u000a\u000a\u000a<div class="figure">\u000a<p><a href="static/helm_projectile.gif"><img src="static/helm_projectile.gif" alt="helm_projectile.gif" /></a>\u000a</p>\u000a</div>\u000a\u000a<p>\u000a<span class="underline">Installation</span>:\u000a</p>\u000a\u000a<p>\u000a<code>M-x list-packages</code> and select <b>helm-projectile</b> package, then install\u000ait. After it finishes installing, you can start using <code>helm-projectile</code>\u000aimmediately.\u000a</p>\u000a\u000a<p>\u000a<span class="underline">Usage</span>:\u000a</p>\u000a\u000a<p>\u000aFor basic usage, <b>C-c p h</b> to run <code>helm-projectile</code> and select files\u000ain your project. Please refer to the <a href="http://tuhdo.github.io/helm-projectile.html">full guide</a>.\u000a</p>\u000a</div>\u000a</div>\u000a\u000a<div id="outline-container-orgheadline34" class="outline-2">\u000a<h2 id="orgheadline34"><a id="ID-3a128b01-725f-4142-bd0d-f9bbd4b715cc"></a>Package: <code>helm-descbinds</code></h2>\u000a<div class="outline-text-2" id="text-orgheadline34">\u000a<p>\u000a<span class="underline">Author</span>\u000a</p>\u000a\u000a<ul class="org-ul">\u000a<li>2008-2010:    Taiki SUGAWARA, <code>buzz.taiki@gmail.com</code></li>\u000a<li>2012-2013     Michael Markert, <code>markert.michael@googlemail.com</code></li>\u000a<li>2013-present: Daniel Hackney <code>dan@haxney.org</code></li>\u000a</ul>\u000a\u000a<p>\u000a<span class="underline">Homepage</span>: <a href="https://github.com/emacs-helm/helm-descbinds">GitHub</a>\u000a</p>\u000a\u000a<p>\u000a<span class="underline">Features</span>:\u000aHelm Descbinds provides an interface to Emacs\u2019 <code>describe-bindings</code>,\u000amaking the currently active key bindings interactively searchable with\u000ahelm.\u000a</p>\u000a\u000a<p>\u000aAdditionally you have the following actions\u000a</p>\u000a\u000a<ul class="org-ul">\u000a<li>Execute the command</li>\u000a<li>Describe the command</li>\u000a<li>Find the command</li>\u000a</ul>\u000a\u000a<p>\u000a<span class="underline">Installation</span>:\u000a</p>\u000a\u000a<p>\u000a<code>M-x list-packages</code> and select <b>helm-descbinds</b> package, then install\u000ait. After finish installing, add this code snippet to activate the\u000apackage:\u000a</p>\u000a\u000a<div class="org-src-container">\u000a\u000a<pre class="src src-emacs-lisp"><span style="color: #b22222;">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span>\u000a<span style="color: #b22222;">;; </span><span style="color: #b22222;">PACKAGE: helm-descbinds                      ;;</span>\u000a<span style="color: #b22222;">;;                                              </span><span style="color: #b22222;">;;</span>\u000a<span style="color: #b22222;">;; </span><span style="color: #b22222;">GROUP: Convenience -&gt; Helm -&gt; Helm Descbinds ;;</span>\u000a<span style="color: #b22222;">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span>\u000a<span style="color: #707183;">(</span><span style="color: #a020f0;">require</span> '<span style="color: #008b8b;">helm-descbinds</span><span style="color: #707183;">)</span>\u000a<span style="color: #707183;">(</span>helm-descbinds-mode<span style="color: #707183;">)</span>\u000a</pre>\u000a</div>\u000a\u000a<p>\u000a<span class="underline">Usage</span>:\u000a</p>\u000a\u000a<p>\u000aEnter a prefix key and <b>C-h</b> after it. You will see a list of bindings\u000ausing the Helm interface for narrowing.\u000a</p>\u000a</div>\u000a</div>\u000a\u000a<div id="outline-container-orgheadline35" class="outline-2">\u000a<h2 id="orgheadline35"><a id="ID-68003d84-9f41-11e4-89d3-123b93f75cba"></a>Summary of Keybindings</h2>\u000a<div class="outline-text-2" id="text-orgheadline35">\u000a<p>\u000aThis chapter summarizes the key bindings introduced in the above chapters.\u000a</p>\u000a\u000a<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">\u000a\u000a\u000a<colgroup>\u000a<col  class="org-left" />\u000a\u000a<col  class="org-left" />\u000a\u000a<col  class="org-left" />\u000a</colgroup>\u000a<thead>\u000a<tr>\u000a<th scope="col" class="org-left">Key Binding</th>\u000a<th scope="col" class="org-left">Command</th>\u000a<th scope="col" class="org-left">Description</th>\u000a</tr>\u000a</thead>\u000a<tbody>\u000a<tr>\u000a<td class="org-left"><code>M-x</code></td>\u000a<td class="org-left"><code>helm-M-x</code></td>\u000a<td class="org-left">List commands</td>\u000a</tr>\u000a\u000a<tr>\u000a<td class="org-left"><code>M-y</code></td>\u000a<td class="org-left"><code>helm-show-kill-ring</code></td>\u000a<td class="org-left">Shows the content of the kill ring</td>\u000a</tr>\u000a\u000a<tr>\u000a<td class="org-left"><code>C-x b</code></td>\u000a<td class="org-left"><code>helm-mini</code></td>\u000a<td class="org-left">Shows open buffers, recently opened files</td>\u000a</tr>\u000a\u000a<tr>\u000a<td class="org-left"><code>C-x C-f</code></td>\u000a<td class="org-left"><code>helm-find-files</code></td>\u000a<td class="org-left">The helm version of find-file</td>\u000a</tr>\u000a\u000a<tr>\u000a<td class="org-left"><code>C-s</code></td>\u000a<td class="org-left"><code>helm-ff-run-grep</code></td>\u000a<td class="org-left">Run grep from within helm-find-files</td>\u000a</tr>\u000a\u000a<tr>\u000a<td class="org-left"><code>C-c h i</code></td>\u000a<td class="org-left"><code>helm-semantic-or-imenu</code></td>\u000a<td class="org-left">Helm interface to semantic/imenu</td>\u000a</tr>\u000a\u000a<tr>\u000a<td class="org-left"><code>C-c h m</code></td>\u000a<td class="org-left"><code>helm-man-woman</code></td>\u000a<td class="org-left">Jump to any man entry</td>\u000a</tr>\u000a\u000a<tr>\u000a<td class="org-left"><code>C-c h /</code></td>\u000a<td class="org-left"><code>helm-find</code></td>\u000a<td class="org-left">Helm interface to find</td>\u000a</tr>\u000a\u000a<tr>\u000a<td class="org-left"><code>C-c h l</code></td>\u000a<td class="org-left"><code>helm-locate</code></td>\u000a<td class="org-left">Helm interface to locate</td>\u000a</tr>\u000a\u000a<tr>\u000a<td class="org-left"><code>C-c h o</code></td>\u000a<td class="org-left"><code>helm-occur</code></td>\u000a<td class="org-left">Helm interface for occur</td>\u000a</tr>\u000a\u000a<tr>\u000a<td class="org-left"><code>C-c h a</code></td>\u000a<td class="org-left"><code>helm-apropos</code></td>\u000a<td class="org-left">Describes commands, functions, variables, &#x2026;</td>\u000a</tr>\u000a\u000a<tr>\u000a<td class="org-left"><code>C-c h h g</code></td>\u000a<td class="org-left"><code>helm-info-gnus</code></td>\u000a<td class="org-left">&#xa0;</td>\u000a</tr>\u000a\u000a<tr>\u000a<td class="org-left"><code>C-c h h i</code></td>\u000a<td class="org-left"><code>helm-info-at-point</code></td>\u000a<td class="org-left">&#xa0;</td>\u000a</tr>\u000a\u000a<tr>\u000a<td class="org-left"><code>C-c h h r</code></td>\u000a<td class="org-left"><code>helm-info-emacs</code></td>\u000a<td class="org-left">&#xa0;</td>\u000a</tr>\u000a\u000a<tr>\u000a<td class="org-left"><code>C-c h &lt;tab&gt;</code></td>\u000a<td class="org-left"><code>helm-lisp-completion-at-point</code></td>\u000a<td class="org-left">Provides a list of available functions</td>\u000a</tr>\u000a\u000a<tr>\u000a<td class="org-left"><code>C-c h b</code></td>\u000a<td class="org-left"><code>helm-resume</code></td>\u000a<td class="org-left">Resumes a previous helm session</td>\u000a</tr>\u000a\u000a<tr>\u000a<td class="org-left"><code>C-h SPC</code></td>\u000a<td class="org-left"><code>helm-all-mark-rings</code></td>\u000a<td class="org-left">Views contents of local and global mark rings</td>\u000a</tr>\u000a\u000a<tr>\u000a<td class="org-left"><code>C-c h r</code></td>\u000a<td class="org-left"><code>helm-regex</code></td>\u000a<td class="org-left">Visualizes regex matches</td>\u000a</tr>\u000a\u000a<tr>\u000a<td class="org-left"><code>C-c h x</code></td>\u000a<td class="org-left"><code>helm-register</code></td>\u000a<td class="org-left">Shows content of registers</td>\u000a</tr>\u000a\u000a<tr>\u000a<td class="org-left"><code>C-c h t</code></td>\u000a<td class="org-left"><code>helm-top</code></td>\u000a<td class="org-left">Helm interface to top</td>\u000a</tr>\u000a\u000a<tr>\u000a<td class="org-left"><code>C-c h s</code></td>\u000a<td class="org-left"><code>helm-surfraw</code></td>\u000a<td class="org-left">Command line interface to many web search engines</td>\u000a</tr>\u000a\u000a<tr>\u000a<td class="org-left"><code>C-c h g</code></td>\u000a<td class="org-left"><code>helm-google-suggest</code></td>\u000a<td class="org-left">Interactively enter search terms and get results from Google in helm buffer</td>\u000a</tr>\u000a\u000a<tr>\u000a<td class="org-left"><code>C-c h c</code></td>\u000a<td class="org-left"><code>helm-color</code></td>\u000a<td class="org-left">Lists all available faces</td>\u000a</tr>\u000a\u000a<tr>\u000a<td class="org-left"><code>C-c h M-:</code></td>\u000a<td class="org-left"><code>helm-eval-expression-with-eldoc</code></td>\u000a<td class="org-left">Get instant results for Emacs lisp expressions in the helm buffer</td>\u000a</tr>\u000a\u000a<tr>\u000a<td class="org-left"><code>C-c h C-,</code></td>\u000a<td class="org-left"><code>helm-calcul-expression</code></td>\u000a<td class="org-left">Helm interface to calc</td>\u000a</tr>\u000a\u000a<tr>\u000a<td class="org-left"><code>C-c C-l</code></td>\u000a<td class="org-left"><code>helm-eshell-history</code></td>\u000a<td class="org-left">Interface to eshell history</td>\u000a</tr>\u000a\u000a<tr>\u000a<td class="org-left"><code>C-c C-l</code></td>\u000a<td class="org-left"><code>helm-comint-input-ring</code></td>\u000a<td class="org-left">Interface to shell history</td>\u000a</tr>\u000a\u000a<tr>\u000a<td class="org-left"><code>C-c C-l</code></td>\u000a<td class="org-left"><code>helm-mini-buffer-history</code></td>\u000a<td class="org-left">Interface to mini-buffer history</td>\u000a</tr>\u000a</tbody>\u000a</table>\u000a</div>\u000a</div>\u000a</div>\u000a<div id="postamble" class="status">\u000a\u000a    <div id="disqus_thread"></div>\u000a    <script type="text/javascript">\u000a  /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */\u000a  var disqus_shortname = 'emacs-tutor'; // required: replace example with your forum shortname\u000a\u000a  /* * * DON'T EDIT BELOW THIS LINE * * */\u000a  (function() {\u000a      var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;\u000a      dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';\u000a      (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);\u000a  })();\u000a    </script>\u000a    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>\u000a    <a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>\u000a</div>\u000a</body>\u000a</html>
p3
a.