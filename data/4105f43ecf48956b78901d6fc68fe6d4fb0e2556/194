(lp0
S'http://goessner.net/articles/JsonPath/'
p1
aS'JSONPath - XPath for JSON'
p2
aI0
aV<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="de">\u000a  <head>\u000a    <title>JSONPath - XPath for JSON</title>\u000a    <meta http-equiv="content-type" content="text/html; charset=ISO-8859-1"/>\u000a    <meta name="aid" content="a121"/>\u000a    <meta name="base" content="/articles/JsonPath/index.html"/>\u000a    <meta name="template" content="archive"/>\u000a    <meta name="created" content="2007-02-21"/>\u000a    <meta name="modified" content="2007-08-31"/>\u000a    <meta name="nextid" content="6"/>\u000a    <meta name="append" content="true"/>\u000a    <meta name="entrytemplate" content="entryhtml"/>\u000a    <meta name="entrycommentable" content="false"/>\u000a    <meta name="entryeditable" content="true"/>\u000a    <meta name="lockedentry"/>\u000a    <meta name="locktime"/>\u000a    <meta name="maxlocktime" content="20"/>\u000a    <link rel="home" title="Mechanik, das Web und ..." href="http://goessner.net"/>\u000a    <link id="a15" rel="parent" title="Articles" href="/articles/index.html"/>\u000a    <link rel="child"/>\u000a    <link id="a88" rel="prev" title="SVG" href="/articles/svg/index.html"/>\u000a    <link rel="next"/>\u000a    <link rel="stylesheet" type="text/css" href="/css/main.css"/>\u000a    <link rel="shortcut icon" href="/favicon.ico" type="image/x-icon"/>\u000a    <script type="text/javascript" src="/js/core.js"> </script>  <!-- blank required for recreating an empty script element -->\u000a    <script type="text/javascript" src="/js/http.js"> </script>\u000a    <script type="text/javascript" src="/js/drag.js"> </script>\u000a    <script type="text/javascript" src="/js/archive.js"> </script>\u000a    <script type="text/javascript" src="/js/wikiwiz.js"> </script>\u000a    <script type="text/javascript" src="/js/wikiwiz.lang.js"> </script>\u000a    <script type="text/javascript" src="/js/wikiwiz.math.js"> </script>\u000a    <script type="text/javascript" src="/bin/fileinc.php?file=/toc.html&amp;var=toc"> </script>\u000a    <script type="text/javascript" src="/bin/fileinc.php?file=/modified.html&amp;var=comments"> </script>\u000a    <script type="text/javascript"><!--//--><![CDATA[//><!--\u000a//-->]]></script>\u000a  </head>\u000a  <body id="root">\u000a    <div id="frame">\u000a    <div id="header" style="border:1px solid;">\u000a      <div class="dark" style="color:#eee; text-decoration:none; padding:0 0.25em 0 0.25em;">\u000a        <a href="http://fh-dortmund.de/">\u000a          <img style="float:right" src="/img/FHPICTO.GIF" width="30" height="30" alt="fh pictogramm" title="Fachhochschule Dortmund"/>\u000a        </a>\u000a        <a style="font-size:160%; color:#eee;" href="/index.html">&lt;stefan.goessner/&gt;</a><br/>\u000a        Mechanik, das Web und der ganze Rest\u000a      </div>\u000a      <div class="mediumlight" style="font-weight:bold;width:100%;text-align:center;">\u000a         | <a href="/">Home</a> | <a href="/learn/">Lehre</a> | <a href="/download/">Download</a> | <a href="/info/">Info</a> |\u000a      </div>\u000a    </div>\u000a    <div id="content">\u000a<div id="e1" class="entry">\u000a <h4 class="unlocked">\u000a   <span class="right">\u000a     <span class="noeditbutton" onclick="Archive.startEdit(this.parentNode.parentNode.parentNode.attributes['id'].value, 'entry');">[edit]</span>\u000a     <span class="nocommentbutton" onclick="Archive.startEdit(this.parentNode.parentNode.parentNode.attributes['id'].value, 'comment');">[comment]</span>\u000a     <span class="noremovebutton" onclick="Archive.removeEntry(this.parentNode.parentNode.parentNode.attributes['id'].value);">[remove]</span>\u000a     |<span class="created" title="modified: 2007-08-28">2007-02-21</span>|\u000a     <span class="eid">e1</span>\u000a   </span>\u000a   <a style="text-decoration:none;color:inherit;" href="/articles/JsonPath/index.html#e1" title="permanent link" rel="bookmark">&#35;</a>\u000a   <span class="entryTitle">JSONPath - XPath for JSON</span>\u000a </h4>\u000a <div class="content wiki" lang="x-wiki"><p>A frequently emphasized advantage of <abbr title="extended Markup Language">XML</abbr> is the availability of plenty tools to analyse, transform and selectively extract data out of XML documents. <a href="http://en.wikipedia.org/wiki/XPath">XPath</a> is one of these powerful tools.</p>\u000a<p>It's time to wonder, if there is a need for something like XPath4JSON and what are the problems it can solve.\u000a</p><ul>\u000a<li class="u">Data may be interactively found and extracted out of <a href="http://json.org">JSON</a> structures on the client without special scripting.</li>\u000a<li class="u">JSON data requested by the client can be reduced to the relevant parts on the server, such minimizing the bandwidth usage of the server response.</li></ul>\u000a<p>If we agree, that a tool for picking parts out of a JSON structure at hand does make sense, some questions come up. How should it do its job? How do JSONPath expressions look like?</p>\u000a<p>Due to the fact, that JSON is a natural representation of data for the C family of programming languages, the chances are high, that the particular language has native syntax elements to access a JSON structure.</p>\u000a<p>The following XPath expression</p>\u000a<p><code>/store/book[1]/title</code></p>\u000a<p>would look like</p>\u000a<p><code>x.store.book[0].title</code></p>\u000a<p>or</p>\u000a<p><code>x['store']['book'][0]['title']</code></p>\u000a<p>in Javascript, Python and PHP with a variable <code>x</code> holding the JSON structure. Here we observe, that the particular language usually has a fundamental XPath feature already built in.</p>\u000a<p>The JSONPath tool in question should &#8230;</p><ul>\u000a<li class="u">be naturally based on those language characteristics.</li>\u000a<li class="u">cover only essential parts of XPath 1.0.</li>\u000a<li class="u">be lightweight in code size and memory consumption.</li>\u000a<li class="u">be runtime efficient. \u000a</li></ul></div>\u000a <div class="nocomment" lang="x-wiki">&nbsp;</div>\u000a<!-- entry --></div>\u000a<div id="e2" class="entry">\u000a <h4 class="unlocked">\u000a   <span class="right">\u000a     <span class="noeditbutton" onclick="Archive.startEdit(this.parentNode.parentNode.parentNode.attributes['id'].value, 'entry');">[edit]</span>\u000a     <span class="nocommentbutton" onclick="Archive.startEdit(this.parentNode.parentNode.parentNode.attributes['id'].value, 'comment');">[comment]</span>\u000a     <span class="noremovebutton" onclick="Archive.removeEntry(this.parentNode.parentNode.parentNode.attributes['id'].value);">[remove]</span>\u000a     |<span class="created" title="modified: 2007-08-31">2007-08-17</span>|\u000a     <span class="eid">e2</span>\u000a   </span>\u000a   <a style="text-decoration:none;color:inherit;" href="/articles/JsonPath/index.html#e2" title="permanent link" rel="bookmark">&#35;</a>\u000a   <span class="entryTitle">JSONPath expressions</span>\u000a </h4>\u000a <div class="content wiki" lang="x-wiki"><p>JSONPath expressions always refer to a JSON structure in the same way as XPath expression are used in combination with an XML document. Since a JSON structure is usually anonymous and doesn't necessarily have a "root member object" JSONPath assumes the abstract name <code>$</code> assigned to the outer level object.</p>\u000a<p>JSONPath expressions can use the <em>dot</em>&#8211;notation</p>\u000a<p><code>$.store.book[0].title</code></p>\u000a<p>or the <em>bracket</em>&#8211;notation</p>\u000a<p><code>$['store']['book'][0]['title']</code></p>\u000a<p>for input pathes. Internal or output pathes will always be converted to the more general <em>bracket</em>&#8211;notation.</p>\u000a<p>JSONPath allows the <em>wildcard</em> symbol * for member names and array indices.\u000aIt borrows the <em>descendant</em> operator '..' from <a href="http://en.wikipedia.org/wiki/E4X">E4X</a> and the <em><a href="http://developer.mozilla.org/es4/proposals/slice_syntax.html">array slice syntax</a></em> proposal <code>[start:end:step]</code> from <a href="http://www.ecmascript.org/">ECMASCRIPT 4</a>.</p>\u000a<p>Expressions of the underlying scripting language <code>(&lt;expr&gt;)</code> can be used as an alternative to explicit names or indices as in</p>\u000a<p><code>$.store.book[(@.length-1)].title</code></p>\u000a<p>using the symbol '@' for the current object. Filter expressions are supported via the syntax <code>?(&lt;boolean expr&gt;)</code> as in</p>\u000a<p><code>$.store.book[?(@.price &lt; 10)].title</code></p>\u000a<p>Here is a complete overview and a side by side comparison of the JSONPath syntax elements with its XPath counterparts.</p>\u000a<table><tr class="evn"><td> <strong>XPath</strong> </td><td> <strong>JSONPath</strong> </td><td> <strong>Description</strong> </td></tr>\u000a<tr class="odd"><td> / </td><td> $ </td><td class="lft">the root object/element </td></tr>\u000a<tr class="evn"><td> . </td><td> @ </td><td class="lft">the current object/element </td></tr>\u000a<tr class="odd"><td> / </td><td> . or [] </td><td class="lft">child operator </td></tr>\u000a<tr class="evn"><td> .. </td><td> n/a </td><td class="lft">parent operator </td></tr>\u000a<tr class="odd"><td> // </td><td> .. </td><td class="lft">recursive descent. JSONPath borrows this syntax from E4X. </td></tr>\u000a<tr class="evn"><td> * </td><td> * </td><td class="lft">wildcard. All objects/elements regardless their names. </td></tr>\u000a<tr class="odd"><td> @ </td><td> n/a </td><td class="lft">attribute access. JSON structures don't have attributes. </td></tr>\u000a<tr class="evn"><td> [] </td><td> [] </td><td class="lft">subscript operator. XPath uses it to iterate over element collections and for <a href="http://www.w3.org/TR/xpath#predicates">predicates</a>. In Javascript and JSON it is the native array operator. </td></tr>\u000a<tr class="odd"><td> | </td><td> [,] </td><td class="lft">Union operator in XPath results in a combination of node sets. JSONPath allows alternate names or array indices as a set. </td></tr>\u000a<tr class="evn"><td> n/a </td><td> [start:end:step] </td><td class="lft">array slice operator borrowed from ES4. </td></tr>\u000a<tr class="odd"><td> [] </td><td> ?() </td><td class="lft">applies a filter (script) expression. </td></tr>\u000a<tr class="evn"><td> n/a </td><td> () </td><td class="lft">script expression, using the underlying script engine. </td></tr>\u000a<tr class="odd"><td> () </td><td> n/a </td><td class="lft">grouping in Xpath </td></tr></table>\u000a<p>XPath has a lot more to offer (Location pathes in not abbreviated syntax, operators and functions) than listed here. Moreover there is a remarkable difference how the subscript operator works in Xpath and JSONPath.</p><ul>\u000a<li class="u">Square brackets in XPath expressions always operate on the <em>node set</em> resulting from the previous path fragment. Indices always start by 1.</li>\u000a<li class="u">With JSONPath square brackets operate on the <em>object</em> or <em>array</em> addressed by the previous path fragment. Indices always start by 0. </li></ul></div>\u000a <div class="nocomment" lang="x-wiki">&nbsp;</div>\u000a<!-- entry --></div>\u000a<div id="e3" class="entry">\u000a <h4 class="unlocked">\u000a   <span class="right">\u000a     <span class="noeditbutton" onclick="Archive.startEdit(this.parentNode.parentNode.parentNode.attributes['id'].value, 'entry');">[edit]</span>\u000a     <span class="nocommentbutton" onclick="Archive.startEdit(this.parentNode.parentNode.parentNode.attributes['id'].value, 'comment');">[comment]</span>\u000a     <span class="noremovebutton" onclick="Archive.removeEntry(this.parentNode.parentNode.parentNode.attributes['id'].value);">[remove]</span>\u000a     |<span class="created" title="modified: 2007-08-28">2007-08-18</span>|\u000a     <span class="eid">e3</span>\u000a   </span>\u000a   <a style="text-decoration:none;color:inherit;" href="/articles/JsonPath/index.html#e3" title="permanent link" rel="bookmark">&#35;</a>\u000a   <span class="entryTitle">JSONPath examples</span>\u000a </h4>\u000a <div class="content wiki" lang="x-wiki"><p>Let's practice JSONPath expressions by some more examples. We start with a simple JSON structure built after an XML example representing a bookstore (original <a href="http://coli.lili.uni-bielefeld.de/~andreas/Seminare/sommer02/books.xml">XML file</a>).\u000a</p><pre class="code syntax_js">{ <span class="str">"store"</span>: {\u000a    <span class="str">"book"</span>: [ \u000a      { <span class="str">"category"</span>: <span class="str">"reference"</span>,\u000a        <span class="str">"author"</span>: <span class="str">"Nigel Rees"</span>,\u000a        <span class="str">"title"</span>: <span class="str">"Sayings of the Century"</span>,\u000a        <span class="str">"price"</span>: 8.95\u000a      },\u000a      { <span class="str">"category"</span>: <span class="str">"fiction"</span>,\u000a        <span class="str">"author"</span>: <span class="str">"Evelyn Waugh"</span>,\u000a        <span class="str">"title"</span>: <span class="str">"Sword of Honour"</span>,\u000a        <span class="str">"price"</span>: 12.99\u000a      },\u000a      { <span class="str">"category"</span>: <span class="str">"fiction"</span>,\u000a        <span class="str">"author"</span>: <span class="str">"Herman Melville"</span>,\u000a        <span class="str">"title"</span>: <span class="str">"Moby Dick"</span>,\u000a        <span class="str">"isbn"</span>: <span class="str">"0-553-21311-3"</span>,\u000a        <span class="str">"price"</span>: 8.99\u000a      },\u000a      { <span class="str">"category"</span>: <span class="str">"fiction"</span>,\u000a        <span class="str">"author"</span>: <span class="str">"J. R. R. Tolkien"</span>,\u000a        <span class="str">"title"</span>: <span class="str">"The Lord of the Rings"</span>,\u000a        <span class="str">"isbn"</span>: <span class="str">"0-395-19395-8"</span>,\u000a        <span class="str">"price"</span>: 22.99\u000a      }\u000a    ],\u000a    <span class="str">"bicycle"</span>: {\u000a      <span class="str">"color"</span>: <span class="str">"red"</span>,\u000a      <span class="str">"price"</span>: 19.95\u000a    }\u000a  }\u000a}</pre>\u000a<table><tr class="evn"><td> <strong>XPath</strong> </td><td> <strong>JSONPath</strong> </td><td> <strong>Result</strong> </td></tr>\u000a<tr class="odd"><td class="lft"><code>/store/book/author</code> </td><td class="lft"><code>$.store.book[*].author</code> </td><td class="lft">the authors of all books in the store </td></tr>\u000a<tr class="evn"><td class="lft"><code>//author</code> </td><td class="lft"><code>$..author</code> </td><td class="lft">all authors </td></tr>\u000a<tr class="odd"><td class="lft"><code>/store/*</code> </td><td class="lft"><code>$.store.*</code> </td><td class="lft">all things in store, which are some books and a red bicycle. </td></tr>\u000a<tr class="evn"><td class="lft"><code>/store//price</code> </td><td class="lft"><code>$.store..price</code> </td><td class="lft">the price of everything in the store. </td></tr>\u000a<tr class="odd"><td class="lft"><code>//book[3]</code> </td><td class="lft"><code>$..book[2]</code> </td><td class="lft">the third book </td></tr>\u000a<tr class="evn"><td class="lft"><code>//book[last()]</code> </td><td class="lft"><code>$..book[(@.length-1)]</code><br/>\u000a<code>$..book[-1:]</code> </td><td class="lft">the last book in order. </td></tr>\u000a<tr class="odd"><td class="lft"><code>//book[position()&lt;3]</code> </td><td class="lft"><code>$..book[0,1]</code><br/>\u000a<code>$..book[:2]</code> </td><td class="lft">the first two books </td></tr>\u000a<tr class="evn"><td class="lft"><code>//book[isbn]</code> </td><td class="lft"><code>$..book[?(@.isbn)]</code> </td><td class="lft">filter all books with isbn number </td></tr>\u000a<tr class="odd"><td class="lft"><code>//book[price&lt;10]</code> </td><td class="lft"><code>$..book[?(@.price&lt;10)]</code> </td><td class="lft">filter all books cheapier than 10 </td></tr>\u000a<tr class="evn"><td class="lft"><code>//*</code> </td><td class="lft"><code>$..*</code> </td><td class="lft">all Elements in XML document. All members of JSON structure. </td></tr></table></div>\u000a <div class="nocomment" lang="x-wiki">&nbsp;</div>\u000a<!-- entry --></div>\u000a<div id="e4" class="entry">\u000a <h4 class="unlocked">\u000a   <span class="right">\u000a     <span class="noeditbutton" onclick="Archive.startEdit(this.parentNode.parentNode.parentNode.attributes['id'].value, 'entry');">[edit]</span>\u000a     <span class="nocommentbutton" onclick="Archive.startEdit(this.parentNode.parentNode.parentNode.attributes['id'].value, 'comment');">[comment]</span>\u000a     <span class="noremovebutton" onclick="Archive.removeEntry(this.parentNode.parentNode.parentNode.attributes['id'].value);">[remove]</span>\u000a     |<span class="created" title="modified: 2007-08-28">2007-08-22</span>|\u000a     <span class="eid">e4</span>\u000a   </span>\u000a   <a style="text-decoration:none;color:inherit;" href="/articles/JsonPath/index.html#e4" title="permanent link" rel="bookmark">&#35;</a>\u000a   <span class="entryTitle">JSONPath implementation</span>\u000a </h4>\u000a <div class="content wiki" lang="x-wiki"><p>JSONPath is implemented in Javascript for clientside usage and ported over to PHP for use on the server.\u000a</p>\u000a<h3> Usage </h3>\u000a\u000a<p>All you need to do is downloading either of the files\u000a</p><ul>\u000a<li class="u"><a href="http://code.google.com/p/jsonpath/">jsonpath.js</a></li>\u000a<li class="u"><a href="http://code.google.com/p/jsonpath/">jsonpath.php</a></li></ul>\u000a<p>include it in your program and use the simple API consisting of one single function.</p>\u000a<p><code class="syntax_js">jsonPath(obj, expr [, args])</code></p>\u000a<p><strong>parameters:</strong></p><dl>\u000a<dt><code class="syntax_js">obj (object|array)</code>:</dt><dd>Object representing the JSON structure.</dd>\u000a<dt><code class="syntax_js">expr (string)</code>:</dt><dd>JSONPath expression string.</dd>\u000a<dt><code class="syntax_js">args (object|undefined)</code>:</dt><dd>Object controlling path evaluation and output. Currently only one member is supported.</dd>\u000a<dt><code class="syntax_js">args.resultType (<span class="str">"VALUE"</span>|<span class="str">"PATH"</span>)</code>:</dt><dd>causes the result to be either matching values <em>(default)</em> or normalized path expressions.</dd></dl>\u000a<p><strong>return value:</strong> \u000a</p><dl>\u000a<dt><code class="syntax_js">(array|<span class="kwd">false</span>)</code>:</dt><dd>Array holding either values or normalized path expressions matching the input path expression, which can be used for lazy evaluation. <code>false</code> in case of no match.</dd></dl>\u000a<p><strong>Javascript Example</strong>:\u000a</p><pre class="code syntax_js"><span class="kwd">var</span> o = { <span class="cmt">/*...*/</span> },  <span class="cmt">// the <span class="str">'store'</span> JSON object from above</span>\u000a    res1 = jsonPath(o, <span class="str">"$..author"</span>).toJSONString(),\u000a    res2 = jsonPath(o, <span class="str">"$..author"</span>, {resultType:<span class="str">"PATH"</span>}).toJSONString();</pre>\u000a<p><strong>PHP example</strong>:</p>\u000a<p>We need here to convert the JSON string to a PHP array first. I am using <a href="http://mike.teczno.com/">Michal Migurski</a>'s <a href="http://mike.teczno.com/json.html">JSON parser</a> for that. \u000a</p><pre class="code syntax_js">require_once(<span class="str">'json.php'</span>);      <span class="cmt">// JSON parser</span>\u000arequire_once(<span class="str">'jsonpath.php'</span>);  <span class="cmt">// JSONPath evaluator</span>\u000a\u000a$json = <span class="str">'{ ... }'</span>;  <span class="cmt">// JSON structure from above</span>\u000a\u000a$parser = <span class="kwd">new</span> Services_JSON(SERVICES_JSON_LOOSE_TYPE);\u000a$o = $parser-&gt;decode($json);\u000a$match1 = jsonPath($o, <span class="str">"$..author"</span>);\u000a$match2 = jsonPath($o, <span class="str">"$..author"</span>, array(<span class="str">"resultType"</span> =&gt; <span class="str">"PATH"</span>));\u000a$res1 = $parser-&gt;encode($match1);\u000a$res2 = $parser-&gt;encode($match2);</pre><p>\u000a<strong>results</strong></p>\u000a<p>Both <em>Javascript</em> and <em>PHP</em> example result in the following JSON arrays (as strings):\u000a</p><pre class="code syntax_js">res1:\u000a[ <span class="str">"Nigel Rees"</span>,\u000a  <span class="str">"Evelyn Waugh"</span>,\u000a  <span class="str">"Herman Melville"</span>,\u000a  <span class="str">"J. R. R. Tolkien"</span>\u000a]\u000ares2:\u000a[ <span class="str">"$['store']['book'][0]['author']"</span>,\u000a  <span class="str">"$['store']['book'][1]['author']"</span>,\u000a  <span class="str">"$['store']['book'][2]['author']"</span>,\u000a  <span class="str">"$['store']['book'][3]['author']"</span>\u000a]</pre><p>\u000aPlease note, that the return value of <code>jsonPath</code> is an array, which is also a valid JSON structure. So you might want to apply <code>jsonPath</code> to the resulting structure again or use one of your favorite array methods as <code>sort</code> with it.\u000a</p></div>\u000a <div class="nocomment" lang="x-wiki">&nbsp;</div>\u000a<!-- entry --></div>\u000a<div id="e5" class="entry">\u000a <h4 class="unlocked">\u000a   <span class="right">\u000a     <span class="noeditbutton" onclick="Archive.startEdit(this.parentNode.parentNode.parentNode.attributes['id'].value, 'entry');">[edit]</span>\u000a     <span class="nocommentbutton" onclick="Archive.startEdit(this.parentNode.parentNode.parentNode.attributes['id'].value, 'comment');">[comment]</span>\u000a     <span class="noremovebutton" onclick="Archive.removeEntry(this.parentNode.parentNode.parentNode.attributes['id'].value);">[remove]</span>\u000a     |<span class="created" title="modified: 2007-08-31">2007-08-24</span>|\u000a     <span class="eid">e5</span>\u000a   </span>\u000a   <a style="text-decoration:none;color:inherit;" href="/articles/JsonPath/index.html#e5" title="permanent link" rel="bookmark">&#35;</a>\u000a   <span class="entryTitle">Issues</span>\u000a </h4>\u000a <div class="content wiki" lang="x-wiki"><ul>\u000a<li class="u">Currently only single quotes allowed inside of JSONPath expressions.</li>\u000a<li class="u">Script expressions inside of JSONPath locations are currently not recursively evaluated by <code>jsonPath</code>. Only the global <code>$</code> and local <code>@</code> symbols are expanded by a simple regular expression.</li>\u000a<li class="u">An alternative for <code>jsonPath</code> to return <code>false</code> in case of <em>no match</em> may be to return an empty array in future.\u000a</li></ul></div>\u000a <div class="nocomment" lang="x-wiki">&nbsp;</div>\u000a<!-- entry --></div>\u000a</div> <!-- content -->\u000a    <div id="right">\u000a      <div id="googsearch" class="block light">\u000a        <h4 class="medium">&raquo; Search ..</h4>\u000a<!-- SiteSearch Google -->\u000a<form method="get" action="http://www.google.de/custom" target="_top">\u000a<table border="0" bgcolor="#cccccc">\u000a<tr><td nowrap="nowrap" valign="top" align="left" height="32">\u000a\u000a<br/>\u000a<input type="hidden" name="domains" value="goessner.net"/>\u000a<input type="text" name="q" size="24" maxlength="255"/>\u000a</td></tr>\u000a<tr>\u000a<td nowrap="nowrap">\u000a<table>\u000a<tr>\u000a<td>\u000a<input type="radio" name="sitesearch"/>\u000a<font size="-1" color="#000000">Web</font>\u000a</td>\u000a<td>\u000a<input type="radio" name="sitesearch" value="goessner.net" checked="checked"/>\u000a<font size="-1" color="#000000">goessner.net</font>\u000a</td>\u000a</tr>\u000a</table>\u000a<input type="submit" name="sa" value="Google Search"/>\u000a<input type="hidden" name="client" value="pub-4579615353600997"/>\u000a<input type="hidden" name="forid" value="1"/>\u000a<input type="hidden" name="channel" value="0798163864"/>\u000a<input type="hidden" name="ie" value="ISO-8859-1"/>\u000a<input type="hidden" name="oe" value="ISO-8859-1"/>\u000a<input type="hidden" name="safe" value="active"/>\u000a<input type="hidden" name="flav" value="0000"/>\u000a<input type="hidden" name="sig" value="D5-SKdOlKxl20D6v"/>\u000a<input type="hidden" name="cof" value="GALT:#008000;GL:1;DIV:#336699;VLC:663399;AH:center;BGC:FFFFFF;LBGC:336699;ALC:0000FF;LC:0000FF;T:000000;GFNT:0000FF;GIMP:0000FF;FORID:1;"/>\u000a<input type="hidden" name="hl" value="en"/>\u000a</td></tr></table>\u000a</form>\u000a<!-- SiteSearch Google -->\u000a      </div>\u000a      <div id="tocbox" class="block light">\u000a        <h4 class="medium">&raquo; Inhalt ..</h4>\u000a      </div>\u000a      <div id="googads" class="block light" style="text-align:center">\u000a<script type="text/javascript"><!--//--><![CDATA[//><!--\u000agoogle_ad_client = "pub-4579615353600997";\u000agoogle_ad_width = 180;\u000agoogle_ad_height = 150;\u000agoogle_ad_format = "180x150_as";\u000agoogle_ad_type = "text";\u000agoogle_ad_channel ="6287811822";\u000agoogle_color_border = "CCCCCC";\u000agoogle_color_bg = "CCCCCC";\u000agoogle_color_link = "000000";\u000agoogle_color_text = "333333";\u000agoogle_color_url = "666666";\u000a//-->]]></script>\u000a<script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js"> </script>\u000a      </div>\u000a      <div class="block light" style="font-size:100%">\u000a        <h4 class="medium">&raquo; comments ..</h4>\u000a		<div id="commentbox" style="width:100%; height:16em; overflow:auto;"> </div>\u000a      </div>\u000a      <div id="mydeliciousbox" class="block light" style="font-size:100%">\u000a        <h4 class="medium">&raquo; delicious ..</h4>\u000a      </div>\u000a      <div class="block light">\u000a        <h4 class="medium">&raquo; Lizenz ..</h4>\u000a        <div style="text-align:center; font-size:80%;">\u000a           Sofern nicht ausdr&uuml;cklich etwas anderes angegeben ist, gelten f&uuml;r die Inhalte auf diesen \u000a           Seiten die Bedingungen der <br/>\u000a           <a rel="license" href="http://creativecommons.org/licenses/by/2.5/">(cc) Creative Commons License</a><br/><br/>\u000a           (c) 2006 <a href="/info">Stefan G&ouml;ssner</a>\u000a        </div>\u000a      </div>\u000a    </div>\u000a    <div id="footer" class="medium">&nbsp;</div>\u000a    </div> <!-- frame -->\u000a	<!-- invisible tools -->\u000a    <img id="wait" src="/img/wait.gif" style="display:none; position:fixed; top:50%; left:50%; background:white; border:solid 1px black;"/>\u000a    <div id="drag" style="position:absolute; left:5px; top:5px; width:400px; border:1px solid black; display:none;"/>\u000a	<!-- Google Analytics -->\u000a<script src="http://www.google-analytics.com/urchin.js" type="text/javascript"> </script>\u000a<script type="text/javascript">\u000a_uacct = "UA-430455-1";\u000aurchinTracker();\u000a</script>\u000a  </body>\u000a</html>
p3
a.