(lp0
S'http://xlambda.com/gevent-tutorial/'
p1
aS'Gevent\xe6\x8c\x87\xe5\x8d\x97'
p2
aI0
aV<!DOCTYPE HTML>\u000a<html>\u000a<head>\u000a    <meta http-equiv="content-type" content="text/html; charset=utf-8">\u000a    <script src="jquery.js"></script>\u000a    <script src="highlight.min.js"></script>\u000a    <script src="nav.js"></script>\u000a\u000a    <!-- Code Monospace Font -->\u000a    <link href='http://fonts.googleapis.com/css?family=Inconsolata' rel='stylesheet'>\u000a\u000a    <link rel="stylesheet" href="base.css">\u000a    <link rel="stylesheet" href="skeleton.css">\u000a    <link rel="stylesheet" href="layout.css">\u000a    <link rel="stylesheet" href="gevent.css">\u000a\u000a    <!-- Syntax Highlighting Theme -->\u000a    <link rel="stylesheet" href="github.min.css">\u000a\u000a    <title>Gevent\u6307\u5357</title>\u000a</head>\u000a<style>\u000a\u000a</style>\u000a<body>\u000a<div class="container">\u000a\u000a<div id="sidebar" class="three columns sidebar">\u000a    <nav>\u000a    </nav>\u000a</div>\u000a\u000a<div class="twelve columns offset-by-three content">\u000a\u000a    <header>\u000a        <h1><span class="green">gevent</span>\u7a0b\u5e8f\u5458\u6307\u5357</h1>\u000a        <h3 class="author">\u000a            \u7531Gevent\u793e\u533a\u7f16\u5199\u000a        </h3>\u000a\u000a        <blockquote>\u000a        gevent\u662f\u4e00\u4e2a\u57fa\u4e8e<a href="http://software.schmorp.de/pkg/libev.html">libev</a>\u7684\u5e76\u53d1\u5e93\u3002\u5b83\u4e3a\u5404\u79cd\u5e76\u53d1\u548c\u7f51\u7edc\u76f8\u5173\u7684\u4efb\u52a1\u63d0\u4f9b\u4e86\u6574\u6d01\u7684API\u3002\u000a        </blockquote>\u000a    </header>\u000a\u000a    <div class="toc">\u000a<ul>\u000a<li><a href="#">\u4ecb\u7ecd</a><ul>\u000a<li><a href="#_1">\u8d21\u732e\u8005</a></li>\u000a</ul>\u000a</li>\u000a<li><a href="#_2">\u6838\u5fc3\u90e8\u5206</a><ul>\u000a<li><a href="#greenlets">Greenlets</a></li>\u000a<li><a href="#_3">\u540c\u6b65\u548c\u5f02\u6b65\u6267\u884c</a></li>\u000a<li><a href="#_4">\u786e\u5b9a\u6027</a></li>\u000a<li><a href="#greenlets_1">\u521b\u5efaGreenlets</a></li>\u000a<li><a href="#greenlet">Greenlet\u72b6\u6001</a></li>\u000a<li><a href="#_5">\u7a0b\u5e8f\u505c\u6b62</a></li>\u000a<li><a href="#_6">\u8d85\u65f6</a></li>\u000a<li><a href="#monkey-patching">\u7334\u5b50\u8865\u4e01(Monkey patching)</a></li>\u000a</ul>\u000a</li>\u000a<li><a href="#_7">\u6570\u636e\u7ed3\u6784</a><ul>\u000a<li><a href="#_8">\u4e8b\u4ef6</a></li>\u000a<li><a href="#_9">\u961f\u5217</a></li>\u000a<li><a href="#_10">\u7ec4\u548c\u6c60</a></li>\u000a<li><a href="#_11">\u9501\u548c\u4fe1\u53f7\u91cf</a></li>\u000a<li><a href="#_12">\u7ebf\u7a0b\u5c40\u90e8\u53d8\u91cf</a></li>\u000a<li><a href="#_13">\u5b50\u8fdb\u7a0b</a></li>\u000a<li><a href="#actors">Actors</a></li>\u000a</ul>\u000a</li>\u000a<li><a href="#_14">\u771f\u5b9e\u4e16\u754c\u7684\u5e94\u7528</a><ul>\u000a<li><a href="#gevent-zeromq">Gevent ZeroMQ</a></li>\u000a<li><a href="#server">\u7b80\u5355server</a></li>\u000a<li><a href="#wsgi-servers">WSGI Servers</a></li>\u000a<li><a href="#server_1">\u6d41\u5f0fserver</a></li>\u000a<li><a href="#long-polling">Long Polling</a></li>\u000a<li><a href="#websockets">Websockets</a></li>\u000a<li><a href="#server_2">\u804a\u5929server</a></li>\u000a</ul>\u000a</li>\u000a</ul>\u000a</div>\u000a<h1 id="">\u4ecb\u7ecd</h1>\u000a<p>\u672c\u6307\u5357\u5047\u5b9a\u8bfb\u8005\u6709\u4e2d\u7ea7Python\u6c34\u5e73\uff0c\u4f46\u4e0d\u8981\u6c42\u6709\u5176\u5b83\u66f4\u591a\u7684\u77e5\u8bc6\uff0c\u4e0d\u671f\u5f85\u8bfb\u8005\u6709\u000a\u5e76\u53d1\u65b9\u9762\u7684\u77e5\u8bc6\u3002\u672c\u6307\u5357\u7684\u76ee\u6807\u5728\u4e8e\u7ed9\u4e88\u4f60\u9700\u8981\u7684\u5de5\u5177\u6765\u5f00\u59cb\u4f7f\u7528gevent\uff0c\u5e2e\u52a9\u4f60\u000a\u9a6f\u670d\u73b0\u6709\u7684\u5e76\u53d1\u95ee\u9898\uff0c\u5e76\u4ece\u4eca\u5f00\u59cb\u7f16\u5199\u5f02\u6b65\u5e94\u7528\u7a0b\u5e8f\u3002</p>\u000a<h3 id="_1">\u8d21\u732e\u8005</h3>\u000a<p>\u6309\u63d0\u4f9b\u8d21\u732e\u7684\u65f6\u95f4\u5148\u540e\u987a\u5e8f\u5217\u51fa\u5982\u4e0b:\u000a<a href="http://www.stephendiehl.com">Stephen Diehl</a>\u000a<a href="https://github.com/jerem">J&eacute;r&eacute;my Bethmont</a>\u000a<a href="https://github.com/sww">sww</a>\u000a<a href="https://github.com/brunoqc">Bruno Bigras</a>\u000a<a href="https://github.com/dripton">David Ripton</a>\u000a<a href="https://github.com/traviscline">Travis Cline</a>\u000a<a href="https://github.com/Lothiraldan">Boris Feld</a>\u000a<a href="https://github.com/youngsterxyf">youngsterxyf</a>\u000a<a href="https://github.com/ehebert">Eddie Hebert</a>\u000a<a href="http://notmyidea.org">Alexis Metaireau</a>\u000a<a href="https://github.com/djv">Daniel Velkov</a></p>\u000a<p>\u540c\u65f6\u611f\u8c22Denis Bilenko\u5199\u4e86gevent\u548c\u76f8\u5e94\u7684\u6307\u5bfc\u4ee5\u5f62\u6210\u672c\u6307\u5357\u3002</p>\u000a<p>\u8fd9\u662f\u4e00\u4e2a\u4ee5MIT\u8bb8\u53ef\u8bc1\u53d1\u5e03\u7684\u534f\u4f5c\u6587\u6863\u3002\u4f60\u60f3\u6dfb\u52a0\u4e00\u4e9b\u5185\u5bb9\uff1f\u6216\u770b\u89c1\u4e00\u4e2a\u6392\u7248\u9519\u8bef\uff1f\u000aFork\u4e00\u4e2a\u5206\u652f\u53d1\u5e03\u4e00\u4e2arequest\u5230\u000a<a href="https://github.com/sdiehl/gevent-tutorial">Github</a>.\u000a\u6211\u4eec\u6b22\u8fce\u4efb\u4f55\u8d21\u732e\u3002</p>\u000a<p>\u672c\u9875\u4e5f\u6709<a href="http://methane.github.com/gevent-tutorial-ja">\u65e5\u6587\u7248\u672c</a>\u3002</p>\u000a<h1 id="_2">\u6838\u5fc3\u90e8\u5206</h1>\u000a<h2 id="greenlets">Greenlets</h2>\u000a<p>\u5728gevent\u4e2d\u7528\u5230\u7684\u4e3b\u8981\u6a21\u5f0f\u662f<strong>Greenlet</strong>,\u000a\u5b83\u662f\u4ee5C\u6269\u5c55\u6a21\u5757\u5f62\u5f0f\u63a5\u5165Python\u7684\u8f7b\u91cf\u7ea7\u534f\u7a0b\u3002\u000aGreenlet\u5168\u90e8\u8fd0\u884c\u5728\u4e3b\u7a0b\u5e8f\u64cd\u4f5c\u7cfb\u7edf\u8fdb\u7a0b\u7684\u5185\u90e8\uff0c\u4f46\u5b83\u4eec\u88ab\u534f\u4f5c\u5f0f\u5730\u8c03\u5ea6\u3002</p>\u000a<blockquote>\u000a<p>\u5728\u4efb\u4f55\u65f6\u523b\uff0c\u53ea\u6709\u4e00\u4e2a\u534f\u7a0b\u5728\u8fd0\u884c\u3002</p>\u000a</blockquote>\u000a<p>\u8fd9\u4e0e<code>multiprocessing</code>\u6216<code>threading</code>\u7b49\u63d0\u4f9b\u771f\u6b63\u5e76\u884c\u6784\u9020\u7684\u5e93\u662f\u4e0d\u540c\u7684\u3002\u000a\u8fd9\u4e9b\u5e93\u8f6e\u8f6c\u4f7f\u7528\u64cd\u4f5c\u7cfb\u7edf\u8c03\u5ea6\u7684\u8fdb\u7a0b\u548c\u7ebf\u7a0b\uff0c\u662f\u771f\u6b63\u7684\u5e76\u884c\u3002</p>\u000a<h2 id="_3">\u540c\u6b65\u548c\u5f02\u6b65\u6267\u884c</h2>\u000a<p>\u5e76\u53d1\u7684\u6838\u5fc3\u601d\u60f3\u5728\u4e8e\uff0c\u5927\u7684\u4efb\u52a1\u53ef\u4ee5\u5206\u89e3\u6210\u4e00\u7cfb\u5217\u7684\u5b50\u4efb\u52a1\uff0c\u540e\u8005\u53ef\u4ee5\u88ab\u8c03\u5ea6\u6210\u000a\u540c\u65f6\u6267\u884c\u6216<em>\u5f02\u6b65</em>\u6267\u884c\uff0c\u800c\u4e0d\u662f\u4e00\u6b21\u4e00\u4e2a\u5730\u6216\u8005<em>\u540c\u6b65</em>\u5730\u6267\u884c\u3002\u4e24\u4e2a\u5b50\u4efb\u52a1\u4e4b\u95f4\u7684\u000a\u5207\u6362\u4e5f\u5c31\u662f<em>\u4e0a\u4e0b\u6587\u5207\u6362</em>\u3002</p>\u000a<p>\u5728gevent\u91cc\u9762\uff0c\u4e0a\u4e0b\u6587\u5207\u6362\u662f\u901a\u8fc7<em>yielding</em>\u6765\u5b8c\u6210\u7684. \u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u91cc\uff0c\u000a\u6211\u4eec\u6709\u4e24\u4e2a\u4e0a\u4e0b\u6587\uff0c\u901a\u8fc7\u8c03\u7528<code>gevent.sleep(0)</code>\uff0c\u5b83\u4eec\u5404\u81eayield\u5411\u5bf9\u65b9\u3002</p>\u000a<pre><code class="python">\u000aimport gevent\u000a\u000adef foo():\u000a    print('Running in foo')\u000a    gevent.sleep(0)\u000a    print('Explicit context switch to foo again')\u000a\u000adef bar():\u000a    print('Explicit context to bar')\u000a    gevent.sleep(0)\u000a    print('Implicit context switch back to bar')\u000a\u000agevent.joinall([\u000a    gevent.spawn(foo),\u000a    gevent.spawn(bar),\u000a])\u000a</pre>\u000a\u000a<p></code>\u000a<pre><code class="python">\u000aRunning in foo\u000aExplicit context to bar\u000aExplicit context switch to foo again\u000aImplicit context switch back to bar\u000a</pre></code></p>\u000a<p>\u4e0b\u56fe\u5c06\u63a7\u5236\u6d41\u5f62\u8c61\u5316\uff0c\u5c31\u50cf\u5728\u8c03\u8bd5\u5668\u4e2d\u5355\u6b65\u6267\u884c\u6574\u4e2a\u7a0b\u5e8f\uff0c\u4ee5\u8bf4\u660e\u4e0a\u4e0b\u6587\u5207\u6362\u5982\u4f55\u53d1\u751f\u3002</p>\u000a<p><img alt="Greenlet Control Flow" src="flow.gif" /></p>\u000a<p>\u5f53\u6211\u4eec\u5728\u53d7\u9650\u4e8e\u7f51\u7edc\u6216IO\u7684\u51fd\u6570\u4e2d\u4f7f\u7528gevent\uff0c\u8fd9\u4e9b\u51fd\u6570\u4f1a\u88ab\u534f\u4f5c\u5f0f\u7684\u8c03\u5ea6\uff0c\u000agevent\u7684\u771f\u6b63\u80fd\u529b\u4f1a\u5f97\u5230\u53d1\u6325\u3002Gevent\u5904\u7406\u4e86\u6240\u6709\u7684\u7ec6\u8282\uff0c\u000a\u6765\u4fdd\u8bc1\u4f60\u7684\u7f51\u7edc\u5e93\u4f1a\u5728\u53ef\u80fd\u7684\u65f6\u5019\uff0c\u9690\u5f0f\u4ea4\u51fagreenlet\u4e0a\u4e0b\u6587\u7684\u6267\u884c\u6743\u3002\u000a\u8fd9\u6837\u7684\u4e00\u79cd\u7528\u6cd5\u662f\u5982\u4f55\u5f3a\u5927\uff0c\u600e\u4e48\u5f3a\u8c03\u90fd\u4e0d\u4e3a\u8fc7\u3002\u6216\u8005\u6211\u4eec\u4e3e\u4e9b\u4f8b\u5b50\u6765\u8be6\u8ff0\u3002</p>\u000a<p>\u4e0b\u9762\u4f8b\u5b50\u4e2d\u7684<code>select()</code>\u51fd\u6570\u901a\u5e38\u662f\u4e00\u4e2a\u5728\u5404\u79cd\u6587\u4ef6\u63cf\u8ff0\u7b26\u4e0a\u8f6e\u8be2\u7684\u963b\u585e\u8c03\u7528\u3002</p>\u000a<pre><code class="python">\u000aimport time\u000aimport gevent\u000afrom gevent import select\u000a\u000astart = time.time()\u000atic = lambda: 'at %1.1f seconds' % (time.time() - start)\u000a\u000adef gr1():\u000a    # Busy waits for a second, but we don't want to stick around...\u000a    print('Started Polling: %s' % tic())\u000a    select.select([], [], [], 2)\u000a    print('Ended Polling: %s' % tic())\u000a\u000adef gr2():\u000a    # Busy waits for a second, but we don't want to stick around...\u000a    print('Started Polling: %s' % tic())\u000a    select.select([], [], [], 2)\u000a    print('Ended Polling: %s' % tic())\u000a\u000adef gr3():\u000a    print("Hey lets do some stuff while the greenlets poll, %s" % tic())\u000a    gevent.sleep(1)\u000a\u000agevent.joinall([\u000a    gevent.spawn(gr1),\u000a    gevent.spawn(gr2),\u000a    gevent.spawn(gr3),\u000a])\u000a</pre>\u000a\u000a<p></code>\u000a<pre><code class="python">\u000aStarted Polling: at 0.0 seconds\u000aStarted Polling: at 0.0 seconds\u000aHey lets do some stuff while the greenlets poll, at 0.0 seconds\u000aEnded Polling: at 2.0 seconds\u000aEnded Polling: at 2.0 seconds\u000a</pre></code></p>\u000a<p>\u4e0b\u9762\u662f\u53e6\u5916\u4e00\u4e2a\u591a\u5c11\u6709\u70b9\u4eba\u9020\u8272\u5f69\u7684\u4f8b\u5b50\uff0c\u5b9a\u4e49\u4e00\u4e2a<em>\u975e\u786e\u5b9a\u6027\u7684(non-deterministic)</em>\u000a\u7684<code>task</code>\u51fd\u6570(\u7ed9\u5b9a\u76f8\u540c\u8f93\u5165\u7684\u60c5\u51b5\u4e0b\uff0c\u5b83\u7684\u8f93\u51fa\u4e0d\u4fdd\u8bc1\u76f8\u540c)\u3002\u000a\u6b64\u4f8b\u4e2d\u6267\u884c\u8fd9\u4e2a\u51fd\u6570\u7684\u526f\u4f5c\u7528\u5c31\u662f\uff0c\u6bcf\u6b21task\u5728\u5b83\u7684\u6267\u884c\u8fc7\u7a0b\u4e2d\u90fd\u4f1a\u968f\u673a\u5730\u505c\u67d0\u4e9b\u79d2\u3002</p>\u000a<pre><code class="python">\u000aimport gevent\u000aimport random\u000a\u000adef task(pid):\u000a    """\u000a    Some non-deterministic task\u000a    """\u000a    gevent.sleep(random.randint(0,2)*0.001)\u000a    print('Task %s done' % pid)\u000a\u000adef synchronous():\u000a    for i in range(1,10):\u000a        task(i)\u000a\u000adef asynchronous():\u000a    threads = [gevent.spawn(task, i) for i in xrange(10)]\u000a    gevent.joinall(threads)\u000a\u000aprint('Synchronous:')\u000asynchronous()\u000a\u000aprint('Asynchronous:')\u000aasynchronous()\u000a</pre>\u000a\u000a<p></code>\u000a<pre><code class="python">\u000aSynchronous:\u000aTask 1 done\u000aTask 2 done\u000aTask 3 done\u000aTask 4 done\u000aTask 5 done\u000aTask 6 done\u000aTask 7 done\u000aTask 8 done\u000aTask 9 done\u000aAsynchronous:\u000aTask 3 done\u000aTask 7 done\u000aTask 9 done\u000aTask 2 done\u000aTask 4 done\u000aTask 1 done\u000aTask 8 done\u000aTask 6 done\u000aTask 0 done\u000aTask 5 done\u000a</pre></code></p>\u000a<p>\u4e0a\u4f8b\u4e2d\uff0c\u5728\u540c\u6b65\u7684\u90e8\u5206\uff0c\u6240\u6709\u7684task\u90fd\u540c\u6b65\u7684\u6267\u884c\uff0c\u000a\u7ed3\u679c\u5f53\u6bcf\u4e2atask\u5728\u6267\u884c\u65f6\u4e3b\u6d41\u7a0b\u88ab<em>\u963b\u585e</em>(\u4e3b\u6d41\u7a0b\u7684\u6267\u884c\u6682\u65f6\u505c\u4f4f)\u3002</p>\u000a<p>\u7a0b\u5e8f\u7684\u91cd\u8981\u90e8\u5206\u662f\u5c06task\u51fd\u6570\u5c01\u88c5\u5230Greenlet\u5185\u90e8\u7ebf\u7a0b\u7684<code>gevent.spawn</code>\u3002\u000a\u521d\u59cb\u5316\u7684greenlet\u5217\u8868\u5b58\u653e\u5728\u6570\u7ec4<code>threads</code>\u4e2d\uff0c\u6b64\u6570\u7ec4\u88ab\u4f20\u7ed9<code>gevent.joinall</code>\u000a\u51fd\u6570\uff0c\u540e\u8005\u963b\u585e\u5f53\u524d\u6d41\u7a0b\uff0c\u5e76\u6267\u884c\u6240\u6709\u7ed9\u5b9a\u7684greenlet\u3002\u6267\u884c\u6d41\u7a0b\u53ea\u4f1a\u5728\u000a\u6240\u6709greenlet\u6267\u884c\u5b8c\u540e\u624d\u4f1a\u7ee7\u7eed\u5411\u4e0b\u8d70\u3002</p>\u000a<p>\u8981\u91cd\u70b9\u7559\u610f\u7684\u662f\uff0c\u5f02\u6b65\u7684\u90e8\u5206\u672c\u8d28\u4e0a\u662f\u968f\u673a\u7684\uff0c\u800c\u4e14\u5f02\u6b65\u90e8\u5206\u7684\u6574\u4f53\u8fd0\u884c\u65f6\u95f4\u6bd4\u540c\u6b65\u000a\u8981\u5927\u5927\u51cf\u5c11\u3002\u4e8b\u5b9e\u4e0a\uff0c\u540c\u6b65\u90e8\u5206\u7684\u6700\u5927\u8fd0\u884c\u65f6\u95f4\uff0c\u5373\u662f\u6bcf\u4e2atask\u505c0.002\u79d2\uff0c\u7ed3\u679c\u6574\u4e2a\u000a\u961f\u5217\u8981\u505c0.02\u79d2\u3002\u800c\u5f02\u6b65\u90e8\u5206\u7684\u6700\u5927\u8fd0\u884c\u65f6\u95f4\u5927\u81f4\u4e3a0.002\u79d2\uff0c\u56e0\u4e3a\u6ca1\u6709\u4efb\u4f55\u4e00\u4e2atask\u4f1a\u000a\u963b\u585e\u5176\u5b83task\u7684\u6267\u884c\u3002</p>\u000a<p>\u4e00\u4e2a\u66f4\u5e38\u89c1\u7684\u5e94\u7528\u573a\u666f\uff0c\u5982\u5f02\u6b65\u5730\u5411\u670d\u52a1\u5668\u53d6\u6570\u636e\uff0c\u53d6\u6570\u636e\u64cd\u4f5c\u7684\u6267\u884c\u65f6\u95f4\u000a\u4f9d\u8d56\u4e8e\u53d1\u8d77\u53d6\u6570\u636e\u8bf7\u6c42\u65f6\u8fdc\u7aef\u670d\u52a1\u5668\u7684\u8d1f\u8f7d\uff0c\u5404\u4e2a\u8bf7\u6c42\u7684\u6267\u884c\u65f6\u95f4\u4f1a\u6709\u5dee\u522b\u3002</p>\u000a<pre><code class="python">import gevent.monkey\u000agevent.monkey.patch_socket()\u000a\u000aimport gevent\u000aimport urllib2\u000aimport simplejson as json\u000a\u000adef fetch(pid):\u000a    response = urllib2.urlopen('http://json-time.appspot.com/time.json')\u000a    result = response.read()\u000a    json_result = json.loads(result)\u000a    datetime = json_result['datetime']\u000a\u000a    print('Process %s: %s' % (pid, datetime))\u000a    return json_result['datetime']\u000a\u000adef synchronous():\u000a    for i in range(1,10):\u000a        fetch(i)\u000a\u000adef asynchronous():\u000a    threads = []\u000a    for i in range(1,10):\u000a        threads.append(gevent.spawn(fetch, i))\u000a    gevent.joinall(threads)\u000a\u000aprint('Synchronous:')\u000asynchronous()\u000a\u000aprint('Asynchronous:')\u000aasynchronous()\u000a</code>\u000a</pre>\u000a\u000a<h2 id="_4">\u786e\u5b9a\u6027</h2>\u000a<p>\u5c31\u50cf\u4e4b\u524d\u6240\u63d0\u5230\u7684\uff0cgreenlet\u5177\u6709\u786e\u5b9a\u6027\u3002\u5728\u76f8\u540c\u914d\u7f6e\u76f8\u540c\u8f93\u5165\u7684\u60c5\u51b5\u4e0b\uff0c\u5b83\u4eec\u603b\u662f\u000a\u4f1a\u4ea7\u751f\u76f8\u540c\u7684\u8f93\u51fa\u3002\u4e0b\u9762\u5c31\u6709\u4f8b\u5b50\uff0c\u6211\u4eec\u5728multiprocessing\u7684pool\u4e4b\u95f4\u6267\u884c\u4e00\u7cfb\u5217\u7684\u000a\u4efb\u52a1\uff0c\u4e0e\u5728gevent\u7684pool\u4e4b\u95f4\u6267\u884c\u4f5c\u6bd4\u8f83\u3002</p>\u000a<pre>\u000a<code class="python">\u000aimport time\u000a\u000adef echo(i):\u000a    time.sleep(0.001)\u000a    return i\u000a\u000a# Non Deterministic Process Pool\u000a\u000afrom multiprocessing.pool import Pool\u000a\u000ap = Pool(10)\u000arun1 = [a for a in p.imap_unordered(echo, xrange(10))]\u000arun2 = [a for a in p.imap_unordered(echo, xrange(10))]\u000arun3 = [a for a in p.imap_unordered(echo, xrange(10))]\u000arun4 = [a for a in p.imap_unordered(echo, xrange(10))]\u000a\u000aprint(run1 == run2 == run3 == run4)\u000a\u000a# Deterministic Gevent Pool\u000a\u000afrom gevent.pool import Pool\u000a\u000ap = Pool(10)\u000arun1 = [a for a in p.imap_unordered(echo, xrange(10))]\u000arun2 = [a for a in p.imap_unordered(echo, xrange(10))]\u000arun3 = [a for a in p.imap_unordered(echo, xrange(10))]\u000arun4 = [a for a in p.imap_unordered(echo, xrange(10))]\u000a\u000aprint(run1 == run2 == run3 == run4)\u000a</code>\u000a</pre>\u000a\u000a<pre>\u000a<code class="python">False\u000aTrue</code>\u000a</pre>\u000a\u000a<p>\u5373\u4f7fgevent\u901a\u5e38\u5e26\u6709\u786e\u5b9a\u6027\uff0c\u5f53\u5f00\u59cb\u4e0e\u5982socket\u6216\u6587\u4ef6\u7b49\u5916\u90e8\u670d\u52a1\u4ea4\u4e92\u65f6\uff0c\u000a\u4e0d\u786e\u5b9a\u6027\u4e5f\u53ef\u80fd\u6e9c\u8fdb\u4f60\u7684\u7a0b\u5e8f\u4e2d\u3002\u56e0\u6b64\u5c3d\u7ba1gevent\u7ebf\u7a0b\u662f\u4e00\u79cd\u201c\u786e\u5b9a\u7684\u5e76\u53d1\u201d\u5f62\u5f0f\uff0c\u000a\u4f7f\u7528\u5b83\u4ecd\u7136\u53ef\u80fd\u4f1a\u9047\u5230\u50cf\u4f7f\u7528POSIX\u7ebf\u7a0b\u6216\u8fdb\u7a0b\u65f6\u9047\u5230\u7684\u90a3\u4e9b\u95ee\u9898\u3002</p>\u000a<p>\u6d89\u53ca\u5e76\u53d1\u957f\u671f\u5b58\u5728\u7684\u95ee\u9898\u5c31\u662f<em>\u7ade\u4e89\u6761\u4ef6(race condition)</em>\u3002\u7b80\u5355\u6765\u8bf4\uff0c\u000a\u5f53\u4e24\u4e2a\u5e76\u53d1\u7ebf\u7a0b/\u8fdb\u7a0b\u90fd\u4f9d\u8d56\u4e8e\u67d0\u4e2a\u5171\u4eab\u8d44\u6e90\u540c\u65f6\u90fd\u5c1d\u8bd5\u53bb\u4fee\u6539\u5b83\u7684\u65f6\u5019\uff0c\u000a\u5c31\u4f1a\u51fa\u73b0\u7ade\u4e89\u6761\u4ef6\u3002\u8fd9\u4f1a\u5bfc\u81f4\u8d44\u6e90\u4fee\u6539\u7684\u7ed3\u679c\u72b6\u6001\u4f9d\u8d56\u4e8e\u65f6\u95f4\u548c\u6267\u884c\u987a\u5e8f\u3002\u000a\u8fd9\u662f\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u4e00\u822c\u4f1a\u505a\u5f88\u591a\u52aa\u529b\u5c1d\u8bd5\u907f\u514d\u7ade\u4e89\u6761\u4ef6\uff0c\u000a\u56e0\u4e3a\u5b83\u4f1a\u5bfc\u81f4\u6574\u4e2a\u7a0b\u5e8f\u884c\u4e3a\u53d8\u5f97\u4e0d\u786e\u5b9a\u3002</p>\u000a<p>\u6700\u597d\u7684\u529e\u6cd5\u662f\u59cb\u7ec8\u907f\u514d\u6240\u6709\u5168\u5c40\u7684\u72b6\u6001\u3002\u5168\u5c40\u72b6\u6001\u548c\u5bfc\u5165\u65f6(import-time)\u526f\u4f5c\u7528\u603b\u662f\u4f1a\u000a\u53cd\u54ac\u4f60\u4e00\u53e3\uff01</p>\u000a<h2 id="greenlets_1">\u521b\u5efaGreenlets</h2>\u000a<p>gevent\u5bf9Greenlet\u521d\u59cb\u5316\u63d0\u4f9b\u4e86\u4e00\u4e9b\u5c01\u88c5\uff0c\u6700\u5e38\u7528\u7684\u4f7f\u7528\u6a21\u677f\u4e4b\u4e00\u6709</p>\u000a<pre><code class="python">\u000aimport gevent\u000afrom gevent import Greenlet\u000a\u000adef foo(message, n):\u000a    """\u000a    Each thread will be passed the message, and n arguments\u000a    in its initialization.\u000a    """\u000a    gevent.sleep(n)\u000a    print(message)\u000a\u000a# Initialize a new Greenlet instance running the named function\u000a# foo\u000athread1 = Greenlet.spawn(foo, "Hello", 1)\u000a\u000a# Wrapper for creating and running a new Greenlet from the named\u000a# function foo, with the passed arguments\u000athread2 = gevent.spawn(foo, "I live!", 2)\u000a\u000a# Lambda expressions\u000athread3 = gevent.spawn(lambda x: (x+1), 2)\u000a\u000athreads = [thread1, thread2, thread3]\u000a\u000a# Block until all threads complete.\u000agevent.joinall(threads)\u000a</pre>\u000a\u000a<p></code>\u000a<pre><code class="python">\u000aHello\u000aI live!\u000a</pre></code></p>\u000a<p>\u9664\u4f7f\u7528\u57fa\u672c\u7684Greenlet\u7c7b\u4e4b\u5916\uff0c\u4f60\u4e5f\u53ef\u4ee5\u5b50\u7c7b\u5316Greenlet\u7c7b\uff0c\u91cd\u8f7d\u5b83\u7684<code>_run</code>\u65b9\u6cd5\u3002</p>\u000a<pre><code class="python">\u000aimport gevent\u000afrom gevent import Greenlet\u000a\u000aclass MyGreenlet(Greenlet):\u000a\u000a    def __init__(self, message, n):\u000a        Greenlet.__init__(self)\u000a        self.message = message\u000a        self.n = n\u000a\u000a    def _run(self):\u000a        print(self.message)\u000a        gevent.sleep(self.n)\u000a\u000ag = MyGreenlet("Hi there!", 3)\u000ag.start()\u000ag.join()\u000a</pre>\u000a\u000a<p></code>\u000a<pre><code class="python">\u000aHi there!\u000a</pre></code></p>\u000a<h2 id="greenlet">Greenlet\u72b6\u6001</h2>\u000a<p>\u5c31\u50cf\u4efb\u4f55\u5176\u4ed6\u6210\u6bb5\u4ee3\u7801\uff0cGreenlet\u4e5f\u53ef\u80fd\u4ee5\u4e0d\u540c\u7684\u65b9\u5f0f\u8fd0\u884c\u5931\u8d25\u3002\u000aGreenlet\u53ef\u80fd\u672a\u80fd\u6210\u529f\u629b\u51fa\u5f02\u5e38\uff0c\u4e0d\u80fd\u505c\u6b62\u8fd0\u884c\uff0c\u6216\u6d88\u8017\u4e86\u592a\u591a\u7684\u7cfb\u7edf\u8d44\u6e90\u3002</p>\u000a<p>\u4e00\u4e2agreenlet\u7684\u72b6\u6001\u901a\u5e38\u662f\u4e00\u4e2a\u4f9d\u8d56\u4e8e\u65f6\u95f4\u7684\u53c2\u6570\u3002\u5728greenlet\u4e2d\u6709\u4e00\u4e9b\u6807\u5fd7\uff0c\u000a\u8ba9\u4f60\u53ef\u4ee5\u76d1\u89c6\u5b83\u7684\u7ebf\u7a0b\u5185\u90e8\u72b6\u6001\uff1a</p>\u000a<ul>\u000a<li><code>started</code> -- Boolean, \u6307\u793a\u6b64Greenlet\u662f\u5426\u5df2\u7ecf\u542f\u52a8</li>\u000a<li><code>ready()</code> -- Boolean, \u6307\u793a\u6b64Greenlet\u662f\u5426\u5df2\u7ecf\u505c\u6b62</li>\u000a<li><code>successful()</code> -- Boolean, \u6307\u793a\u6b64Greenlet\u662f\u5426\u5df2\u7ecf\u505c\u6b62\u800c\u4e14\u6ca1\u629b\u5f02\u5e38</li>\u000a<li><code>value</code> -- \u4efb\u610f\u503c, \u6b64Greenlet\u4ee3\u7801\u8fd4\u56de\u7684\u503c</li>\u000a<li><code>exception</code> -- \u5f02\u5e38, \u6b64Greenlet\u5185\u629b\u51fa\u7684\u672a\u6355\u83b7\u5f02\u5e38</li>\u000a</ul>\u000a<pre><code class="python">\u000aimport gevent\u000a\u000adef win():\u000a    return 'You win!'\u000a\u000adef fail():\u000a    raise Exception('You fail at failing.')\u000a\u000awinner = gevent.spawn(win)\u000aloser = gevent.spawn(fail)\u000a\u000aprint(winner.started) # True\u000aprint(loser.started)  # True\u000a\u000a# Exceptions raised in the Greenlet, stay inside the Greenlet.\u000atry:\u000a    gevent.joinall([winner, loser])\u000aexcept Exception as e:\u000a    print('This will never be reached')\u000a\u000aprint(winner.value) # 'You win!'\u000aprint(loser.value)  # None\u000a\u000aprint(winner.ready()) # True\u000aprint(loser.ready())  # True\u000a\u000aprint(winner.successful()) # True\u000aprint(loser.successful())  # False\u000a\u000a# The exception raised in fail, will not propogate outside the\u000a# greenlet. A stack trace will be printed to stdout but it\u000a# will not unwind the stack of the parent.\u000a\u000aprint(loser.exception)\u000a\u000a# It is possible though to raise the exception again outside\u000a# raise loser.exception\u000a# or with\u000a# loser.get()\u000a</pre>\u000a\u000a<p></code>\u000a<pre><code class="python">\u000aTrue\u000aTrue\u000aYou win!\u000aNone\u000aTrue\u000aTrue\u000aTrue\u000aFalse\u000aYou fail at failing.\u000a</pre></code></p>\u000a<h2 id="_5">\u7a0b\u5e8f\u505c\u6b62</h2>\u000a<p>\u5f53\u4e3b\u7a0b\u5e8f(main program)\u6536\u5230\u4e00\u4e2aSIGQUIT\u4fe1\u53f7\u65f6\uff0c\u4e0d\u80fd\u6210\u529f\u505ayield\u64cd\u4f5c\u7684\u000aGreenlet\u53ef\u80fd\u4f1a\u4ee4\u610f\u5916\u5730\u6302\u8d77\u7a0b\u5e8f\u7684\u6267\u884c\u3002\u8fd9\u5bfc\u81f4\u4e86\u6240\u8c13\u7684\u50f5\u5c38\u8fdb\u7a0b\uff0c\u000a\u5b83\u9700\u8981\u5728Python\u89e3\u91ca\u5668\u4e4b\u5916\u88abkill\u6389\u3002</p>\u000a<p>\u5bf9\u6b64\uff0c\u4e00\u4e2a\u901a\u7528\u7684\u5904\u7406\u6a21\u5f0f\u5c31\u662f\u5728\u4e3b\u7a0b\u5e8f\u4e2d\u76d1\u542cSIGQUIT\u4fe1\u53f7\uff0c\u5728\u7a0b\u5e8f\u9000\u51fa\u000a\u8c03\u7528<code>gevent.shutdown</code>\u3002</p>\u000a<pre>\u000a<code class="python">import gevent\u000aimport signal\u000a\u000adef run_forever():\u000a    gevent.sleep(1000)\u000a\u000aif __name__ == '__main__':\u000a    gevent.signal(signal.SIGQUIT, gevent.shutdown)\u000a    thread = gevent.spawn(run_forever)\u000a    thread.join()\u000a</code>\u000a</pre>\u000a\u000a<h2 id="_6">\u8d85\u65f6</h2>\u000a<p>\u8d85\u65f6\u662f\u4e00\u79cd\u5bf9\u4e00\u5757\u4ee3\u7801\u6216\u4e00\u4e2aGreenlet\u7684\u8fd0\u884c\u65f6\u95f4\u7684\u7ea6\u675f\u3002</p>\u000a<pre>\u000a<code class="python">\u000aimport gevent\u000afrom gevent import Timeout\u000a\u000aseconds = 10\u000a\u000atimeout = Timeout(seconds)\u000atimeout.start()\u000a\u000adef wait():\u000a    gevent.sleep(10)\u000a\u000atry:\u000a    gevent.spawn(wait).join()\u000aexcept Timeout:\u000a    print('Could not complete')\u000a\u000a</code>\u000a</pre>\u000a\u000a<p>\u8d85\u65f6\u7c7b\u4e5f\u53ef\u4ee5\u7528\u5728\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668(context manager)\u4e2d, \u4e5f\u5c31\u662fwith\u8bed\u53e5\u5185\u3002</p>\u000a<pre>\u000a<code class="python">import gevent\u000afrom gevent import Timeout\u000a\u000atime_to_wait = 5 # seconds\u000a\u000aclass TooLong(Exception):\u000a    pass\u000a\u000awith Timeout(time_to_wait, TooLong):\u000a    gevent.sleep(10)\u000a</code>\u000a</pre>\u000a\u000a<p>\u53e6\u5916\uff0c\u5bf9\u5404\u79cdGreenlet\u548c\u6570\u636e\u7ed3\u6784\u76f8\u5173\u7684\u8c03\u7528\uff0cgevent\u4e5f\u63d0\u4f9b\u4e86\u8d85\u65f6\u53c2\u6570\u3002\u000a\u4f8b\u5982\uff1a</p>\u000a<pre><code class="python">\u000aimport gevent\u000afrom gevent import Timeout\u000a\u000adef wait():\u000a    gevent.sleep(2)\u000a\u000atimer = Timeout(1).start()\u000athread1 = gevent.spawn(wait)\u000a\u000atry:\u000a    thread1.join(timeout=timer)\u000aexcept Timeout:\u000a    print('Thread 1 timed out')\u000a\u000a# --\u000a\u000atimer = Timeout.start_new(1)\u000athread2 = gevent.spawn(wait)\u000a\u000atry:\u000a    thread2.get(timeout=timer)\u000aexcept Timeout:\u000a    print('Thread 2 timed out')\u000a\u000a# --\u000a\u000atry:\u000a    gevent.with_timeout(1, wait)\u000aexcept Timeout:\u000a    print('Thread 3 timed out')\u000a\u000a</pre>\u000a\u000a<p></code>\u000a<pre><code class="python">\u000aThread 1 timed out\u000aThread 2 timed out\u000aThread 3 timed out\u000a</pre></code></p>\u000a<h2 id="monkey-patching">\u7334\u5b50\u8865\u4e01(Monkey patching)</h2>\u000a<p>\u6211\u4eec\u73b0\u5728\u6765\u5230gevent\u7684\u6b7b\u89d2\u4e86. \u5728\u6b64\u4e4b\u524d\uff0c\u6211\u5df2\u7ecf\u907f\u514d\u63d0\u5230\u7334\u5b50\u8865\u4e01(monkey patching)\u000a\u4ee5\u5c1d\u8bd5\u4f7fgevent\u8fd9\u4e2a\u5f3a\u5927\u7684\u534f\u7a0b\u6a21\u578b\u53d8\u5f97\u751f\u52a8\u6709\u8da3\uff0c\u4f46\u73b0\u5728\u5230\u4e86\u8ba8\u8bba\u7334\u5b50\u8865\u4e01\u7684\u9ed1\u8272\u827a\u672f\u000a\u7684\u65f6\u5019\u4e86\u3002\u4f60\u4e4b\u524d\u53ef\u80fd\u6ce8\u610f\u5230\u6211\u4eec\u63d0\u5230\u4e86<code>monkey.patch_socket()</code>\u8fd9\u4e2a\u547d\u4ee4\uff0c\u8fd9\u4e2a\u000a\u7eaf\u7cb9\u526f\u4f5c\u7528\u547d\u4ee4\u662f\u7528\u6765\u6539\u53d8\u6807\u51c6socket\u5e93\u7684\u3002</p>\u000a<pre>\u000a<code class="python">import socket\u000aprint(socket.socket)\u000a\u000aprint("After monkey patch")\u000afrom gevent import monkey\u000amonkey.patch_socket()\u000aprint(socket.socket)\u000a\u000aimport select\u000aprint(select.select)\u000amonkey.patch_select()\u000aprint("After monkey patch")\u000aprint(select.select)\u000a</code>\u000a</pre>\u000a\u000a<pre>\u000a<code class="python">class 'socket.socket'\u000aAfter monkey patch\u000aclass 'gevent.socket.socket'\u000a\u000abuilt-in function select\u000aAfter monkey patch\u000afunction select at 0x1924de8\u000a</code>\u000a</pre>\u000a\u000a<p>Python\u7684\u8fd0\u884c\u73af\u5883\u5141\u8bb8\u6211\u4eec\u5728\u8fd0\u884c\u65f6\u4fee\u6539\u5927\u90e8\u5206\u7684\u5bf9\u8c61\uff0c\u5305\u62ec\u6a21\u5757\uff0c\u7c7b\u751a\u81f3\u51fd\u6570\u3002\u000a\u8fd9\u662f\u4e2a\u4e00\u822c\u8bf4\u6765\u4ee4\u4eba\u60ca\u5947\u7684\u574f\u4e3b\u610f\uff0c\u56e0\u4e3a\u5b83\u521b\u9020\u4e86\u201c\u9690\u5f0f\u7684\u526f\u4f5c\u7528\u201d\uff0c\u5982\u679c\u51fa\u73b0\u95ee\u9898\u000a\u5b83\u5f88\u591a\u65f6\u5019\u662f\u6781\u96be\u8c03\u8bd5\u7684\u3002\u867d\u7136\u5982\u6b64\uff0c\u5728\u6781\u7aef\u60c5\u51b5\u4e0b\u5f53\u4e00\u4e2a\u5e93\u9700\u8981\u4fee\u6539Python\u672c\u8eab\u000a\u7684\u57fa\u7840\u884c\u4e3a\u7684\u65f6\u5019\uff0c\u7334\u5b50\u8865\u4e01\u5c31\u6d3e\u4e0a\u7528\u573a\u4e86\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cgevent\u80fd\u591f\u000a\u4fee\u6539\u6807\u51c6\u5e93\u91cc\u9762\u5927\u90e8\u5206\u7684\u963b\u585e\u5f0f\u7cfb\u7edf\u8c03\u7528\uff0c\u5305\u62ec<code>socket</code>\u3001<code>ssl</code>\u3001<code>threading</code>\u548c\u000a<code>select</code>\u7b49\u6a21\u5757\uff0c\u800c\u53d8\u4e3a\u534f\u4f5c\u5f0f\u8fd0\u884c\u3002</p>\u000a<p>\u4f8b\u5982\uff0cRedis\u7684python\u7ed1\u5b9a\u4e00\u822c\u4f7f\u7528\u5e38\u89c4\u7684tcp socket\u6765\u4e0e<code>redis-server</code>\u5b9e\u4f8b\u901a\u4fe1\u3002\u000a\u901a\u8fc7\u7b80\u5355\u5730\u8c03\u7528<code>gevent.monkey.patch_all()</code>\uff0c\u53ef\u4ee5\u4f7f\u5f97redis\u7684\u7ed1\u5b9a\u534f\u4f5c\u5f0f\u7684\u8c03\u5ea6\u000a\u8bf7\u6c42\uff0c\u4e0egevent\u6808\u7684\u5176\u5b83\u90e8\u5206\u4e00\u8d77\u5de5\u4f5c\u3002</p>\u000a<p>\u8fd9\u8ba9\u6211\u4eec\u53ef\u4ee5\u5c06\u4e00\u822c\u4e0d\u80fd\u4e0egevent\u5171\u540c\u5de5\u4f5c\u7684\u5e93\u7ed3\u5408\u8d77\u6765\uff0c\u800c\u4e0d\u7528\u5199\u54ea\u6015\u4e00\u884c\u4ee3\u7801\u3002\u000a\u867d\u7136\u7334\u5b50\u8865\u4e01\u4ecd\u7136\u662f\u90aa\u6076\u7684(evil)\uff0c\u4f46\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5b83\u662f\u201c\u6709\u7528\u7684\u90aa\u6076(useful evil)\u201d\u3002</p>\u000a<h1 id="_7">\u6570\u636e\u7ed3\u6784</h1>\u000a<h2 id="_8">\u4e8b\u4ef6</h2>\u000a<p>\u4e8b\u4ef6(event)\u662f\u4e00\u4e2a\u5728Greenlet\u4e4b\u95f4\u5f02\u6b65\u901a\u4fe1\u7684\u5f62\u5f0f\u3002</p>\u000a<pre>\u000a<code class="python">import gevent\u000afrom gevent.event import Event\u000a\u000a'''\u000aIllustrates the use of events\u000a'''\u000a\u000aevt = Event()\u000a\u000adef setter():\u000a    '''After 3 seconds, wake all threads waiting on the value of evt'''\u000a    print('A: Hey wait for me, I have to do something')\u000a    gevent.sleep(3)\u000a    print("Ok, I'm done")\u000a    evt.set()\u000a\u000adef waiter():\u000a    '''After 3 seconds the get call will unblock'''\u000a    print("I'll wait for you")\u000a    evt.wait()  # blocking\u000a    print("It's about time")\u000a\u000adef main():\u000a    gevent.joinall([\u000a        gevent.spawn(setter),\u000a        gevent.spawn(waiter),\u000a        gevent.spawn(waiter),\u000a        gevent.spawn(waiter),\u000a        gevent.spawn(waiter),\u000a        gevent.spawn(waiter)\u000a    ])\u000a\u000aif __name__ == '__main__': main()\u000a\u000a</code>\u000a</pre>\u000a\u000a<p>\u4e8b\u4ef6\u5bf9\u8c61\u7684\u4e00\u4e2a\u6269\u5c55\u662fAsyncResult\uff0c\u5b83\u5141\u8bb8\u4f60\u5728\u5524\u9192\u8c03\u7528\u4e0a\u9644\u52a0\u4e00\u4e2a\u503c\u3002\u000a\u5b83\u6709\u65f6\u4e5f\u88ab\u79f0\u4f5c\u662ffuture\u6216defered\uff0c\u56e0\u4e3a\u5b83\u6301\u6709\u4e00\u4e2a\u6307\u5411\u5c06\u6765\u4efb\u610f\u65f6\u95f4\u53ef\u8bbe\u7f6e\u000a\u4e3a\u4efb\u4f55\u503c\u7684\u5f15\u7528\u3002</p>\u000a<pre>\u000a<code class="python">import gevent\u000afrom gevent.event import AsyncResult\u000aa = AsyncResult()\u000a\u000adef setter():\u000a    """\u000a    After 3 seconds set the result of a.\u000a    """\u000a    gevent.sleep(3)\u000a    a.set('Hello!')\u000a\u000adef waiter():\u000a    """\u000a    After 3 seconds the get call will unblock after the setter\u000a    puts a value into the AsyncResult.\u000a    """\u000a    print(a.get())\u000a\u000agevent.joinall([\u000a    gevent.spawn(setter),\u000a    gevent.spawn(waiter),\u000a])\u000a\u000a</code>\u000a</pre>\u000a\u000a<h2 id="_9">\u961f\u5217</h2>\u000a<p>\u961f\u5217\u662f\u4e00\u4e2a\u6392\u5e8f\u7684\u6570\u636e\u96c6\u5408\uff0c\u5b83\u6709\u5e38\u89c1\u7684<code>put</code> / <code>get</code>\u64cd\u4f5c\uff0c\u000a\u4f46\u662f\u5b83\u662f\u4ee5\u5728Greenlet\u4e4b\u95f4\u53ef\u4ee5\u5b89\u5168\u64cd\u4f5c\u7684\u65b9\u5f0f\u6765\u5b9e\u73b0\u7684\u3002</p>\u000a<p>\u4e3e\u4f8b\u6765\u8bf4\uff0c\u5982\u679c\u4e00\u4e2aGreenlet\u4ece\u961f\u5217\u4e2d\u53d6\u51fa\u4e00\u9879\uff0c\u6b64\u9879\u5c31\u4e0d\u4f1a\u88ab\u000a\u540c\u65f6\u6267\u884c\u7684\u5176\u5b83Greenlet\u518d\u53d6\u5230\u4e86\u3002</p>\u000a<pre><code class="python">\u000aimport gevent\u000afrom gevent.queue import Queue\u000a\u000atasks = Queue()\u000a\u000adef worker(n):\u000a    while not tasks.empty():\u000a        task = tasks.get()\u000a        print('Worker %s got task %s' % (n, task))\u000a        gevent.sleep(0)\u000a\u000a    print('Quitting time!')\u000a\u000adef boss():\u000a    for i in xrange(1,25):\u000a        tasks.put_nowait(i)\u000a\u000agevent.spawn(boss).join()\u000a\u000agevent.joinall([\u000a    gevent.spawn(worker, 'steve'),\u000a    gevent.spawn(worker, 'john'),\u000a    gevent.spawn(worker, 'nancy'),\u000a])\u000a</pre>\u000a\u000a<p></code>\u000a<pre><code class="python">\u000aWorker steve got task 1\u000aWorker john got task 2\u000aWorker nancy got task 3\u000aWorker steve got task 4\u000aWorker nancy got task 5\u000aWorker john got task 6\u000aWorker steve got task 7\u000aWorker john got task 8\u000aWorker nancy got task 9\u000aWorker steve got task 10\u000aWorker nancy got task 11\u000aWorker john got task 12\u000aWorker steve got task 13\u000aWorker john got task 14\u000aWorker nancy got task 15\u000aWorker steve got task 16\u000aWorker nancy got task 17\u000aWorker john got task 18\u000aWorker steve got task 19\u000aWorker john got task 20\u000aWorker nancy got task 21\u000aWorker steve got task 22\u000aWorker nancy got task 23\u000aWorker john got task 24\u000aQuitting time!\u000aQuitting time!\u000aQuitting time!\u000a</pre></code></p>\u000a<p>\u5982\u679c\u9700\u8981\uff0c\u961f\u5217\u4e5f\u53ef\u4ee5\u963b\u585e\u5728<code>put</code>\u6216<code>get</code>\u64cd\u4f5c\u4e0a\u3002</p>\u000a<p><code>put</code>\u548c<code>get</code>\u64cd\u4f5c\u90fd\u6709\u975e\u963b\u585e\u7684\u7248\u672c\uff0c<code>put_nowait</code>\u548c<code>get_nowait</code>\u4e0d\u4f1a\u963b\u585e\uff0c\u000a\u7136\u800c\u5728\u64cd\u4f5c\u4e0d\u80fd\u5b8c\u6210\u65f6\u629b\u51fa<code>gevent.queue.Empty</code>\u6216<code>gevent.queue.Full</code>\u5f02\u5e38\u3002</p>\u000a<p>\u5728\u4e0b\u9762\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u8ba9boss\u4e0e\u591a\u4e2aworker\u540c\u65f6\u8fd0\u884c\uff0c\u5e76\u9650\u5236\u4e86queue\u4e0d\u80fd\u653e\u5165\u591a\u4e8e3\u4e2a\u5143\u7d20\u3002\u000a\u8fd9\u4e2a\u9650\u5236\u610f\u5473\u7740\uff0c\u76f4\u5230queue\u6709\u7a7a\u4f59\u7a7a\u95f4\u4e4b\u95f4\uff0c<code>put</code>\u64cd\u4f5c\u4f1a\u88ab\u963b\u585e\u3002\u76f8\u53cd\u5730\uff0c\u5982\u679c\u961f\u5217\u4e2d\u000a\u6ca1\u6709\u5143\u7d20\uff0c<code>get</code>\u64cd\u4f5c\u4f1a\u88ab\u963b\u585e\u3002\u5b83\u540c\u65f6\u5e26\u4e00\u4e2atimeout\u53c2\u6570\uff0c\u5141\u8bb8\u5728\u8d85\u65f6\u65f6\u95f4\u5185\u5982\u679c\u000a\u961f\u5217\u6ca1\u6709\u5143\u7d20\u65e0\u6cd5\u5b8c\u6210\u64cd\u4f5c\u5c31\u629b\u51fa<code>gevent.queue.Empty</code>\u5f02\u5e38\u3002</p>\u000a<pre><code class="python">\u000aimport gevent\u000afrom gevent.queue import Queue, Empty\u000a\u000atasks = Queue(maxsize=3)\u000a\u000adef worker(n):\u000a    try:\u000a        while True:\u000a            task = tasks.get(timeout=1) # decrements queue size by 1\u000a            print('Worker %s got task %s' % (n, task))\u000a            gevent.sleep(0)\u000a    except Empty:\u000a        print('Quitting time!')\u000a\u000adef boss():\u000a    """\u000a    Boss will wait to hand out work until a individual worker is\u000a    free since the maxsize of the task queue is 3.\u000a    """\u000a\u000a    for i in xrange(1,10):\u000a        tasks.put(i)\u000a    print('Assigned all work in iteration 1')\u000a\u000a    for i in xrange(10,20):\u000a        tasks.put(i)\u000a    print('Assigned all work in iteration 2')\u000a\u000agevent.joinall([\u000a    gevent.spawn(boss),\u000a    gevent.spawn(worker, 'steve'),\u000a    gevent.spawn(worker, 'john'),\u000a    gevent.spawn(worker, 'bob'),\u000a])\u000a</pre>\u000a\u000a<p></code>\u000a<pre><code class="python">\u000aWorker steve got task 1\u000aWorker john got task 2\u000aWorker bob got task 3\u000aWorker steve got task 4\u000aWorker bob got task 5\u000aWorker john got task 6\u000aAssigned all work in iteration 1\u000aWorker steve got task 7\u000aWorker john got task 8\u000aWorker bob got task 9\u000aWorker steve got task 10\u000aWorker bob got task 11\u000aWorker john got task 12\u000aWorker steve got task 13\u000aWorker john got task 14\u000aWorker bob got task 15\u000aWorker steve got task 16\u000aWorker bob got task 17\u000aWorker john got task 18\u000aAssigned all work in iteration 2\u000aWorker steve got task 19\u000aQuitting time!\u000aQuitting time!\u000aQuitting time!\u000a</pre></code></p>\u000a<h2 id="_10">\u7ec4\u548c\u6c60</h2>\u000a<p>\u7ec4(group)\u662f\u4e00\u4e2a\u8fd0\u884c\u4e2dgreenlet\u7684\u96c6\u5408\uff0c\u96c6\u5408\u4e2d\u7684greenlet\u50cf\u4e00\u4e2a\u7ec4\u4e00\u6837\u000a\u4f1a\u88ab\u5171\u540c\u7ba1\u7406\u548c\u8c03\u5ea6\u3002 \u5b83\u4e5f\u517c\u9970\u4e86\u50cfPython\u7684<code>multiprocessing</code>\u5e93\u90a3\u6837\u7684\u000a\u5e73\u884c\u8c03\u5ea6\u5668\u7684\u89d2\u8272\u3002</p>\u000a<pre><code class="python">\u000aimport gevent\u000afrom gevent.pool import Group\u000a\u000adef talk(msg):\u000a    for i in xrange(3):\u000a        print(msg)\u000a\u000ag1 = gevent.spawn(talk, 'bar')\u000ag2 = gevent.spawn(talk, 'foo')\u000ag3 = gevent.spawn(talk, 'fizz')\u000a\u000agroup = Group()\u000agroup.add(g1)\u000agroup.add(g2)\u000agroup.join()\u000a\u000agroup.add(g3)\u000agroup.join()\u000a</pre>\u000a\u000a<p></code>\u000a<pre><code class="python">\u000abar\u000abar\u000abar\u000afoo\u000afoo\u000afoo\u000afizz\u000afizz\u000afizz\u000a</pre></code></p>\u000a<p>\u5728\u7ba1\u7406\u5f02\u6b65\u4efb\u52a1\u7684\u5206\u7ec4\u4e0a\u5b83\u662f\u975e\u5e38\u6709\u7528\u7684\u3002</p>\u000a<p>\u5c31\u50cf\u4e0a\u9762\u6240\u8bf4\uff0c<code>Group</code>\u4e5f\u4ee5\u4e0d\u540c\u7684\u65b9\u5f0f\u4e3a\u5206\u7ec4greenlet/\u5206\u53d1\u5de5\u4f5c\u548c\u6536\u96c6\u5b83\u4eec\u7684\u7ed3\u679c\u4e5f\u63d0\u4f9b\u4e86API\u3002</p>\u000a<pre><code class="python">\u000aimport gevent\u000afrom gevent import getcurrent\u000afrom gevent.pool import Group\u000a\u000agroup = Group()\u000a\u000adef hello_from(n):\u000a    print('Size of group %s' % len(group))\u000a    print('Hello from Greenlet %s' % id(getcurrent()))\u000a\u000agroup.map(hello_from, xrange(3))\u000a\u000adef intensive(n):\u000a    gevent.sleep(3 - n)\u000a    return 'task', n\u000a\u000aprint('Ordered')\u000a\u000aogroup = Group()\u000afor i in ogroup.imap(intensive, xrange(3)):\u000a    print(i)\u000a\u000aprint('Unordered')\u000a\u000aigroup = Group()\u000afor i in igroup.imap_unordered(intensive, xrange(3)):\u000a    print(i)\u000a\u000a</pre>\u000a\u000a<p></code>\u000a<pre><code class="python">\u000aSize of group 3\u000aHello from Greenlet 31048720\u000aSize of group 3\u000aHello from Greenlet 31049200\u000aSize of group 3\u000aHello from Greenlet 31049040\u000aOrdered\u000a('task', 0)\u000a('task', 1)\u000a('task', 2)\u000aUnordered\u000a('task', 2)\u000a('task', 1)\u000a('task', 0)\u000a</pre></code></p>\u000a<p>\u6c60(pool)\u662f\u4e00\u4e2a\u4e3a\u5904\u7406\u6570\u91cf\u53d8\u5316\u5e76\u4e14\u9700\u8981\u9650\u5236\u5e76\u53d1\u7684greenlet\u800c\u8bbe\u8ba1\u7684\u7ed3\u6784\u3002\u000a\u5728\u9700\u8981\u5e76\u884c\u5730\u505a\u5f88\u591a\u53d7\u9650\u4e8e\u7f51\u7edc\u548cIO\u7684\u4efb\u52a1\u65f6\u5e38\u5e38\u9700\u8981\u7528\u5230\u5b83\u3002</p>\u000a<pre><code class="python">\u000aimport gevent\u000afrom gevent.pool import Pool\u000a\u000apool = Pool(2)\u000a\u000adef hello_from(n):\u000a    print('Size of pool %s' % len(pool))\u000a\u000apool.map(hello_from, xrange(3))\u000a</pre>\u000a\u000a<p></code>\u000a<pre><code class="python">\u000aSize of pool 2\u000aSize of pool 2\u000aSize of pool 1\u000a</pre></code></p>\u000a<p>\u5f53\u6784\u9020gevent\u9a71\u52a8\u7684\u670d\u52a1\u65f6\uff0c\u7ecf\u5e38\u4f1a\u5c06\u56f4\u7ed5\u4e00\u4e2a\u6c60\u7ed3\u6784\u7684\u6574\u4e2a\u670d\u52a1\u4f5c\u4e3a\u4e2d\u5fc3\u3002\u000a\u4e00\u4e2a\u4f8b\u5b50\u5c31\u662f\u5728\u5404\u4e2asocket\u4e0a\u8f6e\u8be2\u7684\u7c7b\u3002</p>\u000a<pre>\u000a<code class="python">from gevent.pool import Pool\u000a\u000aclass SocketPool(object):\u000a\u000a    def __init__(self):\u000a        self.pool = Pool(1000)\u000a        self.pool.start()\u000a\u000a    def listen(self, socket):\u000a        while True:\u000a            socket.recv()\u000a\u000a    def add_handler(self, socket):\u000a        if self.pool.full():\u000a            raise Exception("At maximum pool size")\u000a        else:\u000a            self.pool.spawn(self.listen, socket)\u000a\u000a    def shutdown(self):\u000a        self.pool.kill()\u000a\u000a</code>\u000a</pre>\u000a\u000a<h2 id="_11">\u9501\u548c\u4fe1\u53f7\u91cf</h2>\u000a<p>\u4fe1\u53f7\u91cf\u662f\u4e00\u4e2a\u5141\u8bb8greenlet\u76f8\u4e92\u5408\u4f5c\uff0c\u9650\u5236\u5e76\u53d1\u8bbf\u95ee\u6216\u8fd0\u884c\u7684\u4f4e\u5c42\u6b21\u7684\u540c\u6b65\u539f\u8bed\u3002\u000a\u4fe1\u53f7\u91cf\u6709\u4e24\u4e2a\u65b9\u6cd5\uff0c<code>acquire</code>\u548c<code>release</code>\u3002\u5728\u4fe1\u53f7\u91cf\u662f\u5426\u5df2\u7ecf\u88ab\u000aacquire\u6216release\uff0c\u548c\u62e5\u6709\u8d44\u6e90\u7684\u6570\u91cf\u4e4b\u95f4\u4e0d\u540c\uff0c\u88ab\u79f0\u4e3a\u6b64\u4fe1\u53f7\u91cf\u7684\u8303\u56f4\u000a(the bound of the semaphore)\u3002\u5982\u679c\u4e00\u4e2a\u4fe1\u53f7\u91cf\u7684\u8303\u56f4\u5df2\u7ecf\u964d\u4f4e\u52300\uff0c\u5b83\u4f1a\u000a\u963b\u585eacquire\u64cd\u4f5c\u76f4\u5230\u53e6\u4e00\u4e2a\u5df2\u7ecf\u83b7\u5f97\u4fe1\u53f7\u91cf\u7684greenlet\u4f5c\u51fa\u91ca\u653e\u3002</p>\u000a<pre><code class="python">\u000afrom gevent import sleep\u000afrom gevent.pool import Pool\u000afrom gevent.coros import BoundedSemaphore\u000a\u000asem = BoundedSemaphore(2)\u000a\u000adef worker1(n):\u000a    sem.acquire()\u000a    print('Worker %i acquired semaphore' % n)\u000a    sleep(0)\u000a    sem.release()\u000a    print('Worker %i released semaphore' % n)\u000a\u000adef worker2(n):\u000a    with sem:\u000a        print('Worker %i acquired semaphore' % n)\u000a        sleep(0)\u000a    print('Worker %i released semaphore' % n)\u000a\u000apool = Pool()\u000apool.map(worker1, xrange(0,2))\u000apool.map(worker2, xrange(3,6))\u000a</pre>\u000a\u000a<p></code>\u000a<pre><code class="python">\u000aWorker 0 acquired semaphore\u000aWorker 1 acquired semaphore\u000aWorker 0 released semaphore\u000aWorker 1 released semaphore\u000aWorker 3 acquired semaphore\u000aWorker 4 acquired semaphore\u000aWorker 3 released semaphore\u000aWorker 4 released semaphore\u000aWorker 5 acquired semaphore\u000aWorker 5 released semaphore\u000a</pre></code></p>\u000a<p>\u8303\u56f4\u4e3a1\u7684\u4fe1\u53f7\u91cf\u4e5f\u79f0\u4e3a\u9501(lock)\u3002\u5b83\u5411\u5355\u4e2agreenlet\u63d0\u4f9b\u4e86\u4e92\u65a5\u8bbf\u95ee\u3002\u000a\u4fe1\u53f7\u91cf\u548c\u9501\u5e38\u5e38\u7528\u6765\u4fdd\u8bc1\u8d44\u6e90\u53ea\u5728\u7a0b\u5e8f\u4e0a\u4e0b\u6587\u88ab\u5355\u6b21\u4f7f\u7528\u3002</p>\u000a<h2 id="_12">\u7ebf\u7a0b\u5c40\u90e8\u53d8\u91cf</h2>\u000a<p>Gevent\u4e5f\u5141\u8bb8\u4f60\u6307\u5b9a\u5c40\u90e8\u4e8egreenlet\u4e0a\u4e0b\u6587\u7684\u6570\u636e\u3002\u000a\u5728\u5185\u90e8\uff0c\u5b83\u88ab\u5b9e\u73b0\u4e3a\u4ee5greenlet\u7684<code>getcurrent()</code>\u4e3a\u952e\uff0c\u000a\u5728\u4e00\u4e2a\u79c1\u6709\u547d\u540d\u7a7a\u95f4\u5bfb\u5740\u7684\u5168\u5c40\u67e5\u627e\u3002</p>\u000a<pre><code class="python">\u000aimport gevent\u000afrom gevent.local import local\u000a\u000astash = local()\u000a\u000adef f1():\u000a    stash.x = 1\u000a    print(stash.x)\u000a\u000adef f2():\u000a    stash.y = 2\u000a    print(stash.y)\u000a\u000a    try:\u000a        stash.x\u000a    except AttributeError:\u000a        print("x is not local to f2")\u000a\u000ag1 = gevent.spawn(f1)\u000ag2 = gevent.spawn(f2)\u000a\u000agevent.joinall([g1, g2])\u000a</pre>\u000a\u000a<p></code>\u000a<pre><code class="python">\u000a1\u000a2\u000ax is not local to f2\u000a</pre></code></p>\u000a<p>\u5f88\u591a\u96c6\u6210\u4e86gevent\u7684web\u6846\u67b6\u5c06HTTP\u4f1a\u8bdd\u5bf9\u8c61\u4ee5\u7ebf\u7a0b\u5c40\u90e8\u53d8\u91cf\u7684\u65b9\u5f0f\u5b58\u50a8\u5728gevent\u5185\u3002\u000a\u4f8b\u5982\u4f7f\u7528Werkzeug\u5b9e\u7528\u5e93\u548c\u5b83\u7684proxy\u5bf9\u8c61\uff0c\u6211\u4eec\u53ef\u4ee5\u521b\u5efaFlask\u98ce\u683c\u7684\u8bf7\u6c42\u5bf9\u8c61\u3002</p>\u000a<pre>\u000a<code class="python">from gevent.local import local\u000afrom werkzeug.local import LocalProxy\u000afrom werkzeug.wrappers import Request\u000afrom contextlib import contextmanager\u000a\u000afrom gevent.wsgi import WSGIServer\u000a\u000a_requests = local()\u000arequest = LocalProxy(lambda: _requests.request)\u000a\u000a@contextmanager\u000adef sessionmanager(environ):\u000a    _requests.request = Request(environ)\u000a    yield\u000a    _requests.request = None\u000a\u000adef logic():\u000a    return "Hello " + request.remote_addr\u000a\u000adef application(environ, start_response):\u000a    status = '200 OK'\u000a\u000a    with sessionmanager(environ):\u000a        body = logic()\u000a\u000a    headers = [\u000a        ('Content-Type', 'text/html')\u000a    ]\u000a\u000a    start_response(status, headers)\u000a    return [body]\u000a\u000aWSGIServer(('', 8000), application).serve_forever()\u000a\u000a<code>\u000a</pre>\u000a\u000a<p>Flask\u7cfb\u7edf\u6bd4\u8fd9\u4e2a\u4f8b\u5b50\u590d\u6742\u4e00\u70b9\uff0c\u7136\u800c\u4f7f\u7528\u7ebf\u7a0b\u5c40\u90e8\u53d8\u91cf\u4f5c\u4e3a\u5c40\u90e8\u7684\u4f1a\u8bdd\u5b58\u50a8\uff0c\u000a\u8fd9\u4e2a\u601d\u60f3\u662f\u76f8\u540c\u7684\u3002</p>\u000a<h2 id="_13">\u5b50\u8fdb\u7a0b</h2>\u000a<p>\u81eagevent 1.0\u8d77\uff0c<code>gevent.subprocess</code>\uff0c\u4e00\u4e2aPython <code>subprocess</code>\u6a21\u5757\u000a\u7684\u4fee\u8865\u7248\u672c\u5df2\u7ecf\u6dfb\u52a0\u3002\u5b83\u652f\u6301\u534f\u4f5c\u5f0f\u7684\u7b49\u5f85\u5b50\u8fdb\u7a0b\u3002</p>\u000a<pre>\u000a<code class="python">\u000aimport gevent\u000afrom gevent.subprocess import Popen, PIPE\u000a\u000adef cron():\u000a    while True:\u000a        print("cron")\u000a        gevent.sleep(0.2)\u000a\u000ag = gevent.spawn(cron)\u000asub = Popen(['sleep 1; uname'], stdout=PIPE, shell=True)\u000aout, err = sub.communicate()\u000ag.kill()\u000aprint(out.rstrip())\u000a</pre>\u000a\u000a<pre>\u000a<code class="python">\u000acron\u000acron\u000acron\u000acron\u000acron\u000aLinux\u000a<code>\u000a</pre>\u000a\u000a<p>\u5f88\u591a\u4eba\u4e5f\u60f3\u5c06<code>gevent</code>\u548c<code>multiprocessing</code>\u4e00\u8d77\u4f7f\u7528\u3002\u6700\u660e\u663e\u7684\u6311\u6218\u4e4b\u4e00\u000a\u5c31\u662f<code>multiprocessing</code>\u63d0\u4f9b\u7684\u8fdb\u7a0b\u95f4\u901a\u4fe1\u9ed8\u8ba4\u4e0d\u662f\u534f\u4f5c\u5f0f\u7684\u3002\u7531\u4e8e\u57fa\u4e8e\u000a<code>multiprocessing.Connection</code>\u7684\u5bf9\u8c61(\u4f8b\u5982<code>Pipe</code>)\u66b4\u9732\u4e86\u5b83\u4eec\u4e0b\u9762\u7684\u000a\u6587\u4ef6\u63cf\u8ff0\u7b26(file descriptor)\uff0c<code>gevent.socket.wait_read</code>\u548c<code>wait_write</code>\u000a\u53ef\u4ee5\u7528\u6765\u5728\u76f4\u63a5\u8bfb\u5199\u4e4b\u524d\u534f\u4f5c\u5f0f\u7684\u7b49\u5f85ready-to-read/ready-to-write\u4e8b\u4ef6\u3002</p>\u000a<pre>\u000a<code class="python">\u000aimport gevent\u000afrom multiprocessing import Process, Pipe\u000afrom gevent.socket import wait_read, wait_write\u000a\u000a# To Process\u000aa, b = Pipe()\u000a\u000a# From Process\u000ac, d = Pipe()\u000a\u000adef relay():\u000a    for i in xrange(10):\u000a        msg = b.recv()\u000a        c.send(msg + " in " + str(i))\u000a\u000adef put_msg():\u000a    for i in xrange(10):\u000a        wait_write(a.fileno())\u000a        a.send('hi')\u000a\u000adef get_msg():\u000a    for i in xrange(10):\u000a        wait_read(d.fileno())\u000a        print(d.recv())\u000a\u000aif __name__ == '__main__':\u000a    proc = Process(target=relay)\u000a    proc.start()\u000a\u000a    g1 = gevent.spawn(get_msg)\u000a    g2 = gevent.spawn(put_msg)\u000a    gevent.joinall([g1, g2], timeout=1)\u000a</code>\u000a</pre>\u000a\u000a<p>\u7136\u800c\u8981\u6ce8\u610f\uff0c\u7ec4\u5408<code>multiprocessing</code>\u548cgevent\u5fc5\u5b9a\u5e26\u6765\u000a\u4f9d\u8d56\u4e8e\u64cd\u4f5c\u7cfb\u7edf(os-dependent)\u7684\u7f3a\u9677\uff0c\u5176\u4e2d\u6709\uff1a</p>\u000a<ul>\u000a<li>\u000a<p>\u5728\u517c\u5bb9POSIX\u7684\u7cfb\u7edf<a href="http://linux.die.net/man/2/fork">\u521b\u5efa\u5b50\u8fdb\u7a0b(forking)</a>\u4e4b\u540e\uff0c\u000a\u5728\u5b50\u8fdb\u7a0b\u7684gevent\u7684\u72b6\u6001\u662f\u4e0d\u9002\u5b9a\u7684(ill-posed)\u3002\u4e00\u4e2a\u526f\u4f5c\u7528\u5c31\u662f\uff0c\u000a<code>multiprocessing.Process</code>\u521b\u5efa\u4e4b\u524d\u7684greenlet\u521b\u5efa\u52a8\u4f5c\uff0c\u4f1a\u5728\u7236\u8fdb\u7a0b\u548c\u5b50\u8fdb\u7a0b\u4e24\u000a\u65b9\u90fd\u8fd0\u884c\u3002</p>\u000a</li>\u000a<li>\u000a<p>\u4e0a\u4f8b\u7684<code>put_msg()</code>\u4e2d\u7684<code>a.send()</code>\u53ef\u80fd\u4f9d\u7136\u975e\u534f\u4f5c\u5f0f\u5730\u963b\u585e\u8c03\u7528\u7684\u7ebf\u7a0b\uff1a\u4e00\u4e2a\u000aready-to-write\u4e8b\u4ef6\u53ea\u4fdd\u8bc1\u5199\u4e86\u4e00\u4e2abyte\u3002\u5728\u5c1d\u8bd5\u5199\u5b8c\u6210\u4e4b\u524d\u5e95\u4e0b\u7684buffer\u53ef\u80fd\u662f\u6ee1\u7684\u3002</p>\u000a</li>\u000a<li>\u000a<p>\u4e0a\u9762\u8868\u793a\u7684\u57fa\u4e8e<code>wait_write()</code>/<code>wait_read()</code>\u7684\u65b9\u6cd5\u5728Windows\u4e0a\u4e0d\u5de5\u4f5c\u000a(<code>IOError: 3 is not a socket (files are not supported)</code>)\uff0c\u56e0\u4e3aWindows\u4e0d\u80fd\u76d1\u89c6\u000apipe\u4e8b\u4ef6\u3002</p>\u000a</li>\u000a</ul>\u000a<p>Python\u5305<a href="http://pypi.python.org/pypi/gipc">gipc</a>\u4ee5\u5927\u4f53\u4e0a\u900f\u660e\u7684\u65b9\u5f0f\u5728\u000a\u517c\u5bb9POSIX\u7cfb\u7edf\u548cWindows\u4e0a\u514b\u670d\u4e86\u8fd9\u4e9b\u6311\u6218\u3002\u5b83\u63d0\u4f9b\u4e86gevent\u611f\u77e5\u7684\u57fa\u4e8e\u000a<code>multiprocessing.Process</code>\u7684\u5b50\u8fdb\u7a0b\u548cgevent\u57fa\u4e8epipe\u7684\u534f\u4f5c\u5f0f\u8fdb\u7a0b\u95f4\u901a\u4fe1\u3002</p>\u000a<h2 id="actors">Actors</h2>\u000a<p>actor\u6a21\u578b\u662f\u4e00\u4e2a\u7531\u4e8eErlang\u53d8\u5f97\u666e\u53ca\u7684\u66f4\u9ad8\u5c42\u7684\u5e76\u53d1\u6a21\u578b\u3002\u000a\u7b80\u5355\u7684\u8bf4\u5b83\u7684\u4e3b\u8981\u601d\u60f3\u5c31\u662f\u8bb8\u591a\u4e2a\u72ec\u7acb\u7684Actor\uff0c\u6bcf\u4e2aActor\u6709\u4e00\u4e2a\u53ef\u4ee5\u4ece\u000a\u5176\u5b83Actor\u63a5\u6536\u6d88\u606f\u7684\u6536\u4ef6\u7bb1\u3002Actor\u5185\u90e8\u7684\u4e3b\u5faa\u73af\u904d\u5386\u5b83\u6536\u5230\u7684\u6d88\u606f\uff0c\u5e76\u000a\u6839\u636e\u5b83\u671f\u671b\u7684\u884c\u4e3a\u6765\u91c7\u53d6\u884c\u52a8\u3002</p>\u000a<p>Gevent\u6ca1\u6709\u539f\u751f\u7684Actor\u7c7b\u578b\uff0c\u4f46\u5728\u4e00\u4e2a\u5b50\u7c7b\u5316\u7684Greenlet\u5185\u4f7f\u7528\u961f\u5217\uff0c\u000a\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u3002</p>\u000a<pre>\u000a<code class="python">import gevent\u000afrom gevent.queue import Queue\u000a\u000aclass Actor(gevent.Greenlet):\u000a\u000a    def __init__(self):\u000a        self.inbox = Queue()\u000a        Greenlet.__init__(self)\u000a\u000a    def receive(self, message):\u000a        """\u000a        Define in your subclass.\u000a        """\u000a        raise NotImplemented()\u000a\u000a    def _run(self):\u000a        self.running = True\u000a\u000a        while self.running:\u000a            message = self.inbox.get()\u000a            self.receive(message)\u000a\u000a</code>\u000a</pre>\u000a\u000a<p>\u4e0b\u9762\u662f\u4e00\u4e2a\u4f7f\u7528\u7684\u4f8b\u5b50\uff1a</p>\u000a<pre>\u000a<code class="python">import gevent\u000afrom gevent.queue import Queue\u000afrom gevent import Greenlet\u000a\u000aclass Pinger(Actor):\u000a    def receive(self, message):\u000a        print(message)\u000a        pong.inbox.put('ping')\u000a        gevent.sleep(0)\u000a\u000aclass Ponger(Actor):\u000a    def receive(self, message):\u000a        print(message)\u000a        ping.inbox.put('pong')\u000a        gevent.sleep(0)\u000a\u000aping = Pinger()\u000apong = Ponger()\u000a\u000aping.start()\u000apong.start()\u000a\u000aping.inbox.put('start')\u000agevent.joinall([ping, pong])\u000a</code>\u000a</pre>\u000a\u000a<h1 id="_14">\u771f\u5b9e\u4e16\u754c\u7684\u5e94\u7528</h1>\u000a<h2 id="gevent-zeromq">Gevent ZeroMQ</h2>\u000a<p><a href="http://www.zeromq.org/">ZeroMQ</a> \u88ab\u5b83\u7684\u4f5c\u8005\u63cf\u8ff0\u4e3a\u000a\u201c\u4e00\u4e2a\u8868\u73b0\u5f97\u50cf\u4e00\u4e2a\u5e76\u53d1\u6846\u67b6\u7684socket\u5e93\u201d\u3002\u000a\u5b83\u662f\u4e00\u4e2a\u975e\u5e38\u5f3a\u5927\u7684\uff0c\u4e3a\u6784\u5efa\u5e76\u53d1\u548c\u5206\u5e03\u5f0f\u5e94\u7528\u7684\u6d88\u606f\u4f20\u9012\u5c42\u3002</p>\u000a<p>ZeroMQ\u63d0\u4f9b\u4e86\u5404\u79cd\u5404\u6837\u7684socket\u539f\u8bed\u3002\u6700\u7b80\u5355\u7684\u662f\u8bf7\u6c42-\u5e94\u7b54socket\u5bf9\u000a(Request-Response socket pair)\u3002\u4e00\u4e2asocket\u6709\u4e24\u4e2a\u65b9\u6cd5<code>send</code>\u548c<code>recv</code>\uff0c\u000a\u4e24\u8005\u4e00\u822c\u90fd\u662f\u963b\u585e\u64cd\u4f5c\u3002\u4f46\u662f<a href="https://github.com/traviscline">Travis Cline</a>\u000a\u7684\u4e00\u4e2a\u6770\u51fa\u7684\u5e93\u5f25\u8865\u4e86\u8fd9\u4e00\u70b9\uff0c\u8fd9\u4e2a\u5e93\u4f7f\u7528gevent.socket\u6765\u4ee5\u975e\u963b\u585e\u7684\u65b9\u5f0f\u000a\u8f6e\u8be2ZereMQ socket\u3002\u901a\u8fc7\u547d\u4ee4\uff1a</p>\u000a<p><code>pip install gevent-zeromq</code></p>\u000a<p>\u4f60\u53ef\u4ee5\u4ecePyPi\u5b89\u88c5gevent-zeremq\u3002</p>\u000a<pre><code class="python">\u000a# Note: Remember to ``pip install pyzmq gevent_zeromq``\u000aimport gevent\u000afrom gevent_zeromq import zmq\u000a\u000a# Global Context\u000acontext = zmq.Context()\u000a\u000adef server():\u000a    server_socket = context.socket(zmq.REQ)\u000a    server_socket.bind("tcp://127.0.0.1:5000")\u000a\u000a    for request in range(1,10):\u000a        server_socket.send("Hello")\u000a        print('Switched to Server for %s' % request)\u000a        # Implicit context switch occurs here\u000a        server_socket.recv()\u000a\u000adef client():\u000a    client_socket = context.socket(zmq.REP)\u000a    client_socket.connect("tcp://127.0.0.1:5000")\u000a\u000a    for request in range(1,10):\u000a\u000a        client_socket.recv()\u000a        print('Switched to Client for %s' % request)\u000a        # Implicit context switch occurs here\u000a        client_socket.send("World")\u000a\u000apublisher = gevent.spawn(server)\u000aclient    = gevent.spawn(client)\u000a\u000agevent.joinall([publisher, client])\u000a\u000a</pre>\u000a\u000a<p></code>\u000a<pre><code class="python">\u000aSwitched to Server for 1\u000aSwitched to Client for 1\u000aSwitched to Server for 2\u000aSwitched to Client for 2\u000aSwitched to Server for 3\u000aSwitched to Client for 3\u000aSwitched to Server for 4\u000aSwitched to Client for 4\u000aSwitched to Server for 5\u000aSwitched to Client for 5\u000aSwitched to Server for 6\u000aSwitched to Client for 6\u000aSwitched to Server for 7\u000aSwitched to Client for 7\u000aSwitched to Server for 8\u000aSwitched to Client for 8\u000aSwitched to Server for 9\u000aSwitched to Client for 9\u000a</pre></code></p>\u000a<h2 id="server">\u7b80\u5355server</h2>\u000a<pre>\u000a<code class="python">\u000a# On Unix: Access with ``$ nc 127.0.0.1 5000``\u000a# On Window: Access with ``$ telnet 127.0.0.1 5000``\u000a\u000afrom gevent.server import StreamServer\u000a\u000adef handle(socket, address):\u000a    socket.send("Hello from a telnet!\u005cn")\u000a    for i in range(5):\u000a        socket.send(str(i) + '\u005cn')\u000a    socket.close()\u000a\u000aserver = StreamServer(('127.0.0.1', 5000), handle)\u000aserver.serve_forever()\u000a</code>\u000a</pre>\u000a\u000a<h2 id="wsgi-servers">WSGI Servers</h2>\u000a<p>Gevent\u4e3aHTTP\u5185\u5bb9\u670d\u52a1\u63d0\u4f9b\u4e86\u4e24\u79cdWSGI server\u3002\u4ece\u4eca\u4ee5\u540e\u5c31\u79f0\u4e3a\u000a<code>wsgi</code>\u548c<code>pywsgi</code>\uff1a</p>\u000a<ul>\u000a<li>gevent.wsgi.WSGIServer</li>\u000a<li>gevent.pywsgi.WSGIServer</li>\u000a</ul>\u000a<p>\u57281.0.x\u4e4b\u524d\u66f4\u65e9\u671f\u7684\u7248\u672c\u91cc\uff0cgevent\u4f7f\u7528libevent\u800c\u4e0d\u662flibev\u3002\u000aLibevent\u5305\u542b\u4e86\u4e00\u4e2a\u5feb\u901fHTTP server\uff0c\u5b83\u88ab\u7528\u5728gevent\u7684<code>wsgi</code> server\u3002</p>\u000a<p>\u5728gevent 1.0.x\u7248\u672c\uff0c\u6ca1\u6709\u5305\u62echttp server\u4e86\u3002\u4f5c\u4e3a\u66ff\u4ee3\uff0c<code>gevent.wsgi</code>\u000a\u73b0\u5728\u662f\u7eafPython server <code>gevent.pywsgi</code>\u7684\u4e00\u4e2a\u522b\u540d\u3002</p>\u000a<h2 id="server_1">\u6d41\u5f0fserver</h2>\u000a<p><strong>\u8fd9\u4e2a\u7ae0\u8282\u4e0d\u9002\u7528\u4e8egevent 1.0.x\u7248\u672c</strong></p>\u000a<p>\u719f\u6089\u6d41\u5f0fHTTP\u670d\u52a1(streaming HTTP service)\u7684\u4eba\u77e5\u9053\uff0c\u5b83\u7684\u6838\u5fc3\u601d\u60f3\u000a\u5c31\u662f\u5728\u5934\u90e8(header)\u4e0d\u6307\u5b9a\u5185\u5bb9\u7684\u957f\u5ea6\u3002\u53cd\u800c\uff0c\u6211\u4eec\u8ba9\u8fde\u63a5\u4fdd\u6301\u6253\u5f00\uff0c\u000a\u5728\u6bcf\u5757\u6570\u636e\u524d\u52a0\u4e00\u4e2a16\u8fdb\u5236\u5b57\u8282\u6765\u6307\u793a\u6570\u636e\u5757\u7684\u957f\u5ea6\uff0c\u5e76\u5c06\u6570\u636e\u5237\u5165pipe\u4e2d\u3002\u000a\u5f53\u53d1\u51fa\u4e00\u4e2a0\u957f\u5ea6\u6570\u636e\u5757\u65f6\uff0c\u6d41\u4f1a\u88ab\u5173\u95ed\u3002</p>\u000a<pre><code>HTTP/1.1 200 OK\u000aContent-Type: text/plain\u000aTransfer-Encoding: chunked\u000a\u000a8\u000a&lt;p&gt;Hello\u000a\u000a9\u000aWorld&lt;/p&gt;\u000a\u000a0\u000a</code></pre>\u000a<p>\u4e0a\u8ff0\u7684HTTP\u8fde\u63a5\u4e0d\u80fd\u5728wsgi\u4e2d\u521b\u5efa\uff0c\u56e0\u4e3a\u5b83\u4e0d\u652f\u6301\u6d41\u5f0f\u3002\u000a\u8bf7\u6c42\u53ea\u6709\u88ab\u7f13\u51b2(buffered)\u4e0b\u6765\u3002</p>\u000a<pre>\u000a<code class="python">from gevent.wsgi import WSGIServer\u000a\u000adef application(environ, start_response):\u000a    status = '200 OK'\u000a    body = '&lt;p&gt;Hello World&lt;/p&gt;'\u000a\u000a    headers = [\u000a        ('Content-Type', 'text/html')\u000a    ]\u000a\u000a    start_response(status, headers)\u000a    return [body]\u000a\u000aWSGIServer(('', 8000), application).serve_forever()\u000a\u000a</code>\u000a</pre>\u000a\u000a<p>\u7136\u800c\u4f7f\u7528pywsgi\u6211\u4eec\u53ef\u4ee5\u5c06handler\u5199\u6210generator\uff0c\u5e76\u4ee5\u5757\u7684\u5f62\u5f0fyield\u51fa\u7ed3\u679c\u3002</p>\u000a<pre>\u000a<code class="python">from gevent.pywsgi import WSGIServer\u000a\u000adef application(environ, start_response):\u000a    status = '200 OK'\u000a\u000a    headers = [\u000a        ('Content-Type', 'text/html')\u000a    ]\u000a\u000a    start_response(status, headers)\u000a    yield "&lt;p&gt;Hello"\u000a    yield "World&lt;/p&gt;"\u000a\u000aWSGIServer(('', 8000), application).serve_forever()\u000a\u000a</code>\u000a</pre>\u000a\u000a<p>\u4f46\u65e0\u8bba\u5982\u4f55\uff0c\u4e0e\u5176\u5b83Python server\u76f8\u6bd4gevent server\u6027\u80fd\u662f\u663e\u80dc\u7684\u3002\u000aLibev\u662f\u5f97\u5230\u975e\u5e38\u597d\u5ba1\u67e5\u7684\u6280\u672f\uff0c\u7531\u5b83\u5199\u51fa\u7684server\u5728\u5927\u89c4\u6a21\u4e0a\u8868\u73b0\u4f18\u5f02\u4e3a\u4eba\u719f\u77e5\u3002</p>\u000a<p>\u4e3a\u4e86\u6d4b\u8bd5\u57fa\u51c6\uff0c\u8bd5\u7528Apache Benchmark <code>ab</code>\u6216\u6d4f\u89c8\u000a<a href="http://nichol.as/benchmark-of-python-web-servers">Benchmark of Python WSGI Servers</a>\u000a\u6765\u4e0e\u5176\u5b83server\u4f5c\u5bf9\u6bd4\u3002</p>\u000a<pre>\u000a<code class="shell">$ ab -n 10000 -c 100 http://127.0.0.1:8000/\u000a</code>\u000a</pre>\u000a\u000a<h2 id="long-polling">Long Polling</h2>\u000a<pre>\u000a<code class="python">import gevent\u000afrom gevent.queue import Queue, Empty\u000afrom gevent.pywsgi import WSGIServer\u000aimport simplejson as json\u000a\u000adata_source = Queue()\u000a\u000adef producer():\u000a    while True:\u000a        data_source.put_nowait('Hello World')\u000a        gevent.sleep(1)\u000a\u000adef ajax_endpoint(environ, start_response):\u000a    status = '200 OK'\u000a    headers = [\u000a        ('Content-Type', 'application/json')\u000a    ]\u000a\u000a    start_response(status, headers)\u000a\u000a    while True:\u000a        try:\u000a            datum = data_source.get(timeout=5)\u000a            yield json.dumps(datum) + '\u005cn'\u000a        except Empty:\u000a            pass\u000a\u000agevent.spawn(producer)\u000a\u000aWSGIServer(('', 8000), ajax_endpoint).serve_forever()\u000a\u000a</code>\u000a</pre>\u000a\u000a<h2 id="websockets">Websockets</h2>\u000a<p>\u8fd0\u884cWebsocket\u7684\u4f8b\u5b50\u9700\u8981<a href="https://bitbucket.org/Jeffrey/gevent-websocket/src">gevent-websocket</a>\u5305\u3002</p>\u000a<pre>\u000a<code class="python"># Simple gevent-websocket server\u000aimport json\u000aimport random\u000a\u000afrom gevent import pywsgi, sleep\u000afrom geventwebsocket.handler import WebSocketHandler\u000a\u000aclass WebSocketApp(object):\u000a    '''Send random data to the websocket'''\u000a\u000a    def __call__(self, environ, start_response):\u000a        ws = environ['wsgi.websocket']\u000a        x = 0\u000a        while True:\u000a            data = json.dumps({'x': x, 'y': random.randint(1, 5)})\u000a            ws.send(data)\u000a            x += 1\u000a            sleep(0.5)\u000a\u000aserver = pywsgi.WSGIServer(("", 10000), WebSocketApp(),\u000a    handler_class=WebSocketHandler)\u000aserver.serve_forever()\u000a</code>\u000a</pre>\u000a\u000a<p>HTML Page:</p>\u000a<pre><code>&lt;html&gt;\u000a    &lt;head&gt;\u000a        &lt;title&gt;Minimal websocket application&lt;/title&gt;\u000a        &lt;script type="text/javascript" src="jquery.min.js"&gt;&lt;/script&gt;\u000a        &lt;script type="text/javascript"&gt;\u000a        $(function() {\u000a            // Open up a connection to our server\u000a            var ws = new WebSocket("ws://localhost:10000/");\u000a\u000a            // What do we do when we get a message?\u000a            ws.onmessage = function(evt) {\u000a                $("#placeholder").append('&lt;p&gt;' + evt.data + '&lt;/p&gt;')\u000a            }\u000a            // Just update our conn_status field with the connection status\u000a            ws.onopen = function(evt) {\u000a                $('#conn_status').html('&lt;b&gt;Connected&lt;/b&gt;');\u000a            }\u000a            ws.onerror = function(evt) {\u000a                $('#conn_status').html('&lt;b&gt;Error&lt;/b&gt;');\u000a            }\u000a            ws.onclose = function(evt) {\u000a                $('#conn_status').html('&lt;b&gt;Closed&lt;/b&gt;');\u000a            }\u000a        });\u000a    &lt;/script&gt;\u000a    &lt;/head&gt;\u000a    &lt;body&gt;\u000a        &lt;h1&gt;WebSocket Example&lt;/h1&gt;\u000a        &lt;div id="conn_status"&gt;Not Connected&lt;/div&gt;\u000a        &lt;div id="placeholder" style="width:600px;height:300px;"&gt;&lt;/div&gt;\u000a    &lt;/body&gt;\u000a&lt;/html&gt;\u000a</code></pre>\u000a<h2 id="server_2">\u804a\u5929server</h2>\u000a<p>\u6700\u540e\u4e00\u4e2a\u751f\u52a8\u7684\u4f8b\u5b50\uff0c\u5b9e\u73b0\u4e00\u4e2a\u5b9e\u65f6\u804a\u5929\u5ba4\u3002\u8fd0\u884c\u8fd9\u4e2a\u4f8b\u5b50\u9700\u8981\u000a<a href="http://flask.pocoo.org/">Flask</a>\u000a(\u4f60\u53ef\u4ee5\u4f7f\u7528Django, Pyramid\u7b49\uff0c\u4f46\u4e0d\u662f\u5fc5\u987b\u7684)\u3002\u000a\u5bf9\u5e94\u7684Javascript\u548cHTML\u6587\u4ef6\u53ef\u4ee5\u5728\u000a<a href="https://github.com/sdiehl/minichat">\u8fd9\u91cc</a>\u627e\u5230\u3002</p>\u000a<pre>\u000a<code class="python"># Micro gevent chatroom.\u000a# ----------------------\u000a\u000afrom flask import Flask, render_template, request\u000a\u000afrom gevent import queue\u000afrom gevent.pywsgi import WSGIServer\u000a\u000aimport simplejson as json\u000a\u000aapp = Flask(__name__)\u000aapp.debug = True\u000a\u000arooms = {\u000a    'topic1': Room(),\u000a    'topic2': Room(),\u000a}\u000a\u000ausers = {}\u000a\u000aclass Room(object):\u000a\u000a    def __init__(self):\u000a        self.users = set()\u000a        self.messages = []\u000a\u000a    def backlog(self, size=25):\u000a        return self.messages[-size:]\u000a\u000a    def subscribe(self, user):\u000a        self.users.add(user)\u000a\u000a    def add(self, message):\u000a        for user in self.users:\u000a            print(user)\u000a            user.queue.put_nowait(message)\u000a        self.messages.append(message)\u000a\u000aclass User(object):\u000a\u000a    def __init__(self):\u000a        self.queue = queue.Queue()\u000a\u000a@app.route('/')\u000adef choose_name():\u000a    return render_template('choose.html')\u000a\u000a@app.route('/&lt;uid&gt;')\u000adef main(uid):\u000a    return render_template('main.html',\u000a        uid=uid,\u000a        rooms=rooms.keys()\u000a    )\u000a\u000a@app.route('/&lt;room&gt;/&lt;uid&gt;')\u000adef join(room, uid):\u000a    user = users.get(uid, None)\u000a\u000a    if not user:\u000a        users[uid] = user = User()\u000a\u000a    active_room = rooms[room]\u000a    active_room.subscribe(user)\u000a    print('subscribe %s %s' % (active_room, user))\u000a\u000a    messages = active_room.backlog()\u000a\u000a    return render_template('room.html',\u000a        room=room, uid=uid, messages=messages)\u000a\u000a@app.route("/put/&lt;room&gt;/&lt;uid&gt;", methods=["POST"])\u000adef put(room, uid):\u000a    user = users[uid]\u000a    room = rooms[room]\u000a\u000a    message = request.form['message']\u000a    room.add(':'.join([uid, message]))\u000a\u000a    return ''\u000a\u000a@app.route("/poll/&lt;uid&gt;", methods=["POST"])\u000adef poll(uid):\u000a    try:\u000a        msg = users[uid].queue.get(timeout=10)\u000a    except queue.Empty:\u000a        msg = []\u000a    return json.dumps(msg)\u000a\u000aif __name__ == "__main__":\u000a    http = WSGIServer(('', 5000), app)\u000a    http.serve_forever()\u000a</code>\u000a</pre>\u000a</div>\u000a\u000a</body>\u000a</html>
p3
a.